; generated by Component: ARM Compiler 5.06 update 6 (build 750) Tool: ArmCC [4d3637]
; commandline ArmCC [--list --split_sections --debug -c --asm --interleave -o.\obj\mlt_lcd.o --asm_dir=.\obj\ --list_dir=.\obj\ --depend=.\obj\mlt_lcd.d --cpu=Cortex-M3 --apcs=interwork -O0 --diag_suppress=9931 -I"..\CAN TEST" -I.\RTE -I.\RTE\Device -I.\RTE\Device\MDR1986BE92 -I.\rtos -I.\rtos\include -I.\RTE\Device\MDR1986BE92 -I.\RTE\_Target_1 -IC:\Users\AN-Mi\AppData\Local\Arm\Packs\ARM\CMSIS\5.5.1\CMSIS\Core\Include -IC:\Users\AN-Mi\AppData\Local\Arm\Packs\ARM\CMSIS\5.5.1\CMSIS\DSP\Include -IC:\Users\AN-Mi\AppData\Local\Arm\Packs\Keil\MDR1986BExx\1.51\Config -IC:\Users\AN-Mi\AppData\Local\Arm\Packs\Keil\MDR1986BExx\1.51\Libraries\CMSIS\CM3\CoreSupport -IC:\Users\AN-Mi\AppData\Local\Arm\Packs\Keil\MDR1986BExx\1.51\Libraries\CMSIS\CM3\DeviceSupport\MDR32F9Qx\inc -IC:\Users\AN-Mi\AppData\Local\Arm\Packs\Keil\MDR1986BExx\1.51\Libraries\MDR32F9Qx_StdPeriph_Driver\inc -D__MICROLIB -D__UVISION_VERSION=527 -D_RTE_ -DUSE_MDR32F9Q2_Rev1 --omf_browse=.\obj\mlt_lcd.crf MLT\mlt_lcd.c]
                          THUMB

                          AREA ||i.U_MLT_Clear_Chip||, CODE, READONLY, ALIGN=1

                  U_MLT_Clear_Chip PROC
;;;505    // Очистить дисплей
;;;506    void U_MLT_Clear_Chip (uint8_t Chip)
000000  b570              PUSH     {r4-r6,lr}
;;;507    {
000002  4605              MOV      r5,r0
;;;508      int32_t i;
;;;509    
;;;510    	for (i = 0; i < 8; i++)
000004  2400              MOVS     r4,#0
000006  e004              B        |L1.18|
                  |L1.8|
;;;511    		U_MLT_Clear_Page (Chip, i);
000008  b2e1              UXTB     r1,r4
00000a  4628              MOV      r0,r5
00000c  f7fffffe          BL       U_MLT_Clear_Page
000010  1c64              ADDS     r4,r4,#1              ;510
                  |L1.18|
000012  2c08              CMP      r4,#8                 ;510
000014  dbf8              BLT      |L1.8|
;;;512    }
000016  bd70              POP      {r4-r6,pc}
;;;513    
                          ENDP


                          AREA ||i.U_MLT_Clear_Page||, CODE, READONLY, ALIGN=1

                  U_MLT_Clear_Page PROC
;;;488    // Очистить страницу
;;;489    void U_MLT_Clear_Page (uint8_t Chip, uint8_t Page)
000000  b570              PUSH     {r4-r6,lr}
;;;490    {
000002  4605              MOV      r5,r0
000004  460e              MOV      r6,r1
;;;491      int32_t i;
;;;492    
;;;493    	U_MLT_Set_Page (Chip, Page);
000006  4631              MOV      r1,r6
000008  4628              MOV      r0,r5
00000a  f7fffffe          BL       U_MLT_Set_Page
;;;494    
;;;495    	U_MLT_Set_Address (Chip, 0x00);
00000e  2100              MOVS     r1,#0
000010  4628              MOV      r0,r5
000012  f7fffffe          BL       U_MLT_Set_Address
;;;496    
;;;497    	for (i = 0; i < 64; i++)
000016  2400              MOVS     r4,#0
000018  e00c              B        |L2.52|
                  |L2.26|
;;;498    	{	
;;;499    		while (U_MLT_Read_Status (Chip) & 0x80);
00001a  bf00              NOP      
                  |L2.28|
00001c  4628              MOV      r0,r5
00001e  f7fffffe          BL       U_MLT_Read_Status
000022  f0000080          AND      r0,r0,#0x80
000026  2800              CMP      r0,#0
000028  d1f8              BNE      |L2.28|
;;;500    		
;;;501    		U_MLT_Write_Data (Chip, 0x00);
00002a  2100              MOVS     r1,#0
00002c  4628              MOV      r0,r5
00002e  f7fffffe          BL       U_MLT_Write_Data
000032  1c64              ADDS     r4,r4,#1              ;497
                  |L2.52|
000034  2c40              CMP      r4,#0x40              ;497
000036  dbf0              BLT      |L2.26|
;;;502    	}
;;;503    }
000038  bd70              POP      {r4-r6,pc}
;;;504    
                          ENDP


                          AREA ||i.U_MLT_Delay||, CODE, READONLY, ALIGN=1

                  U_MLT_Delay PROC
;;;113    // Задержка 
;;;114    void U_MLT_Delay (uint32_t value)
000000  b508              PUSH     {r3,lr}
;;;115    {
;;;116    	volatile uint32_t x = value;
000002  9000              STR      r0,[sp,#0]
;;;117    	
;;;118    	while ((x--) != 0);
000004  bf00              NOP      
                  |L3.6|
000006  9900              LDR      r1,[sp,#0]
000008  1e4a              SUBS     r2,r1,#1
00000a  9200              STR      r2,[sp,#0]
00000c  2900              CMP      r1,#0
00000e  d1fa              BNE      |L3.6|
;;;119    }
000010  bd08              POP      {r3,pc}
;;;120    
                          ENDP


                          AREA ||i.U_MLT_Disp_Off||, CODE, READONLY, ALIGN=2

                  U_MLT_Disp_Off PROC
;;;234    // Включить и выключить дисплей
;;;235    void U_MLT_Disp_Off (uint8_t Chip)
000000  b510              PUSH     {r4,lr}
;;;236    {
000002  4604              MOV      r4,r0
;;;237    	// Если выбран дисплей 1, то установить вывод Е1 (дисплей 1 выбран)
;;;238    	if (Chip == 1) 
000004  2c01              CMP      r4,#1
000006  d104              BNE      |L4.18|
;;;239    	{
;;;240        U_MLT_Set_E1_Pin;
000008  2180              MOVS     r1,#0x80
00000a  482c              LDR      r0,|L4.188|
00000c  f7fffffe          BL       PORT_SetBits
000010  e004              B        |L4.28|
                  |L4.18|
;;;241      }
;;;242    	// Если выбран дисплей 2, то установить вывод Е2 (дисплей 2 выбран)
;;;243    	else 
;;;244      {
;;;245        U_MLT_Set_E2_Pin;
000012  f44f7180          MOV      r1,#0x100
000016  4829              LDR      r0,|L4.188|
000018  f7fffffe          BL       PORT_SetBits
                  |L4.28|
;;;246      }
;;;247    
;;;248    	U_MLT_Clr_A0_Pin;
00001c  2101              MOVS     r1,#1
00001e  4828              LDR      r0,|L4.192|
000020  f7fffffe          BL       PORT_ResetBits
;;;249    
;;;250    	U_MLT_Clr_RW_Pin;
000024  f44f6180          MOV      r1,#0x400
000028  4824              LDR      r0,|L4.188|
00002a  f7fffffe          BL       PORT_ResetBits
;;;251    	U_MLT_Delay(5);
00002e  2005              MOVS     r0,#5
000030  f7fffffe          BL       U_MLT_Delay
;;;252    	
;;;253    	U_MLT_Data_Dir_Output_PA;
000034  4823              LDR      r0,|L4.196|
000036  6840              LDR      r0,[r0,#4]
000038  f040003f          ORR      r0,r0,#0x3f
00003c  4921              LDR      r1,|L4.196|
00003e  6048              STR      r0,[r1,#4]
;;;254    	U_MLT_Data_Dir_Output_PF;
000040  4821              LDR      r0,|L4.200|
000042  6840              LDR      r0,[r0,#4]
000044  f040000c          ORR      r0,r0,#0xc
000048  491f              LDR      r1,|L4.200|
00004a  6048              STR      r0,[r1,#4]
;;;255    	
;;;256    	U_MLT_Set_Data_Bits (0x3E);
00004c  203e              MOVS     r0,#0x3e
00004e  f7fffffe          BL       U_MLT_Set_Data_Bits
;;;257    	U_MLT_Delay(5);
000052  2005              MOVS     r0,#5
000054  f7fffffe          BL       U_MLT_Delay
;;;258    	
;;;259    	U_MLT_Set_Stb_Pin;
000058  2102              MOVS     r1,#2
00005a  4819              LDR      r0,|L4.192|
00005c  f7fffffe          BL       PORT_SetBits
;;;260    	U_MLT_Delay(5);
000060  2005              MOVS     r0,#5
000062  f7fffffe          BL       U_MLT_Delay
;;;261    	
;;;262    	U_MLT_Clr_Stb_Pin;
000066  2102              MOVS     r1,#2
000068  4815              LDR      r0,|L4.192|
00006a  f7fffffe          BL       PORT_ResetBits
;;;263    	U_MLT_Delay(5);
00006e  2005              MOVS     r0,#5
000070  f7fffffe          BL       U_MLT_Delay
;;;264    	
;;;265    	U_MLT_Clr_A0_Pin;
000074  2101              MOVS     r1,#1
000076  4812              LDR      r0,|L4.192|
000078  f7fffffe          BL       PORT_ResetBits
;;;266    
;;;267    	U_MLT_Clr_RW_Pin;
00007c  f44f6180          MOV      r1,#0x400
000080  480e              LDR      r0,|L4.188|
000082  f7fffffe          BL       PORT_ResetBits
;;;268    
;;;269    	U_MLT_Data_Dir_Input_PA;
000086  480f              LDR      r0,|L4.196|
000088  6840              LDR      r0,[r0,#4]
00008a  f64f71c0          MOV      r1,#0xffc0
00008e  4008              ANDS     r0,r0,r1
000090  490c              LDR      r1,|L4.196|
000092  6048              STR      r0,[r1,#4]
;;;270    	U_MLT_Data_Dir_Input_PF;
000094  480c              LDR      r0,|L4.200|
000096  6840              LDR      r0,[r0,#4]
000098  f64f71f3          MOV      r1,#0xfff3
00009c  4008              ANDS     r0,r0,r1
00009e  490a              LDR      r1,|L4.200|
0000a0  6048              STR      r0,[r1,#4]
;;;271    	
;;;272    	// Если выбран дисплей 1, то сбросить вывод Е1 (дисплей 1 НЕ выбран)
;;;273    	if (Chip == 1) 
0000a2  2c01              CMP      r4,#1
0000a4  d104              BNE      |L4.176|
;;;274    	{
;;;275        U_MLT_Clr_E1_Pin;
0000a6  2180              MOVS     r1,#0x80
0000a8  4804              LDR      r0,|L4.188|
0000aa  f7fffffe          BL       PORT_ResetBits
0000ae  e004              B        |L4.186|
                  |L4.176|
;;;276      }
;;;277    	// Если выбран дисплей 2, то сбросить вывод Е2 (дисплей 1 НЕ выбран)
;;;278    	else 
;;;279      {
;;;280        U_MLT_Clr_E2_Pin;
0000b0  f44f7180          MOV      r1,#0x100
0000b4  4801              LDR      r0,|L4.188|
0000b6  f7fffffe          BL       PORT_ResetBits
                  |L4.186|
;;;281      }
;;;282    }
0000ba  bd10              POP      {r4,pc}
;;;283    
                          ENDP

                  |L4.188|
                          DCD      0x400b0000
                  |L4.192|
                          DCD      0x400b8000
                  |L4.196|
                          DCD      0x400a8000
                  |L4.200|
                          DCD      0x400e8000

                          AREA ||i.U_MLT_Disp_On||, CODE, READONLY, ALIGN=2

                  U_MLT_Disp_On PROC
;;;180    // Включить дисплей
;;;181    void U_MLT_Disp_On (uint8_t Chip)
000000  b510              PUSH     {r4,lr}
;;;182    {
000002  4604              MOV      r4,r0
;;;183    	// Если выбран дисплей 1, то установить вывод Е1 (дисплей 1 выбран)
;;;184    	if (Chip == 1) 
000004  2c01              CMP      r4,#1
000006  d104              BNE      |L5.18|
;;;185    	{
;;;186        U_MLT_Set_E1_Pin;
000008  2180              MOVS     r1,#0x80
00000a  482c              LDR      r0,|L5.188|
00000c  f7fffffe          BL       PORT_SetBits
000010  e004              B        |L5.28|
                  |L5.18|
;;;187      }
;;;188    	// Если выбран дисплей 2, то установить вывод Е2 (дисплей 2 выбран)
;;;189    	else 
;;;190      {
;;;191        U_MLT_Set_E2_Pin;
000012  f44f7180          MOV      r1,#0x100
000016  4829              LDR      r0,|L5.188|
000018  f7fffffe          BL       PORT_SetBits
                  |L5.28|
;;;192      }
;;;193    
;;;194    	// Сбросить вывод А0
;;;195    	U_MLT_Clr_A0_Pin;
00001c  2101              MOVS     r1,#1
00001e  4828              LDR      r0,|L5.192|
000020  f7fffffe          BL       PORT_ResetBits
;;;196    
;;;197    	// Сбросить вывод RW (передача данных)
;;;198    	U_MLT_Clr_RW_Pin;
000024  f44f6180          MOV      r1,#0x400
000028  4824              LDR      r0,|L5.188|
00002a  f7fffffe          BL       PORT_ResetBits
;;;199    	U_MLT_Delay(5);
00002e  2005              MOVS     r0,#5
000030  f7fffffe          BL       U_MLT_Delay
;;;200    	
;;;201    	U_MLT_Data_Dir_Output_PA;
000034  4823              LDR      r0,|L5.196|
000036  6840              LDR      r0,[r0,#4]
000038  f040003f          ORR      r0,r0,#0x3f
00003c  4921              LDR      r1,|L5.196|
00003e  6048              STR      r0,[r1,#4]
;;;202    	U_MLT_Data_Dir_Output_PF;
000040  4821              LDR      r0,|L5.200|
000042  6840              LDR      r0,[r0,#4]
000044  f040000c          ORR      r0,r0,#0xc
000048  491f              LDR      r1,|L5.200|
00004a  6048              STR      r0,[r1,#4]
;;;203    	
;;;204    	// Выдать данные на шину
;;;205    	U_MLT_Set_Data_Bits (0x3F);
00004c  203f              MOVS     r0,#0x3f
00004e  f7fffffe          BL       U_MLT_Set_Data_Bits
;;;206    	U_MLT_Delay(5);
000052  2005              MOVS     r0,#5
000054  f7fffffe          BL       U_MLT_Delay
;;;207    
;;;208    	U_MLT_Set_Stb_Pin;
000058  2102              MOVS     r1,#2
00005a  4819              LDR      r0,|L5.192|
00005c  f7fffffe          BL       PORT_SetBits
;;;209    	U_MLT_Delay(5);
000060  2005              MOVS     r0,#5
000062  f7fffffe          BL       U_MLT_Delay
;;;210    
;;;211    	U_MLT_Clr_Stb_Pin;
000066  2102              MOVS     r1,#2
000068  4815              LDR      r0,|L5.192|
00006a  f7fffffe          BL       PORT_ResetBits
;;;212    	U_MLT_Delay(5);
00006e  2005              MOVS     r0,#5
000070  f7fffffe          BL       U_MLT_Delay
;;;213    
;;;214      U_MLT_Clr_A0_Pin;
000074  2101              MOVS     r1,#1
000076  4812              LDR      r0,|L5.192|
000078  f7fffffe          BL       PORT_ResetBits
;;;215    
;;;216    	U_MLT_Clr_RW_Pin;
00007c  f44f6180          MOV      r1,#0x400
000080  480e              LDR      r0,|L5.188|
000082  f7fffffe          BL       PORT_ResetBits
;;;217    
;;;218    
;;;219    	U_MLT_Data_Dir_Input_PA;
000086  480f              LDR      r0,|L5.196|
000088  6840              LDR      r0,[r0,#4]
00008a  f64f71c0          MOV      r1,#0xffc0
00008e  4008              ANDS     r0,r0,r1
000090  490c              LDR      r1,|L5.196|
000092  6048              STR      r0,[r1,#4]
;;;220    	U_MLT_Data_Dir_Input_PF;
000094  480c              LDR      r0,|L5.200|
000096  6840              LDR      r0,[r0,#4]
000098  f64f71f3          MOV      r1,#0xfff3
00009c  4008              ANDS     r0,r0,r1
00009e  490a              LDR      r1,|L5.200|
0000a0  6048              STR      r0,[r1,#4]
;;;221    
;;;222    	// Если выбран дисплей 1, то сбросить вывод Е1 (дисплей 1 НЕ выбран)
;;;223    	if (Chip == 1) 
0000a2  2c01              CMP      r4,#1
0000a4  d104              BNE      |L5.176|
;;;224    	{
;;;225        U_MLT_Clr_E1_Pin;
0000a6  2180              MOVS     r1,#0x80
0000a8  4804              LDR      r0,|L5.188|
0000aa  f7fffffe          BL       PORT_ResetBits
0000ae  e004              B        |L5.186|
                  |L5.176|
;;;226      }
;;;227    	// Если выбран дисплей 2, то сбросить вывод Е2 (дисплей 1 НЕ выбран)
;;;228    	else 
;;;229      {
;;;230        U_MLT_Clr_E2_Pin;
0000b0  f44f7180          MOV      r1,#0x100
0000b4  4801              LDR      r0,|L5.188|
0000b6  f7fffffe          BL       PORT_ResetBits
                  |L5.186|
;;;231      }
;;;232    }
0000ba  bd10              POP      {r4,pc}
;;;233    
                          ENDP

                  |L5.188|
                          DCD      0x400b0000
                  |L5.192|
                          DCD      0x400b8000
                  |L5.196|
                          DCD      0x400a8000
                  |L5.200|
                          DCD      0x400e8000

                          AREA ||i.U_MLT_Init||, CODE, READONLY, ALIGN=2

                  U_MLT_Init PROC
;;;22     // Инициализация ЖКИ
;;;23     void U_MLT_Init (void)
000000  b508              PUSH     {r3,lr}
;;;24     {
;;;25     	// Инициализировать выводы МК для работы с ЖКИ
;;;26     	U_MLT_Pin_Cfg ();
000002  f7fffffe          BL       U_MLT_Pin_Cfg
;;;27     	
;;;28     	// Инициализировать драйвер ЖКИ 
;;;29     	U_MLT_LCD_Init();
000006  f7fffffe          BL       U_MLT_LCD_Init
;;;30     	
;;;31     	// Дождаться завершения операции с дисплеем 1
;;;32     	while (U_MLT_Read_Status(1) & 0x80);
00000a  bf00              NOP      
                  |L6.12|
00000c  2001              MOVS     r0,#1
00000e  f7fffffe          BL       U_MLT_Read_Status
000012  f0000080          AND      r0,r0,#0x80
000016  2800              CMP      r0,#0
000018  d1f8              BNE      |L6.12|
;;;33     	// Включить дисплей 1  
;;;34     	U_MLT_Disp_On (1);
00001a  2001              MOVS     r0,#1
00001c  f7fffffe          BL       U_MLT_Disp_On
;;;35     	
;;;36     	// Дожаться завершения операции с дисплеем 2
;;;37     	while (U_MLT_Read_Status(2) & 0x80);
000020  bf00              NOP      
                  |L6.34|
000022  2002              MOVS     r0,#2
000024  f7fffffe          BL       U_MLT_Read_Status
000028  f0000080          AND      r0,r0,#0x80
00002c  2800              CMP      r0,#0
00002e  d1f8              BNE      |L6.34|
;;;38     	// Включить дисплей 2 
;;;39     	U_MLT_Disp_On (2);
000030  2002              MOVS     r0,#2
000032  f7fffffe          BL       U_MLT_Disp_On
;;;40     
;;;41     	// Очистить дисплей 1 
;;;42     	U_MLT_Clear_Chip (1);
000036  2001              MOVS     r0,#1
000038  f7fffffe          BL       U_MLT_Clear_Chip
;;;43     	// Очистить дисплей 2
;;;44     	U_MLT_Clear_Chip (2);	
00003c  2002              MOVS     r0,#2
00003e  f7fffffe          BL       U_MLT_Clear_Chip
;;;45     	
;;;46     	// Вывести начальное сообщение и рисунок
;;;47       U_MLT_Put_String (init_string, 1);	
000042  2101              MOVS     r1,#1
000044  4806              LDR      r0,|L6.96|
000046  6800              LDR      r0,[r0,#0]  ; init_string
000048  f7fffffe          BL       U_MLT_Put_String
;;;48     	U_MLT_Put_Image (init_image, 0, 0, 1, 1);
00004c  2001              MOVS     r0,#1
00004e  4603              MOV      r3,r0
000050  2200              MOVS     r2,#0
000052  4611              MOV      r1,r2
000054  9000              STR      r0,[sp,#0]
000056  4803              LDR      r0,|L6.100|
000058  f7fffffe          BL       U_MLT_Put_Image
;;;49     
;;;50     }
00005c  bd08              POP      {r3,pc}
;;;51     
                          ENDP

00005e  0000              DCW      0x0000
                  |L6.96|
                          DCD      init_string
                  |L6.100|
                          DCD      init_image

                          AREA ||i.U_MLT_LCD_Init||, CODE, READONLY, ALIGN=2

                  U_MLT_LCD_Init PROC
;;;90     // Инициализация драйвера ЖКИ
;;;91     void U_MLT_LCD_Init(void)
000000  b510              PUSH     {r4,lr}
;;;92     {
;;;93     	// Сформировать сигнал RESET
;;;94     	U_MLT_Clr_Res_Pin;
000002  f44f7100          MOV      r1,#0x200
000006  480e              LDR      r0,|L7.64|
000008  f7fffffe          BL       PORT_ResetBits
;;;95     	U_MLT_Delay(200);
00000c  20c8              MOVS     r0,#0xc8
00000e  f7fffffe          BL       U_MLT_Delay
;;;96     	
;;;97     	U_MLT_Set_Res_Pin;
000012  f44f7100          MOV      r1,#0x200
000016  480a              LDR      r0,|L7.64|
000018  f7fffffe          BL       PORT_SetBits
;;;98     	U_MLT_Delay(5);
00001c  2005              MOVS     r0,#5
00001e  f7fffffe          BL       U_MLT_Delay
;;;99     
;;;100    	// Дождаться окончания инициализации
;;;101    	while ((U_MLT_Read_Status (1) & 0x90) && (U_MLT_Read_Status (2) & 0x90));	
000022  bf00              NOP      
                  |L7.36|
000024  2001              MOVS     r0,#1
000026  f7fffffe          BL       U_MLT_Read_Status
00002a  f0000090          AND      r0,r0,#0x90
00002e  b130              CBZ      r0,|L7.62|
000030  2002              MOVS     r0,#2
000032  f7fffffe          BL       U_MLT_Read_Status
000036  f0000090          AND      r0,r0,#0x90
00003a  2800              CMP      r0,#0
00003c  d1f2              BNE      |L7.36|
                  |L7.62|
;;;102    }
00003e  bd10              POP      {r4,pc}
;;;103    
                          ENDP

                  |L7.64|
                          DCD      0x400b0000

                          AREA ||i.U_MLT_Pin_Cfg||, CODE, READONLY, ALIGN=2

                  U_MLT_Pin_Cfg PROC
;;;52     // Инициализация выводов МК для работы с ЖКИ
;;;53     void U_MLT_Pin_Cfg (void)
000000  b50e              PUSH     {r1-r3,lr}
;;;54     {
;;;55     	// Структура данных для инициализации портов
;;;56     	PORT_InitTypeDef PortInit;
;;;57     	
;;;58       // Разрешить тактирование требуемых периферийных устройств
;;;59       RST_CLK_PCLKcmd (RST_CLK_PCLK_PORTA | RST_CLK_PCLK_PORTB | RST_CLK_PCLK_PORTC | RST_CLK_PCLK_PORTF, ENABLE);	
000002  2101              MOVS     r1,#1
000004  481c              LDR      r0,|L8.120|
000006  f7fffffe          BL       RST_CLK_PCLKcmd
;;;60     	
;;;61     	// Заполнить структура общими для всех линий данными
;;;62     	PortInit.PORT_PULL_UP = PORT_PULL_UP_OFF;
00000a  2000              MOVS     r0,#0
00000c  f88d0003          STRB     r0,[sp,#3]
;;;63     	PortInit.PORT_PULL_DOWN = PORT_PULL_DOWN_OFF;
000010  f88d0004          STRB     r0,[sp,#4]
;;;64     	PortInit.PORT_PD_SHM = PORT_PD_SHM_OFF;
000014  f88d0005          STRB     r0,[sp,#5]
;;;65     	PortInit.PORT_PD = PORT_PD_DRIVER;
000018  f88d0006          STRB     r0,[sp,#6]
;;;66     	PortInit.PORT_GFEN = PORT_GFEN_OFF;
00001c  f88d0007          STRB     r0,[sp,#7]
;;;67     
;;;68     	// Линии 0..5 порта PORTA использовать как двунаправленную шину данных 
;;;69     	PortInit.PORT_Pin   = (PORT_Pin_0 | PORT_Pin_1 | PORT_Pin_2 | PORT_Pin_3 | PORT_Pin_4 | PORT_Pin_5);
000020  203f              MOVS     r0,#0x3f
000022  f8ad0000          STRH     r0,[sp,#0]
;;;70     	PortInit.PORT_OE    = PORT_OE_IN;
000026  2000              MOVS     r0,#0
000028  f88d0002          STRB     r0,[sp,#2]
;;;71     	PortInit.PORT_FUNC  = PORT_FUNC_PORT;
00002c  f88d0008          STRB     r0,[sp,#8]
;;;72     	PortInit.PORT_MODE  = PORT_MODE_DIGITAL;
000030  2001              MOVS     r0,#1
000032  f88d000a          STRB     r0,[sp,#0xa]
;;;73     	PortInit.PORT_SPEED = PORT_SPEED_MAXFAST; // !!! Важно использовать максимальную скорость (короткие фронты), иначе (при длинных фронтах) не работает 
000036  2003              MOVS     r0,#3
000038  f88d0009          STRB     r0,[sp,#9]
;;;74      	PORT_Init(MDR_PORTA, &PortInit);
00003c  4669              MOV      r1,sp
00003e  480f              LDR      r0,|L8.124|
000040  f7fffffe          BL       PORT_Init
;;;75     	
;;;76     	// Линии 2,3 порта PORTF также использовать в составе двунаправленной шину данных 
;;;77     	PortInit.PORT_Pin   = (PORT_Pin_2 | PORT_Pin_3);
000044  200c              MOVS     r0,#0xc
000046  f8ad0000          STRH     r0,[sp,#0]
;;;78     	PORT_Init(MDR_PORTF, &PortInit);
00004a  4669              MOV      r1,sp
00004c  480c              LDR      r0,|L8.128|
00004e  f7fffffe          BL       PORT_Init
;;;79     
;;;80     	// Линии 7..10 порта PORTB сделать цифровыми выходами
;;;81     	PortInit.PORT_Pin   = PORT_Pin_7 | PORT_Pin_8 | PORT_Pin_9 | PORT_Pin_10;
000052  f44f60f0          MOV      r0,#0x780
000056  f8ad0000          STRH     r0,[sp,#0]
;;;82     	PortInit.PORT_OE    = PORT_OE_OUT;
00005a  2001              MOVS     r0,#1
00005c  f88d0002          STRB     r0,[sp,#2]
;;;83     	PORT_Init(MDR_PORTB, &PortInit);
000060  4669              MOV      r1,sp
000062  4808              LDR      r0,|L8.132|
000064  f7fffffe          BL       PORT_Init
;;;84     
;;;85     	// Линии 0,1 порта PORTC также сделать цифровыми выходами
;;;86     	PortInit.PORT_Pin   = (PORT_Pin_0 | PORT_Pin_1);
000068  2003              MOVS     r0,#3
00006a  f8ad0000          STRH     r0,[sp,#0]
;;;87     	PORT_Init(MDR_PORTC, &PortInit);
00006e  4669              MOV      r1,sp
000070  4805              LDR      r0,|L8.136|
000072  f7fffffe          BL       PORT_Init
;;;88     }
000076  bd0e              POP      {r1-r3,pc}
;;;89     
                          ENDP

                  |L8.120|
                          DCD      0x20e00000
                  |L8.124|
                          DCD      0x400a8000
                  |L8.128|
                          DCD      0x400e8000
                  |L8.132|
                          DCD      0x400b0000
                  |L8.136|
                          DCD      0x400b8000

                          AREA ||i.U_MLT_Put_Char||, CODE, READONLY, ALIGN=2

                  U_MLT_Put_Char PROC
;;;514    // Вывести символ
;;;515    void U_MLT_Put_Char (uint8_t symbol, int32_t X, int32_t Y)
000000  e92d5ff0          PUSH     {r4-r12,lr}
;;;516    {
000004  4605              MOV      r5,r0
000006  460c              MOV      r4,r1
000008  4691              MOV      r9,r2
;;;517      int32_t chp, page, adr;
;;;518      int32_t i;
;;;519    	int32_t symbol_image_index;  // Индекс элемента в массиве шрифта, с которого начинается изображение данного символа.
;;;520    
;;;521    	chp  = (int32_t)(X / 8) + 1;
00000a  4620              MOV      r0,r4
00000c  17e1              ASRS     r1,r4,#31
00000e  eb047151          ADD      r1,r4,r1,LSR #29
000012  10c9              ASRS     r1,r1,#3
000014  1c4e              ADDS     r6,r1,#1
;;;522    	page = Y;
000016  46ca              MOV      r10,r9
;;;523    	adr  = (int32_t)((X % 8) * 8);	
000018  4620              MOV      r0,r4
00001a  17e1              ASRS     r1,r4,#31
00001c  eb047151          ADD      r1,r4,r1,LSR #29
000020  10c9              ASRS     r1,r1,#3
000022  eba401c1          SUB      r1,r4,r1,LSL #3
000026  ea4f0bc1          LSL      r11,r1,#3
;;;524    
;;;525    	U_MLT_Set_Page (chp, page);
00002a  f00a01ff          AND      r1,r10,#0xff
00002e  b2f0              UXTB     r0,r6
000030  f7fffffe          BL       U_MLT_Set_Page
;;;526    	U_MLT_Set_Address (chp, adr);
000034  f00b01ff          AND      r1,r11,#0xff
000038  b2f0              UXTB     r0,r6
00003a  f7fffffe          BL       U_MLT_Set_Address
;;;527    	
;;;528    	// Проверить, чтобы символ не выходил за диапазон, определенный в шрифте.
;;;529    	if (symbol >= MLT_FONT_MIN_CODE && symbol <= MLT_FONT_MAX_CODE)
00003e  2d20              CMP      r5,#0x20
000040  db06              BLT      |L9.80|
000042  2dff              CMP      r5,#0xff
000044  dc04              BGT      |L9.80|
;;;530    	{
;;;531    	  symbol_image_index = (((uint32_t) symbol) - MLT_FONT_MIN_CODE) * 8;
000046  f1a50020          SUB      r0,r5,#0x20
00004a  ea4f08c0          LSL      r8,r0,#3
00004e  e001              B        |L9.84|
                  |L9.80|
;;;532    	}
;;;533    	// Символ вне диапазона
;;;534    	else
;;;535    	{
;;;536    	  symbol_image_index = 0;  // Выводим самый первый символ, как правило,- пробел.
000050  f04f0800          MOV      r8,#0
                  |L9.84|
;;;537      }
;;;538    	
;;;539    	for (i = symbol_image_index; i < symbol_image_index + 8; i++)
000054  4647              MOV      r7,r8
000056  e00d              B        |L9.116|
                  |L9.88|
;;;540    	{	
;;;541    		while (U_MLT_Read_Status (chp) & 0x80);
000058  bf00              NOP      
                  |L9.90|
00005a  b2f0              UXTB     r0,r6
00005c  f7fffffe          BL       U_MLT_Read_Status
000060  f0000080          AND      r0,r0,#0x80
000064  2800              CMP      r0,#0
000066  d1f8              BNE      |L9.90|
;;;542    		
;;;543    		U_MLT_Write_Data (chp, MLT_Font[i]);
000068  4a05              LDR      r2,|L9.128|
00006a  5dd1              LDRB     r1,[r2,r7]
00006c  b2f0              UXTB     r0,r6
00006e  f7fffffe          BL       U_MLT_Write_Data
000072  1c7f              ADDS     r7,r7,#1              ;539
                  |L9.116|
000074  f1080008          ADD      r0,r8,#8              ;539
000078  4287              CMP      r7,r0                 ;539
00007a  dbed              BLT      |L9.88|
;;;544    	}
;;;545    
;;;546    }
00007c  e8bd9ff0          POP      {r4-r12,pc}
;;;547    
                          ENDP

                  |L9.128|
                          DCD      MLT_Font

                          AREA ||i.U_MLT_Put_Image||, CODE, READONLY, ALIGN=1

                  U_MLT_Put_Image PROC
;;;619    // Вывести изображение
;;;620    void U_MLT_Put_Image (const uint8_t* image, int32_t top, int32_t left, int32_t bottom, int32_t right)
000000  e92d4fff          PUSH     {r0-r11,lr}
;;;621    {
000004  b083              SUB      sp,sp,#0xc
000006  4680              MOV      r8,r0
000008  4689              MOV      r9,r1
00000a  4692              MOV      r10,r2
;;;622    	int32_t i, j, y;
;;;623    	int32_t chp, page, adr;
;;;624    	int32_t cnt = 0;	
00000c  f04f0b00          MOV      r11,#0
;;;625    
;;;626    	for	(i = top; i <= bottom; i++)
000010  464e              MOV      r6,r9
000012  e035              B        |L10.128|
                  |L10.20|
;;;627    		for (j = left; j <= right; j++)
000014  4654              MOV      r4,r10
000016  e02f              B        |L10.120|
                  |L10.24|
;;;628    		{
;;;629    			chp  = (int32_t)(j / 8) + 1;
000018  4620              MOV      r0,r4
00001a  17e1              ASRS     r1,r4,#31
00001c  eb047151          ADD      r1,r4,r1,LSR #29
000020  10c9              ASRS     r1,r1,#3
000022  1c4d              ADDS     r5,r1,#1
;;;630    			page = i;
000024  9602              STR      r6,[sp,#8]
;;;631    			adr  = (int32_t)((j % 8) * 8);
000026  17e1              ASRS     r1,r4,#31
000028  eb047151          ADD      r1,r4,r1,LSR #29
00002c  10c9              ASRS     r1,r1,#3
00002e  eba401c1          SUB      r1,r4,r1,LSL #3
000032  00ca              LSLS     r2,r1,#3
000034  9201              STR      r2,[sp,#4]
;;;632    
;;;633    			U_MLT_Set_Page (chp, page);
000036  9e02              LDR      r6,[sp,#8]
000038  b2f1              UXTB     r1,r6
00003a  b2e8              UXTB     r0,r5
00003c  f7fffffe          BL       U_MLT_Set_Page
;;;634    			U_MLT_Set_Address (chp, adr);
000040  9a01              LDR      r2,[sp,#4]
000042  b2d1              UXTB     r1,r2
000044  b2e8              UXTB     r0,r5
000046  f7fffffe          BL       U_MLT_Set_Address
;;;635    			
;;;636    			for (y = 0; y < 8; y++)
00004a  2700              MOVS     r7,#0
00004c  e00f              B        |L10.110|
                  |L10.78|
;;;637    			{
;;;638      		  while (U_MLT_Read_Status (chp) & 0x80);
00004e  bf00              NOP      
                  |L10.80|
000050  b2e8              UXTB     r0,r5
000052  f7fffffe          BL       U_MLT_Read_Status
000056  f0000080          AND      r0,r0,#0x80
00005a  2800              CMP      r0,#0
00005c  d1f8              BNE      |L10.80|
;;;639    
;;;640    				U_MLT_Write_Data (chp, image[cnt + y]);
00005e  eb0b0207          ADD      r2,r11,r7
000062  f8181002          LDRB     r1,[r8,r2]
000066  b2e8              UXTB     r0,r5
000068  f7fffffe          BL       U_MLT_Write_Data
00006c  1c7f              ADDS     r7,r7,#1              ;636
                  |L10.110|
00006e  2f08              CMP      r7,#8                 ;636
000070  dbed              BLT      |L10.78|
;;;641    			}
;;;642    			cnt += 8;
000072  f10b0b08          ADD      r11,r11,#8
000076  1c64              ADDS     r4,r4,#1              ;627
                  |L10.120|
000078  9810              LDR      r0,[sp,#0x40]         ;627
00007a  4284              CMP      r4,r0                 ;627
00007c  ddcc              BLE      |L10.24|
00007e  1c76              ADDS     r6,r6,#1              ;626
                  |L10.128|
000080  9806              LDR      r0,[sp,#0x18]         ;626
000082  4286              CMP      r6,r0                 ;626
000084  ddc6              BLE      |L10.20|
;;;643    		}	
;;;644    	
;;;645    }
000086  b007              ADD      sp,sp,#0x1c
000088  e8bd8ff0          POP      {r4-r11,pc}
                          ENDP


                          AREA ||i.U_MLT_Put_String||, CODE, READONLY, ALIGN=1

                  U_MLT_Put_String PROC
;;;548    // Вывести строку
;;;549    void U_MLT_Put_String (const char* str, int32_t Y)
000000  b570              PUSH     {r4-r6,lr}
;;;550    {
000002  4605              MOV      r5,r0
000004  460e              MOV      r6,r1
;;;551      int32_t i;
;;;552    
;;;553    	for (i = 0; i < U_MLT_SCREEN_WIDTH_SYMBOLS; i++)
000006  2400              MOVS     r4,#0
000008  e008              B        |L11.28|
                  |L11.10|
;;;554    	{
;;;555    	  // Достигнут конец строки
;;;556    		if (!str[i])
00000a  5d28              LDRB     r0,[r5,r4]
00000c  b900              CBNZ     r0,|L11.16|
;;;557          break;
00000e  e007              B        |L11.32|
                  |L11.16|
;;;558    
;;;559        U_MLT_Put_Char (str[i], i, Y); // Вывести символ
000010  5d28              LDRB     r0,[r5,r4]
000012  4632              MOV      r2,r6
000014  4621              MOV      r1,r4
000016  f7fffffe          BL       U_MLT_Put_Char
00001a  1c64              ADDS     r4,r4,#1              ;553
                  |L11.28|
00001c  2c10              CMP      r4,#0x10              ;553
00001e  dbf4              BLT      |L11.10|
                  |L11.32|
000020  bf00              NOP                            ;557
;;;560      }
;;;561    	
;;;562    	for (; i < U_MLT_SCREEN_WIDTH_SYMBOLS; i++)
000022  e005              B        |L11.48|
                  |L11.36|
;;;563    	{
;;;564     	  U_MLT_Put_Char (32, i, Y);  // Вывести пробел
000024  4632              MOV      r2,r6
000026  4621              MOV      r1,r4
000028  2020              MOVS     r0,#0x20
00002a  f7fffffe          BL       U_MLT_Put_Char
00002e  1c64              ADDS     r4,r4,#1              ;562
                  |L11.48|
000030  2c10              CMP      r4,#0x10              ;562
000032  dbf7              BLT      |L11.36|
;;;565      }
;;;566    }
000034  bd70              POP      {r4-r6,pc}
;;;567    
                          ENDP


                          AREA ||i.U_MLT_Read_Data||, CODE, READONLY, ALIGN=2

                  U_MLT_Read_Data PROC
;;;434    // Прочитать данные с ЖКИ
;;;435    uint8_t U_MLT_Read_Data (uint8_t Chip)
000000  b570              PUSH     {r4-r6,lr}
;;;436    {
000002  4604              MOV      r4,r0
;;;437      uint8_t data = 0;
000004  2500              MOVS     r5,#0
;;;438    
;;;439    	// Если выбран дисплей 1, то установить вывод Е1 (дисплей 1 выбран)
;;;440    	if (Chip == 1) 
000006  2c01              CMP      r4,#1
000008  d104              BNE      |L12.20|
;;;441    	{
;;;442        U_MLT_Set_E1_Pin;
00000a  2180              MOVS     r1,#0x80
00000c  482d              LDR      r0,|L12.196|
00000e  f7fffffe          BL       PORT_SetBits
000012  e004              B        |L12.30|
                  |L12.20|
;;;443      }
;;;444    	// Если выбран дисплей 2, то установить вывод Е2 (дисплей 2 выбран)
;;;445    	else 
;;;446      {
;;;447        U_MLT_Set_E2_Pin;
000014  f44f7180          MOV      r1,#0x100
000018  482a              LDR      r0,|L12.196|
00001a  f7fffffe          BL       PORT_SetBits
                  |L12.30|
;;;448      }
;;;449    
;;;450    	U_MLT_Set_A0_Pin;
00001e  2101              MOVS     r1,#1
000020  4829              LDR      r0,|L12.200|
000022  f7fffffe          BL       PORT_SetBits
;;;451    
;;;452    	U_MLT_Set_RW_Pin;
000026  f44f6180          MOV      r1,#0x400
00002a  4826              LDR      r0,|L12.196|
00002c  f7fffffe          BL       PORT_SetBits
;;;453    	U_MLT_Delay(5);
000030  2005              MOVS     r0,#5
000032  f7fffffe          BL       U_MLT_Delay
;;;454    	
;;;455    	U_MLT_Data_Dir_Input_PA;
000036  4825              LDR      r0,|L12.204|
000038  6840              LDR      r0,[r0,#4]
00003a  f64f71c0          MOV      r1,#0xffc0
00003e  4008              ANDS     r0,r0,r1
000040  4922              LDR      r1,|L12.204|
000042  6048              STR      r0,[r1,#4]
;;;456    	U_MLT_Data_Dir_Input_PF;
000044  4822              LDR      r0,|L12.208|
000046  6840              LDR      r0,[r0,#4]
000048  f64f71f3          MOV      r1,#0xfff3
00004c  4008              ANDS     r0,r0,r1
00004e  4920              LDR      r1,|L12.208|
000050  6048              STR      r0,[r1,#4]
;;;457    	
;;;458    	U_MLT_Set_Data_Bits (data);
000052  4628              MOV      r0,r5
000054  f7fffffe          BL       U_MLT_Set_Data_Bits
;;;459    	U_MLT_Delay(5);
000058  2005              MOVS     r0,#5
00005a  f7fffffe          BL       U_MLT_Delay
;;;460    	
;;;461    	U_MLT_Set_Stb_Pin;
00005e  2102              MOVS     r1,#2
000060  4819              LDR      r0,|L12.200|
000062  f7fffffe          BL       PORT_SetBits
;;;462    	U_MLT_Delay(5);
000066  2005              MOVS     r0,#5
000068  f7fffffe          BL       U_MLT_Delay
;;;463    	
;;;464    	data = U_MLT_Output_Data;
00006c  4817              LDR      r0,|L12.204|
00006e  6800              LDR      r0,[r0,#0]
000070  f000003f          AND      r0,r0,#0x3f
000074  4916              LDR      r1,|L12.208|
000076  6809              LDR      r1,[r1,#0]
000078  22c0              MOVS     r2,#0xc0
00007a  ea021101          AND      r1,r2,r1,LSL #4
00007e  ea400501          ORR      r5,r0,r1
;;;465    	U_MLT_Delay(5);
000082  2005              MOVS     r0,#5
000084  f7fffffe          BL       U_MLT_Delay
;;;466    	
;;;467    	U_MLT_Clr_Stb_Pin;
000088  2102              MOVS     r1,#2
00008a  480f              LDR      r0,|L12.200|
00008c  f7fffffe          BL       PORT_ResetBits
;;;468    	U_MLT_Delay(5);
000090  2005              MOVS     r0,#5
000092  f7fffffe          BL       U_MLT_Delay
;;;469    	
;;;470    	U_MLT_Clr_A0_Pin;
000096  2101              MOVS     r1,#1
000098  480b              LDR      r0,|L12.200|
00009a  f7fffffe          BL       PORT_ResetBits
;;;471    
;;;472    	U_MLT_Clr_RW_Pin;
00009e  f44f6180          MOV      r1,#0x400
0000a2  4808              LDR      r0,|L12.196|
0000a4  f7fffffe          BL       PORT_ResetBits
;;;473    
;;;474    	// Если выбран дисплей 1, то сбросить вывод Е1 (дисплей 1 НЕ выбран)
;;;475    	if (Chip == 1) 
0000a8  2c01              CMP      r4,#1
0000aa  d104              BNE      |L12.182|
;;;476    	{
;;;477        U_MLT_Clr_E1_Pin;
0000ac  2180              MOVS     r1,#0x80
0000ae  4805              LDR      r0,|L12.196|
0000b0  f7fffffe          BL       PORT_ResetBits
0000b4  e004              B        |L12.192|
                  |L12.182|
;;;478      }
;;;479    	// Если выбран дисплей 2, то сбросить вывод Е2 (дисплей 1 НЕ выбран)
;;;480    	else 
;;;481      {
;;;482        U_MLT_Clr_E2_Pin;
0000b6  f44f7180          MOV      r1,#0x100
0000ba  4802              LDR      r0,|L12.196|
0000bc  f7fffffe          BL       PORT_ResetBits
                  |L12.192|
;;;483      }
;;;484    
;;;485    	return (data);
0000c0  4628              MOV      r0,r5
;;;486    }
0000c2  bd70              POP      {r4-r6,pc}
;;;487    
                          ENDP

                  |L12.196|
                          DCD      0x400b0000
                  |L12.200|
                          DCD      0x400b8000
                  |L12.204|
                          DCD      0x400a8000
                  |L12.208|
                          DCD      0x400e8000

                          AREA ||i.U_MLT_Read_Status||, CODE, READONLY, ALIGN=2

                  U_MLT_Read_Status PROC
;;;121    // Получить статус операции
;;;122    uint8_t U_MLT_Read_Status (uint8_t Chip)
000000  b570              PUSH     {r4-r6,lr}
;;;123    {
000002  4604              MOV      r4,r0
;;;124      uint8_t data;
;;;125    
;;;126    	// Настроить шину данных на прием данных
;;;127    	U_MLT_Data_Dir_Input_PA;
000004  482c              LDR      r0,|L13.184|
000006  6840              LDR      r0,[r0,#4]
000008  f64f71c0          MOV      r1,#0xffc0
00000c  4008              ANDS     r0,r0,r1
00000e  492a              LDR      r1,|L13.184|
000010  6048              STR      r0,[r1,#4]
;;;128    	U_MLT_Data_Dir_Input_PF;
000012  482a              LDR      r0,|L13.188|
000014  6840              LDR      r0,[r0,#4]
000016  f64f71f3          MOV      r1,#0xfff3
00001a  4008              ANDS     r0,r0,r1
00001c  4927              LDR      r1,|L13.188|
00001e  6048              STR      r0,[r1,#4]
;;;129    	
;;;130    	// Если выбран дисплей 1, то установить вывод Е1 (дисплей 1 выбран)
;;;131    	if (Chip == 1) 
000020  2c01              CMP      r4,#1
000022  d104              BNE      |L13.46|
;;;132    	{
;;;133        U_MLT_Set_E1_Pin;
000024  2180              MOVS     r1,#0x80
000026  4826              LDR      r0,|L13.192|
000028  f7fffffe          BL       PORT_SetBits
00002c  e004              B        |L13.56|
                  |L13.46|
;;;134      }
;;;135    	// Если выбран дисплей 2, то установить вывод Е2 (дисплей 2 выбран)
;;;136    	else 
;;;137      {
;;;138        U_MLT_Set_E2_Pin;
00002e  f44f7180          MOV      r1,#0x100
000032  4823              LDR      r0,|L13.192|
000034  f7fffffe          BL       PORT_SetBits
                  |L13.56|
;;;139      }
;;;140    
;;;141    	// Сбросить вывод А0
;;;142    	U_MLT_Clr_A0_Pin;
000038  2101              MOVS     r1,#1
00003a  4822              LDR      r0,|L13.196|
00003c  f7fffffe          BL       PORT_ResetBits
;;;143    
;;;144    	// Установить вывод RW (прием данных)
;;;145      U_MLT_Set_RW_Pin;
000040  f44f6180          MOV      r1,#0x400
000044  481e              LDR      r0,|L13.192|
000046  f7fffffe          BL       PORT_SetBits
;;;146    	U_MLT_Delay(5);
00004a  2005              MOVS     r0,#5
00004c  f7fffffe          BL       U_MLT_Delay
;;;147    	
;;;148    	// Установить вывод E
;;;149    	U_MLT_Set_Stb_Pin;
000050  2102              MOVS     r1,#2
000052  481c              LDR      r0,|L13.196|
000054  f7fffffe          BL       PORT_SetBits
;;;150    	U_MLT_Delay(5);
000058  2005              MOVS     r0,#5
00005a  f7fffffe          BL       U_MLT_Delay
;;;151    	
;;;152    	// Прочитать данные
;;;153    	data = U_MLT_Output_Data;
00005e  4816              LDR      r0,|L13.184|
000060  6800              LDR      r0,[r0,#0]
000062  f000003f          AND      r0,r0,#0x3f
000066  4915              LDR      r1,|L13.188|
000068  6809              LDR      r1,[r1,#0]
00006a  22c0              MOVS     r2,#0xc0
00006c  ea021101          AND      r1,r2,r1,LSL #4
000070  ea400501          ORR      r5,r0,r1
;;;154    	U_MLT_Delay(5);
000074  2005              MOVS     r0,#5
000076  f7fffffe          BL       U_MLT_Delay
;;;155    	
;;;156    	// Сбросить вывод E
;;;157    	U_MLT_Clr_Stb_Pin;
00007a  2102              MOVS     r1,#2
00007c  4811              LDR      r0,|L13.196|
00007e  f7fffffe          BL       PORT_ResetBits
;;;158    	U_MLT_Delay(5);
000082  2005              MOVS     r0,#5
000084  f7fffffe          BL       U_MLT_Delay
;;;159    	
;;;160    	// Сбросить вывод A0
;;;161    	U_MLT_Clr_A0_Pin;
000088  2101              MOVS     r1,#1
00008a  480e              LDR      r0,|L13.196|
00008c  f7fffffe          BL       PORT_ResetBits
;;;162    
;;;163    	// Сбросить вывод RW
;;;164    	U_MLT_Clr_RW_Pin;
000090  f44f6180          MOV      r1,#0x400
000094  480a              LDR      r0,|L13.192|
000096  f7fffffe          BL       PORT_ResetBits
;;;165    
;;;166    	// Если выбран дисплей 1, то сбросить вывод Е1 (дисплей 1 НЕ выбран)
;;;167    	if (Chip == 1) 
00009a  2c01              CMP      r4,#1
00009c  d104              BNE      |L13.168|
;;;168    	{
;;;169        U_MLT_Clr_E1_Pin;
00009e  2180              MOVS     r1,#0x80
0000a0  4807              LDR      r0,|L13.192|
0000a2  f7fffffe          BL       PORT_ResetBits
0000a6  e004              B        |L13.178|
                  |L13.168|
;;;170      }
;;;171    	// Если выбран дисплей 2, то сбросить вывод Е2 (дисплей 1 НЕ выбран)
;;;172    	else 
;;;173      {
;;;174        U_MLT_Clr_E2_Pin;
0000a8  f44f7180          MOV      r1,#0x100
0000ac  4804              LDR      r0,|L13.192|
0000ae  f7fffffe          BL       PORT_ResetBits
                  |L13.178|
;;;175      }
;;;176    
;;;177    	return data;
0000b2  4628              MOV      r0,r5
;;;178    }
0000b4  bd70              POP      {r4-r6,pc}
;;;179    
                          ENDP

0000b6  0000              DCW      0x0000
                  |L13.184|
                          DCD      0x400a8000
                  |L13.188|
                          DCD      0x400e8000
                  |L13.192|
                          DCD      0x400b0000
                  |L13.196|
                          DCD      0x400b8000

                          AREA ||i.U_MLT_Scroll_String||, CODE, READONLY, ALIGN=1

                  U_MLT_Scroll_String PROC
;;;568    // Прокрутить строку на cnt шагов и вывести ее
;;;569    void U_MLT_Scroll_String (const char* str, int32_t Y, int32_t cnt)
000000  e92d47f0          PUSH     {r4-r10,lr}
;;;570    {
000004  b086              SUB      sp,sp,#0x18
000006  4680              MOV      r8,r0
000008  4689              MOV      r9,r1
00000a  4617              MOV      r7,r2
;;;571      int32_t i, j, L;
;;;572    	char c;
;;;573    	char s[U_MLT_SCREEN_WIDTH_SYMBOLS + 1]; // Строка размером с ЖКИ, которую получим в результате прокрутки.
;;;574      
;;;575    	L = strlen(str); // Длина исходной строки
00000c  4640              MOV      r0,r8
00000e  f7fffffe          BL       strlen
000012  4606              MOV      r6,r0
;;;576    	s[U_MLT_SCREEN_WIDTH_SYMBOLS] = 0;      // Получаемую строку надо закрыть финишным нулем
000014  2000              MOVS     r0,#0
000016  f88d0014          STRB     r0,[sp,#0x14]
;;;577    	
;;;578    	// Если исходная строка пустая 
;;;579    	if (!L)
00001a  b916              CBNZ     r6,|L14.34|
                  |L14.28|
;;;580    		return; 
;;;581    
;;;582      // Если пытаемся несколько раз обойти вокруг Земли :-)	
;;;583    	//cnt %= U_MLT_SCREEN_WIDTH_SYMBOLS;
;;;584      cnt %=L;
;;;585    	// Если исходная строка короче экрана
;;;586    	if (L < U_MLT_SCREEN_WIDTH_SYMBOLS)
;;;587    		for (i = 0; i < U_MLT_SCREEN_WIDTH_SYMBOLS; i++)
;;;588    		{
;;;589    			j = i + cnt;
;;;590    
;;;591    			if (j >= U_MLT_SCREEN_WIDTH_SYMBOLS)
;;;592    				j %= U_MLT_SCREEN_WIDTH_SYMBOLS;
;;;593    			
;;;594    			// Если исходная строка еще не кончилась
;;;595    			if (j < L)  			
;;;596    				c = str[j];
;;;597    			// Если исходная строка уже кончилась
;;;598    			else
;;;599    				c = 32; // Пробел
;;;600    			
;;;601    			s[i] = c;
;;;602    		}
;;;603    	// Если исходная строка длиннее экрана
;;;604    	else
;;;605    		for (i = 0; i < U_MLT_SCREEN_WIDTH_SYMBOLS; i++)
;;;606    		{
;;;607    			j = i + cnt;
;;;608    
;;;609    			if (j >= L)
;;;610    				j %= L;
;;;611    			
;;;612          s[i] = str[j];
;;;613    		}
;;;614    	
;;;615    	// Вывести прокрученную строку на ЖКИ	
;;;616    	U_MLT_Put_String (s, Y);
;;;617    }
00001c  b006              ADD      sp,sp,#0x18
00001e  e8bd87f0          POP      {r4-r10,pc}
                  |L14.34|
000022  fb97f0f6          SDIV     r0,r7,r6              ;584
000026  fb067710          MLS      r7,r6,r0,r7           ;584
00002a  2e10              CMP      r6,#0x10              ;586
00002c  da19              BGE      |L14.98|
00002e  2400              MOVS     r4,#0                 ;587
000030  e014              B        |L14.92|
                  |L14.50|
000032  19e5              ADDS     r5,r4,r7              ;589
000034  2d10              CMP      r5,#0x10              ;591
000036  db06              BLT      |L14.70|
000038  4628              MOV      r0,r5                 ;592
00003a  17e9              ASRS     r1,r5,#31             ;592
00003c  eb057111          ADD      r1,r5,r1,LSR #28      ;592
000040  1109              ASRS     r1,r1,#4              ;592
000042  eba51501          SUB      r5,r5,r1,LSL #4       ;592
                  |L14.70|
000046  42b5              CMP      r5,r6                 ;595
000048  da02              BGE      |L14.80|
00004a  f818a005          LDRB     r10,[r8,r5]           ;596
00004e  e001              B        |L14.84|
                  |L14.80|
000050  f04f0a20          MOV      r10,#0x20             ;599
                  |L14.84|
000054  a801              ADD      r0,sp,#4              ;601
000056  f800a004          STRB     r10,[r0,r4]           ;601
00005a  1c64              ADDS     r4,r4,#1              ;587
                  |L14.92|
00005c  2c10              CMP      r4,#0x10              ;587
00005e  dbe8              BLT      |L14.50|
000060  e00f              B        |L14.130|
                  |L14.98|
000062  2400              MOVS     r4,#0                 ;605
000064  e00b              B        |L14.126|
                  |L14.102|
000066  19e5              ADDS     r5,r4,r7              ;607
000068  42b5              CMP      r5,r6                 ;609
00006a  db03              BLT      |L14.116|
00006c  fb95f0f6          SDIV     r0,r5,r6              ;610
000070  fb065510          MLS      r5,r6,r0,r5           ;610
                  |L14.116|
000074  f8180005          LDRB     r0,[r8,r5]            ;612
000078  a901              ADD      r1,sp,#4              ;612
00007a  5508              STRB     r0,[r1,r4]            ;612
00007c  1c64              ADDS     r4,r4,#1              ;605
                  |L14.126|
00007e  2c10              CMP      r4,#0x10              ;605
000080  dbf1              BLT      |L14.102|
                  |L14.130|
000082  4649              MOV      r1,r9                 ;616
000084  a801              ADD      r0,sp,#4              ;616
000086  f7fffffe          BL       U_MLT_Put_String
00008a  bf00              NOP      
00008c  e7c6              B        |L14.28|
;;;618    
                          ENDP


                          AREA ||i.U_MLT_Set_Address||, CODE, READONLY, ALIGN=2

                  U_MLT_Set_Address PROC
;;;334    // Задать текущий адрес
;;;335    void U_MLT_Set_Address (uint8_t Chip, uint8_t address)
000000  b570              PUSH     {r4-r6,lr}
;;;336    {
000002  4604              MOV      r4,r0
000004  460d              MOV      r5,r1
;;;337    	// Если выбран дисплей 1, то установить вывод Е1 (дисплей 1 выбран)
;;;338    	if (Chip == 1) 
000006  2c01              CMP      r4,#1
000008  d104              BNE      |L15.20|
;;;339    	{
;;;340        U_MLT_Set_E1_Pin;
00000a  2180              MOVS     r1,#0x80
00000c  482c              LDR      r0,|L15.192|
00000e  f7fffffe          BL       PORT_SetBits
000012  e004              B        |L15.30|
                  |L15.20|
;;;341      }
;;;342    	// Если выбран дисплей 2, то установить вывод Е2 (дисплей 2 выбран)
;;;343    	else 
;;;344      {
;;;345        U_MLT_Set_E2_Pin;
000014  f44f7180          MOV      r1,#0x100
000018  4829              LDR      r0,|L15.192|
00001a  f7fffffe          BL       PORT_SetBits
                  |L15.30|
;;;346      }
;;;347    
;;;348    	U_MLT_Clr_A0_Pin;
00001e  2101              MOVS     r1,#1
000020  4828              LDR      r0,|L15.196|
000022  f7fffffe          BL       PORT_ResetBits
;;;349    
;;;350    	U_MLT_Clr_RW_Pin;
000026  f44f6180          MOV      r1,#0x400
00002a  4825              LDR      r0,|L15.192|
00002c  f7fffffe          BL       PORT_ResetBits
;;;351    	U_MLT_Delay(5);
000030  2005              MOVS     r0,#5
000032  f7fffffe          BL       U_MLT_Delay
;;;352    	
;;;353    	U_MLT_Data_Dir_Output_PA;
000036  4824              LDR      r0,|L15.200|
000038  6840              LDR      r0,[r0,#4]
00003a  f040003f          ORR      r0,r0,#0x3f
00003e  4922              LDR      r1,|L15.200|
000040  6048              STR      r0,[r1,#4]
;;;354    	U_MLT_Data_Dir_Output_PF;
000042  4822              LDR      r0,|L15.204|
000044  6840              LDR      r0,[r0,#4]
000046  f040000c          ORR      r0,r0,#0xc
00004a  4920              LDR      r1,|L15.204|
00004c  6048              STR      r0,[r1,#4]
;;;355    	
;;;356    	U_MLT_Set_Data_Bits (0x40 | address);
00004e  f0450040          ORR      r0,r5,#0x40
000052  f7fffffe          BL       U_MLT_Set_Data_Bits
;;;357    	U_MLT_Delay(5);
000056  2005              MOVS     r0,#5
000058  f7fffffe          BL       U_MLT_Delay
;;;358    	
;;;359    	U_MLT_Set_Stb_Pin;
00005c  2102              MOVS     r1,#2
00005e  4819              LDR      r0,|L15.196|
000060  f7fffffe          BL       PORT_SetBits
;;;360    	U_MLT_Delay(5);
000064  2005              MOVS     r0,#5
000066  f7fffffe          BL       U_MLT_Delay
;;;361    	
;;;362    	U_MLT_Clr_Stb_Pin;
00006a  2102              MOVS     r1,#2
00006c  4815              LDR      r0,|L15.196|
00006e  f7fffffe          BL       PORT_ResetBits
;;;363    	U_MLT_Delay(5);
000072  2005              MOVS     r0,#5
000074  f7fffffe          BL       U_MLT_Delay
;;;364    	
;;;365    	U_MLT_Data_Dir_Input_PA;
000078  4813              LDR      r0,|L15.200|
00007a  6840              LDR      r0,[r0,#4]
00007c  f64f71c0          MOV      r1,#0xffc0
000080  4008              ANDS     r0,r0,r1
000082  4911              LDR      r1,|L15.200|
000084  6048              STR      r0,[r1,#4]
;;;366    	U_MLT_Data_Dir_Input_PF;
000086  4811              LDR      r0,|L15.204|
000088  6840              LDR      r0,[r0,#4]
00008a  f64f71f3          MOV      r1,#0xfff3
00008e  4008              ANDS     r0,r0,r1
000090  490e              LDR      r1,|L15.204|
000092  6048              STR      r0,[r1,#4]
;;;367    
;;;368    	U_MLT_Clr_A0_Pin;
000094  2101              MOVS     r1,#1
000096  480b              LDR      r0,|L15.196|
000098  f7fffffe          BL       PORT_ResetBits
;;;369    
;;;370    	U_MLT_Clr_RW_Pin;
00009c  f44f6180          MOV      r1,#0x400
0000a0  4807              LDR      r0,|L15.192|
0000a2  f7fffffe          BL       PORT_ResetBits
;;;371    
;;;372    	// Если выбран дисплей 1, то сбросить вывод Е1 (дисплей 1 НЕ выбран)
;;;373    	if (Chip == 1) 
0000a6  2c01              CMP      r4,#1
0000a8  d104              BNE      |L15.180|
;;;374    	{
;;;375        U_MLT_Clr_E1_Pin;
0000aa  2180              MOVS     r1,#0x80
0000ac  4804              LDR      r0,|L15.192|
0000ae  f7fffffe          BL       PORT_ResetBits
0000b2  e004              B        |L15.190|
                  |L15.180|
;;;376      }
;;;377    	// Если выбран дисплей 2, то сбросить вывод Е2 (дисплей 1 НЕ выбран)
;;;378    	else 
;;;379      {
;;;380        U_MLT_Clr_E2_Pin;
0000b4  f44f7180          MOV      r1,#0x100
0000b8  4801              LDR      r0,|L15.192|
0000ba  f7fffffe          BL       PORT_ResetBits
                  |L15.190|
;;;381      }
;;;382    }
0000be  bd70              POP      {r4-r6,pc}
;;;383    
                          ENDP

                  |L15.192|
                          DCD      0x400b0000
                  |L15.196|
                          DCD      0x400b8000
                  |L15.200|
                          DCD      0x400a8000
                  |L15.204|
                          DCD      0x400e8000

                          AREA ||i.U_MLT_Set_Data_Bits||, CODE, READONLY, ALIGN=2

                  U_MLT_Set_Data_Bits PROC
;;;104    // Выставить данные на шину данных
;;;105    void U_MLT_Set_Data_Bits (uint8_t value)
000000  490e              LDR      r1,|L16.60|
;;;106    {
;;;107    	MDR_PORTA->RXTX &= 0xFFC0;
000002  6809              LDR      r1,[r1,#0]
000004  f64f72c0          MOV      r2,#0xffc0
000008  4011              ANDS     r1,r1,r2
00000a  4a0c              LDR      r2,|L16.60|
00000c  6011              STR      r1,[r2,#0]
;;;108    	MDR_PORTA->RXTX |= (value & 0x3F); 
00000e  4611              MOV      r1,r2
000010  6809              LDR      r1,[r1,#0]
000012  f000023f          AND      r2,r0,#0x3f
000016  4311              ORRS     r1,r1,r2
000018  4a08              LDR      r2,|L16.60|
00001a  6011              STR      r1,[r2,#0]
;;;109    	MDR_PORTF->RXTX &= 0xFFF3;
00001c  4908              LDR      r1,|L16.64|
00001e  6809              LDR      r1,[r1,#0]
000020  f64f72f3          MOV      r2,#0xfff3
000024  4011              ANDS     r1,r1,r2
000026  4a06              LDR      r2,|L16.64|
000028  6011              STR      r1,[r2,#0]
;;;110    	MDR_PORTF->RXTX |= ((value >> 4) & 0x0c); 
00002a  4611              MOV      r1,r2
00002c  6809              LDR      r1,[r1,#0]
00002e  220c              MOVS     r2,#0xc
000030  ea021220          AND      r2,r2,r0,ASR #4
000034  4311              ORRS     r1,r1,r2
000036  4a02              LDR      r2,|L16.64|
000038  6011              STR      r1,[r2,#0]
;;;111    }
00003a  4770              BX       lr
;;;112    
                          ENDP

                  |L16.60|
                          DCD      0x400a8000
                  |L16.64|
                          DCD      0x400e8000

                          AREA ||i.U_MLT_Set_Page||, CODE, READONLY, ALIGN=2

                  U_MLT_Set_Page PROC
;;;284    // Задать текущую страницу
;;;285    void U_MLT_Set_Page (uint8_t Chip, uint8_t page)
000000  b570              PUSH     {r4-r6,lr}
;;;286    {
000002  4604              MOV      r4,r0
000004  460d              MOV      r5,r1
;;;287    	// Если выбран дисплей 1, то установить вывод Е1 (дисплей 1 выбран)
;;;288    	if (Chip == 1) 
000006  2c01              CMP      r4,#1
000008  d104              BNE      |L17.20|
;;;289    	{
;;;290        U_MLT_Set_E1_Pin;
00000a  2180              MOVS     r1,#0x80
00000c  482c              LDR      r0,|L17.192|
00000e  f7fffffe          BL       PORT_SetBits
000012  e004              B        |L17.30|
                  |L17.20|
;;;291      }
;;;292    	// Если выбран дисплей 2, то установить вывод Е2 (дисплей 2 выбран)
;;;293    	else 
;;;294      {
;;;295        U_MLT_Set_E2_Pin;
000014  f44f7180          MOV      r1,#0x100
000018  4829              LDR      r0,|L17.192|
00001a  f7fffffe          BL       PORT_SetBits
                  |L17.30|
;;;296      }
;;;297    
;;;298    	U_MLT_Clr_A0_Pin;
00001e  2101              MOVS     r1,#1
000020  4828              LDR      r0,|L17.196|
000022  f7fffffe          BL       PORT_ResetBits
;;;299    
;;;300    	U_MLT_Clr_RW_Pin;
000026  f44f6180          MOV      r1,#0x400
00002a  4825              LDR      r0,|L17.192|
00002c  f7fffffe          BL       PORT_ResetBits
;;;301    	U_MLT_Delay(5);
000030  2005              MOVS     r0,#5
000032  f7fffffe          BL       U_MLT_Delay
;;;302    	
;;;303    	U_MLT_Data_Dir_Output_PA;
000036  4824              LDR      r0,|L17.200|
000038  6840              LDR      r0,[r0,#4]
00003a  f040003f          ORR      r0,r0,#0x3f
00003e  4922              LDR      r1,|L17.200|
000040  6048              STR      r0,[r1,#4]
;;;304    	U_MLT_Data_Dir_Output_PF;
000042  4822              LDR      r0,|L17.204|
000044  6840              LDR      r0,[r0,#4]
000046  f040000c          ORR      r0,r0,#0xc
00004a  4920              LDR      r1,|L17.204|
00004c  6048              STR      r0,[r1,#4]
;;;305    	
;;;306    	U_MLT_Set_Data_Bits (0xB8 | page);
00004e  f04500b8          ORR      r0,r5,#0xb8
000052  f7fffffe          BL       U_MLT_Set_Data_Bits
;;;307    	U_MLT_Delay(5);
000056  2005              MOVS     r0,#5
000058  f7fffffe          BL       U_MLT_Delay
;;;308    	
;;;309    	U_MLT_Set_Stb_Pin;
00005c  2102              MOVS     r1,#2
00005e  4819              LDR      r0,|L17.196|
000060  f7fffffe          BL       PORT_SetBits
;;;310    	U_MLT_Delay(5);
000064  2005              MOVS     r0,#5
000066  f7fffffe          BL       U_MLT_Delay
;;;311    	
;;;312    	U_MLT_Clr_Stb_Pin;
00006a  2102              MOVS     r1,#2
00006c  4815              LDR      r0,|L17.196|
00006e  f7fffffe          BL       PORT_ResetBits
;;;313    	U_MLT_Delay(5);
000072  2005              MOVS     r0,#5
000074  f7fffffe          BL       U_MLT_Delay
;;;314    	
;;;315    	U_MLT_Data_Dir_Input_PA;
000078  4813              LDR      r0,|L17.200|
00007a  6840              LDR      r0,[r0,#4]
00007c  f64f71c0          MOV      r1,#0xffc0
000080  4008              ANDS     r0,r0,r1
000082  4911              LDR      r1,|L17.200|
000084  6048              STR      r0,[r1,#4]
;;;316    	U_MLT_Data_Dir_Input_PF;
000086  4811              LDR      r0,|L17.204|
000088  6840              LDR      r0,[r0,#4]
00008a  f64f71f3          MOV      r1,#0xfff3
00008e  4008              ANDS     r0,r0,r1
000090  490e              LDR      r1,|L17.204|
000092  6048              STR      r0,[r1,#4]
;;;317    
;;;318    	U_MLT_Clr_A0_Pin;
000094  2101              MOVS     r1,#1
000096  480b              LDR      r0,|L17.196|
000098  f7fffffe          BL       PORT_ResetBits
;;;319    
;;;320    	U_MLT_Clr_RW_Pin;
00009c  f44f6180          MOV      r1,#0x400
0000a0  4807              LDR      r0,|L17.192|
0000a2  f7fffffe          BL       PORT_ResetBits
;;;321    
;;;322    	// Если выбран дисплей 1, то сбросить вывод Е1 (дисплей 1 НЕ выбран)
;;;323    	if (Chip == 1) 
0000a6  2c01              CMP      r4,#1
0000a8  d104              BNE      |L17.180|
;;;324    	{
;;;325        U_MLT_Clr_E1_Pin;
0000aa  2180              MOVS     r1,#0x80
0000ac  4804              LDR      r0,|L17.192|
0000ae  f7fffffe          BL       PORT_ResetBits
0000b2  e004              B        |L17.190|
                  |L17.180|
;;;326      }
;;;327    	// Если выбран дисплей 2, то сбросить вывод Е2 (дисплей 1 НЕ выбран)
;;;328    	else 
;;;329      {
;;;330        U_MLT_Clr_E2_Pin;
0000b4  f44f7180          MOV      r1,#0x100
0000b8  4801              LDR      r0,|L17.192|
0000ba  f7fffffe          BL       PORT_ResetBits
                  |L17.190|
;;;331      }
;;;332    }
0000be  bd70              POP      {r4-r6,pc}
;;;333    
                          ENDP

                  |L17.192|
                          DCD      0x400b0000
                  |L17.196|
                          DCD      0x400b8000
                  |L17.200|
                          DCD      0x400a8000
                  |L17.204|
                          DCD      0x400e8000

                          AREA ||i.U_MLT_Write_Data||, CODE, READONLY, ALIGN=2

                  U_MLT_Write_Data PROC
;;;384    // Записать данные в ЖКИ
;;;385    void U_MLT_Write_Data (uint8_t Chip, uint8_t data)
000000  b570              PUSH     {r4-r6,lr}
;;;386    {
000002  4604              MOV      r4,r0
000004  460d              MOV      r5,r1
;;;387    	// Если выбран дисплей 1, то установить вывод Е1 (дисплей 1 выбран)
;;;388    	if (Chip == 1) 
000006  2c01              CMP      r4,#1
000008  d104              BNE      |L18.20|
;;;389    	{
;;;390        U_MLT_Set_E1_Pin;
00000a  2180              MOVS     r1,#0x80
00000c  482c              LDR      r0,|L18.192|
00000e  f7fffffe          BL       PORT_SetBits
000012  e004              B        |L18.30|
                  |L18.20|
;;;391      }
;;;392    	// Если выбран дисплей 2, то установить вывод Е2 (дисплей 2 выбран)
;;;393    	else 
;;;394      {
;;;395        U_MLT_Set_E2_Pin;
000014  f44f7180          MOV      r1,#0x100
000018  4829              LDR      r0,|L18.192|
00001a  f7fffffe          BL       PORT_SetBits
                  |L18.30|
;;;396      }
;;;397    
;;;398    	U_MLT_Set_A0_Pin;
00001e  2101              MOVS     r1,#1
000020  4828              LDR      r0,|L18.196|
000022  f7fffffe          BL       PORT_SetBits
;;;399    
;;;400    	U_MLT_Clr_RW_Pin;
000026  f44f6180          MOV      r1,#0x400
00002a  4825              LDR      r0,|L18.192|
00002c  f7fffffe          BL       PORT_ResetBits
;;;401    	U_MLT_Delay(5);
000030  2005              MOVS     r0,#5
000032  f7fffffe          BL       U_MLT_Delay
;;;402    	
;;;403    	U_MLT_Data_Dir_Output_PA;
000036  4824              LDR      r0,|L18.200|
000038  6840              LDR      r0,[r0,#4]
00003a  f040003f          ORR      r0,r0,#0x3f
00003e  4922              LDR      r1,|L18.200|
000040  6048              STR      r0,[r1,#4]
;;;404    	U_MLT_Data_Dir_Output_PF;
000042  4822              LDR      r0,|L18.204|
000044  6840              LDR      r0,[r0,#4]
000046  f040000c          ORR      r0,r0,#0xc
00004a  4920              LDR      r1,|L18.204|
00004c  6048              STR      r0,[r1,#4]
;;;405    	
;;;406    	U_MLT_Set_Data_Bits (data);
00004e  4628              MOV      r0,r5
000050  f7fffffe          BL       U_MLT_Set_Data_Bits
;;;407    	U_MLT_Delay(5);
000054  2005              MOVS     r0,#5
000056  f7fffffe          BL       U_MLT_Delay
;;;408    	
;;;409    	U_MLT_Set_Stb_Pin;
00005a  2102              MOVS     r1,#2
00005c  4819              LDR      r0,|L18.196|
00005e  f7fffffe          BL       PORT_SetBits
;;;410    	U_MLT_Delay(5);
000062  2005              MOVS     r0,#5
000064  f7fffffe          BL       U_MLT_Delay
;;;411    	
;;;412    	U_MLT_Clr_Stb_Pin;
000068  2102              MOVS     r1,#2
00006a  4816              LDR      r0,|L18.196|
00006c  f7fffffe          BL       PORT_ResetBits
;;;413    	U_MLT_Delay(5);
000070  2005              MOVS     r0,#5
000072  f7fffffe          BL       U_MLT_Delay
;;;414    	
;;;415    	U_MLT_Data_Dir_Input_PA;
000076  4814              LDR      r0,|L18.200|
000078  6840              LDR      r0,[r0,#4]
00007a  f64f71c0          MOV      r1,#0xffc0
00007e  4008              ANDS     r0,r0,r1
000080  4911              LDR      r1,|L18.200|
000082  6048              STR      r0,[r1,#4]
;;;416    	U_MLT_Data_Dir_Input_PF;
000084  4811              LDR      r0,|L18.204|
000086  6840              LDR      r0,[r0,#4]
000088  f64f71f3          MOV      r1,#0xfff3
00008c  4008              ANDS     r0,r0,r1
00008e  490f              LDR      r1,|L18.204|
000090  6048              STR      r0,[r1,#4]
;;;417    
;;;418    	U_MLT_Clr_A0_Pin;
000092  2101              MOVS     r1,#1
000094  480b              LDR      r0,|L18.196|
000096  f7fffffe          BL       PORT_ResetBits
;;;419    
;;;420    	U_MLT_Clr_RW_Pin;
00009a  f44f6180          MOV      r1,#0x400
00009e  4808              LDR      r0,|L18.192|
0000a0  f7fffffe          BL       PORT_ResetBits
;;;421    
;;;422    	// Если выбран дисплей 1, то сбросить вывод Е1 (дисплей 1 НЕ выбран)
;;;423    	if (Chip == 1) 
0000a4  2c01              CMP      r4,#1
0000a6  d104              BNE      |L18.178|
;;;424    	{
;;;425        U_MLT_Clr_E1_Pin;
0000a8  2180              MOVS     r1,#0x80
0000aa  4805              LDR      r0,|L18.192|
0000ac  f7fffffe          BL       PORT_ResetBits
0000b0  e004              B        |L18.188|
                  |L18.178|
;;;426      }
;;;427    	// Если выбран дисплей 2, то сбросить вывод Е2 (дисплей 1 НЕ выбран)
;;;428    	else 
;;;429      {
;;;430        U_MLT_Clr_E2_Pin;
0000b2  f44f7180          MOV      r1,#0x100
0000b6  4802              LDR      r0,|L18.192|
0000b8  f7fffffe          BL       PORT_ResetBits
                  |L18.188|
;;;431      }
;;;432    }
0000bc  bd70              POP      {r4-r6,pc}
;;;433    
                          ENDP

0000be  0000              DCW      0x0000
                  |L18.192|
                          DCD      0x400b0000
                  |L18.196|
                          DCD      0x400b8000
                  |L18.200|
                          DCD      0x400a8000
                  |L18.204|
                          DCD      0x400e8000

                          AREA ||.constdata||, DATA, READONLY, ALIGN=0

                  MLT_Font
000000  00000000          DCB      0x00,0x00,0x00,0x00
000004  00000000          DCB      0x00,0x00,0x00,0x00
000008  000000df          DCB      0x00,0x00,0x00,0xdf
00000c  df000000          DCB      0xdf,0x00,0x00,0x00
000010  00070700          DCB      0x00,0x07,0x07,0x00
000014  07070000          DCB      0x07,0x07,0x00,0x00
000018  2424ff24          DCB      0x24,0x24,0xff,0x24
00001c  ff242400          DCB      0xff,0x24,0x24,0x00
000020  00000000          DCB      0x00,0x00,0x00,0x00
000024  00000000          DCB      0x00,0x00,0x00,0x00
000028  00633318          DCB      0x00,0x63,0x33,0x18
00002c  0c666300          DCB      0x0c,0x66,0x63,0x00
000030  60f69f89          DCB      0x60,0xf6,0x9f,0x89
000034  9f76d800          DCB      0x9f,0x76,0xd8,0x00
000038  00000007          DCB      0x00,0x00,0x00,0x07
00003c  07000000          DCB      0x07,0x00,0x00,0x00
000040  003c7ec3          DCB      0x00,0x3c,0x7e,0xc3
000044  81810000          DCB      0x81,0x81,0x00,0x00
000048  008181c3          DCB      0x00,0x81,0x81,0xc3
00004c  7e3c0000          DCB      0x7e,0x3c,0x00,0x00
000050  082a1c7f          DCB      0x08,0x2a,0x1c,0x7f
000054  1c2a0800          DCB      0x1c,0x2a,0x08,0x00
000058  0018187e          DCB      0x00,0x18,0x18,0x7e
00005c  7e181800          DCB      0x7e,0x18,0x18,0x00
000060  000080e0          DCB      0x00,0x00,0x80,0xe0
000064  60000000          DCB      0x60,0x00,0x00,0x00
000068  00181818          DCB      0x00,0x18,0x18,0x18
00006c  18181800          DCB      0x18,0x18,0x18,0x00
000070  00000060          DCB      0x00,0x00,0x00,0x60
000074  60000000          DCB      0x60,0x00,0x00,0x00
000078  0000c0f0          DCB      0x00,0x00,0xc0,0xf0
00007c  3c0f0300          DCB      0x3c,0x0f,0x03,0x00
000080  3e7f7159          DCB      0x3e,0x7f,0x71,0x59
000084  4d7f3e00          DCB      0x4d,0x7f,0x3e,0x00
000088  40427f7f          DCB      0x40,0x42,0x7f,0x7f
00008c  40400000          DCB      0x40,0x40,0x00,0x00
000090  62735949          DCB      0x62,0x73,0x59,0x49
000094  6f660000          DCB      0x6f,0x66,0x00,0x00
000098  22634949          DCB      0x22,0x63,0x49,0x49
00009c  7f360000          DCB      0x7f,0x36,0x00,0x00
0000a0  181c1653          DCB      0x18,0x1c,0x16,0x53
0000a4  7f7f5000          DCB      0x7f,0x7f,0x50,0x00
0000a8  27674545          DCB      0x27,0x67,0x45,0x45
0000ac  7d390000          DCB      0x7d,0x39,0x00,0x00
0000b0  3c7e4b49          DCB      0x3c,0x7e,0x4b,0x49
0000b4  79300000          DCB      0x79,0x30,0x00,0x00
0000b8  03037179          DCB      0x03,0x03,0x71,0x79
0000bc  0f070000          DCB      0x0f,0x07,0x00,0x00
0000c0  367f4949          DCB      0x36,0x7f,0x49,0x49
0000c4  7f360000          DCB      0x7f,0x36,0x00,0x00
0000c8  064f4969          DCB      0x06,0x4f,0x49,0x69
0000cc  3f1e0000          DCB      0x3f,0x1e,0x00,0x00
0000d0  00000066          DCB      0x00,0x00,0x00,0x66
0000d4  66000000          DCB      0x66,0x00,0x00,0x00
0000d8  00008066          DCB      0x00,0x00,0x80,0x66
0000dc  66000000          DCB      0x66,0x00,0x00,0x00
0000e0  00000814          DCB      0x00,0x00,0x08,0x14
0000e4  22410000          DCB      0x22,0x41,0x00,0x00
0000e8  00282828          DCB      0x00,0x28,0x28,0x28
0000ec  28282800          DCB      0x28,0x28,0x28,0x00
0000f0  00004122          DCB      0x00,0x00,0x41,0x22
0000f4  14080000          DCB      0x14,0x08,0x00,0x00
0000f8  00020369          DCB      0x00,0x02,0x03,0x69
0000fc  6d070200          DCB      0x6d,0x07,0x02,0x00
000100  00000000          DCB      0x00,0x00,0x00,0x00
000104  00000000          DCB      0x00,0x00,0x00,0x00
000108  7c7e1313          DCB      0x7c,0x7e,0x13,0x13
00010c  7e7c0000          DCB      0x7e,0x7c,0x00,0x00
000110  417f7f49          DCB      0x41,0x7f,0x7f,0x49
000114  497f3600          DCB      0x49,0x7f,0x36,0x00
000118  1c3e6341          DCB      0x1c,0x3e,0x63,0x41
00011c  41632200          DCB      0x41,0x63,0x22,0x00
000120  417f7f41          DCB      0x41,0x7f,0x7f,0x41
000124  633e1c00          DCB      0x63,0x3e,0x1c,0x00
000128  417f7f49          DCB      0x41,0x7f,0x7f,0x49
00012c  5d416300          DCB      0x5d,0x41,0x63,0x00
000130  417f7f49          DCB      0x41,0x7f,0x7f,0x49
000134  1d010300          DCB      0x1d,0x01,0x03,0x00
000138  1c3e6341          DCB      0x1c,0x3e,0x63,0x41
00013c  51737200          DCB      0x51,0x73,0x72,0x00
000140  7f7f0808          DCB      0x7f,0x7f,0x08,0x08
000144  7f7f0000          DCB      0x7f,0x7f,0x00,0x00
000148  00417f7f          DCB      0x00,0x41,0x7f,0x7f
00014c  41000000          DCB      0x41,0x00,0x00,0x00
000150  30704041          DCB      0x30,0x70,0x40,0x41
000154  7f3f0100          DCB      0x7f,0x3f,0x01,0x00
000158  417f7f08          DCB      0x41,0x7f,0x7f,0x08
00015c  1c776300          DCB      0x1c,0x77,0x63,0x00
000160  417f7f41          DCB      0x41,0x7f,0x7f,0x41
000164  40607000          DCB      0x40,0x60,0x70,0x00
000168  7f7f0e1c          DCB      0x7f,0x7f,0x0e,0x1c
00016c  0e7f7f00          DCB      0x0e,0x7f,0x7f,0x00
000170  7f7f060c          DCB      0x7f,0x7f,0x06,0x0c
000174  187f7f00          DCB      0x18,0x7f,0x7f,0x00
000178  1c3e6341          DCB      0x1c,0x3e,0x63,0x41
00017c  633e1c00          DCB      0x63,0x3e,0x1c,0x00
000180  417f7f49          DCB      0x41,0x7f,0x7f,0x49
000184  090f0600          DCB      0x09,0x0f,0x06,0x00
000188  1e3f2171          DCB      0x1e,0x3f,0x21,0x71
00018c  7f5e0000          DCB      0x7f,0x5e,0x00,0x00
000190  417f7f09          DCB      0x41,0x7f,0x7f,0x09
000194  197f6600          DCB      0x19,0x7f,0x66,0x00
000198  266f4d59          DCB      0x26,0x6f,0x4d,0x59
00019c  73320000          DCB      0x73,0x32,0x00,0x00
0001a0  03417f7f          DCB      0x03,0x41,0x7f,0x7f
0001a4  41030000          DCB      0x41,0x03,0x00,0x00
0001a8  3f7f6060          DCB      0x3f,0x7f,0x60,0x60
0001ac  7f3f0000          DCB      0x7f,0x3f,0x00,0x00
0001b0  1f3f6060          DCB      0x1f,0x3f,0x60,0x60
0001b4  3f1f0000          DCB      0x3f,0x1f,0x00,0x00
0001b8  7f7f3018          DCB      0x7f,0x7f,0x30,0x18
0001bc  307f7f00          DCB      0x30,0x7f,0x7f,0x00
0001c0  63673c18          DCB      0x63,0x67,0x3c,0x18
0001c4  3c676300          DCB      0x3c,0x67,0x63,0x00
0001c8  074f7878          DCB      0x07,0x4f,0x78,0x78
0001cc  4f070000          DCB      0x4f,0x07,0x00,0x00
0001d0  47637159          DCB      0x47,0x63,0x71,0x59
0001d4  4d677300          DCB      0x4d,0x67,0x73,0x00
0001d8  00000000          DCB      0x00,0x00,0x00,0x00
0001dc  00000000          DCB      0x00,0x00,0x00,0x00
0001e0  00000000          DCB      0x00,0x00,0x00,0x00
0001e4  00000000          DCB      0x00,0x00,0x00,0x00
0001e8  00000000          DCB      0x00,0x00,0x00,0x00
0001ec  00000000          DCB      0x00,0x00,0x00,0x00
0001f0  00000000          DCB      0x00,0x00,0x00,0x00
0001f4  00000000          DCB      0x00,0x00,0x00,0x00
0001f8  00000000          DCB      0x00,0x00,0x00,0x00
0001fc  00000000          DCB      0x00,0x00,0x00,0x00
000200  00000000          DCB      0x00,0x00,0x00,0x00
000204  00000000          DCB      0x00,0x00,0x00,0x00
000208  20745454          DCB      0x20,0x74,0x54,0x54
00020c  3c784000          DCB      0x3c,0x78,0x40,0x00
000210  417f3f48          DCB      0x41,0x7f,0x3f,0x48
000214  48783000          DCB      0x48,0x78,0x30,0x00
000218  387c4444          DCB      0x38,0x7c,0x44,0x44
00021c  6c280000          DCB      0x6c,0x28,0x00,0x00
000220  30784849          DCB      0x30,0x78,0x48,0x49
000224  3f7f4000          DCB      0x3f,0x7f,0x40,0x00
000228  387c5454          DCB      0x38,0x7c,0x54,0x54
00022c  5c180000          DCB      0x5c,0x18,0x00,0x00
000230  487e7f49          DCB      0x48,0x7e,0x7f,0x49
000234  03020000          DCB      0x03,0x02,0x00,0x00
000238  4c5e5252          DCB      0x4c,0x5e,0x52,0x52
00023c  7c3e0200          DCB      0x7c,0x3e,0x02,0x00
000240  417f7f08          DCB      0x41,0x7f,0x7f,0x08
000244  047c7800          DCB      0x04,0x7c,0x78,0x00
000248  00447d7d          DCB      0x00,0x44,0x7d,0x7d
00024c  40000000          DCB      0x40,0x00,0x00,0x00
000250  30704040          DCB      0x30,0x70,0x40,0x40
000254  7d3d0000          DCB      0x7d,0x3d,0x00,0x00
000258  417f7f10          DCB      0x41,0x7f,0x7f,0x10
00025c  386c4400          DCB      0x38,0x6c,0x44,0x00
000260  00417f7f          DCB      0x00,0x41,0x7f,0x7f
000264  40000000          DCB      0x40,0x00,0x00,0x00
000268  7c7c1838          DCB      0x7c,0x7c,0x18,0x38
00026c  1c7c7800          DCB      0x1c,0x7c,0x78,0x00
000270  7c7c0404          DCB      0x7c,0x7c,0x04,0x04
000274  7c780000          DCB      0x7c,0x78,0x00,0x00
000278  387c4444          DCB      0x38,0x7c,0x44,0x44
00027c  7c380000          DCB      0x7c,0x38,0x00,0x00
000280  44787c54          DCB      0x44,0x78,0x7c,0x54
000284  141c0800          DCB      0x14,0x1c,0x08,0x00
000288  081c1454          DCB      0x08,0x1c,0x14,0x54
00028c  787c4000          DCB      0x78,0x7c,0x40,0x00
000290  447c784c          DCB      0x44,0x7c,0x78,0x4c
000294  041c1800          DCB      0x04,0x1c,0x18,0x00
000298  485c5454          DCB      0x48,0x5c,0x54,0x54
00029c  74240000          DCB      0x74,0x24,0x00,0x00
0002a0  00043e7f          DCB      0x00,0x04,0x3e,0x7f
0002a4  44240000          DCB      0x44,0x24,0x00,0x00
0002a8  3c7c4040          DCB      0x3c,0x7c,0x40,0x40
0002ac  3c7c4000          DCB      0x3c,0x7c,0x40,0x00
0002b0  1c3c6060          DCB      0x1c,0x3c,0x60,0x60
0002b4  3c1c0000          DCB      0x3c,0x1c,0x00,0x00
0002b8  3c7c7038          DCB      0x3c,0x7c,0x70,0x38
0002bc  707c3c00          DCB      0x70,0x7c,0x3c,0x00
0002c0  446c3810          DCB      0x44,0x6c,0x38,0x10
0002c4  386c4400          DCB      0x38,0x6c,0x44,0x00
0002c8  4c5c5050          DCB      0x4c,0x5c,0x50,0x50
0002cc  7c3c0000          DCB      0x7c,0x3c,0x00,0x00
0002d0  4c64745c          DCB      0x4c,0x64,0x74,0x5c
0002d4  4c640000          DCB      0x4c,0x64,0x00,0x00
0002d8  00000000          DCB      0x00,0x00,0x00,0x00
0002dc  00000000          DCB      0x00,0x00,0x00,0x00
0002e0  00000000          DCB      0x00,0x00,0x00,0x00
0002e4  00000000          DCB      0x00,0x00,0x00,0x00
0002e8  00000000          DCB      0x00,0x00,0x00,0x00
0002ec  00000000          DCB      0x00,0x00,0x00,0x00
0002f0  00000000          DCB      0x00,0x00,0x00,0x00
0002f4  00000000          DCB      0x00,0x00,0x00,0x00
0002f8  00000000          DCB      0x00,0x00,0x00,0x00
0002fc  00000000          DCB      0x00,0x00,0x00,0x00
000300  00000000          DCB      0x00,0x00,0x00,0x00
000304  00000000          DCB      0x00,0x00,0x00,0x00
000308  00000000          DCB      0x00,0x00,0x00,0x00
00030c  00000000          DCB      0x00,0x00,0x00,0x00
000310  00000000          DCB      0x00,0x00,0x00,0x00
000314  00000000          DCB      0x00,0x00,0x00,0x00
000318  00000000          DCB      0x00,0x00,0x00,0x00
00031c  00000000          DCB      0x00,0x00,0x00,0x00
000320  00000000          DCB      0x00,0x00,0x00,0x00
000324  00000000          DCB      0x00,0x00,0x00,0x00
000328  00000000          DCB      0x00,0x00,0x00,0x00
00032c  00000000          DCB      0x00,0x00,0x00,0x00
000330  00000000          DCB      0x00,0x00,0x00,0x00
000334  00000000          DCB      0x00,0x00,0x00,0x00
000338  00000000          DCB      0x00,0x00,0x00,0x00
00033c  00000000          DCB      0x00,0x00,0x00,0x00
000340  00000000          DCB      0x00,0x00,0x00,0x00
000344  00000000          DCB      0x00,0x00,0x00,0x00
000348  00000000          DCB      0x00,0x00,0x00,0x00
00034c  00000000          DCB      0x00,0x00,0x00,0x00
000350  00000000          DCB      0x00,0x00,0x00,0x00
000354  00000000          DCB      0x00,0x00,0x00,0x00
000358  00000000          DCB      0x00,0x00,0x00,0x00
00035c  00000000          DCB      0x00,0x00,0x00,0x00
000360  00000000          DCB      0x00,0x00,0x00,0x00
000364  00000000          DCB      0x00,0x00,0x00,0x00
000368  00000000          DCB      0x00,0x00,0x00,0x00
00036c  00000000          DCB      0x00,0x00,0x00,0x00
000370  00000000          DCB      0x00,0x00,0x00,0x00
000374  00000000          DCB      0x00,0x00,0x00,0x00
000378  00000000          DCB      0x00,0x00,0x00,0x00
00037c  00000000          DCB      0x00,0x00,0x00,0x00
000380  00000000          DCB      0x00,0x00,0x00,0x00
000384  00000000          DCB      0x00,0x00,0x00,0x00
000388  00000000          DCB      0x00,0x00,0x00,0x00
00038c  00000000          DCB      0x00,0x00,0x00,0x00
000390  00000000          DCB      0x00,0x00,0x00,0x00
000394  00000000          DCB      0x00,0x00,0x00,0x00
000398  00000000          DCB      0x00,0x00,0x00,0x00
00039c  00000000          DCB      0x00,0x00,0x00,0x00
0003a0  00000000          DCB      0x00,0x00,0x00,0x00
0003a4  00000000          DCB      0x00,0x00,0x00,0x00
0003a8  00000000          DCB      0x00,0x00,0x00,0x00
0003ac  00000000          DCB      0x00,0x00,0x00,0x00
0003b0  00000000          DCB      0x00,0x00,0x00,0x00
0003b4  00000000          DCB      0x00,0x00,0x00,0x00
0003b8  00000000          DCB      0x00,0x00,0x00,0x00
0003bc  00000000          DCB      0x00,0x00,0x00,0x00
0003c0  00000000          DCB      0x00,0x00,0x00,0x00
0003c4  00000000          DCB      0x00,0x00,0x00,0x00
0003c8  00000000          DCB      0x00,0x00,0x00,0x00
0003cc  00000000          DCB      0x00,0x00,0x00,0x00
0003d0  00000000          DCB      0x00,0x00,0x00,0x00
0003d4  00000000          DCB      0x00,0x00,0x00,0x00
0003d8  00000000          DCB      0x00,0x00,0x00,0x00
0003dc  00000000          DCB      0x00,0x00,0x00,0x00
0003e0  00000000          DCB      0x00,0x00,0x00,0x00
0003e4  00000000          DCB      0x00,0x00,0x00,0x00
0003e8  00000000          DCB      0x00,0x00,0x00,0x00
0003ec  00000000          DCB      0x00,0x00,0x00,0x00
0003f0  00000000          DCB      0x00,0x00,0x00,0x00
0003f4  00000000          DCB      0x00,0x00,0x00,0x00
0003f8  00000000          DCB      0x00,0x00,0x00,0x00
0003fc  00000000          DCB      0x00,0x00,0x00,0x00
000400  00000000          DCB      0x00,0x00,0x00,0x00
000404  00000000          DCB      0x00,0x00,0x00,0x00
000408  00000000          DCB      0x00,0x00,0x00,0x00
00040c  00000000          DCB      0x00,0x00,0x00,0x00
000410  00000000          DCB      0x00,0x00,0x00,0x00
000414  00000000          DCB      0x00,0x00,0x00,0x00
000418  00000000          DCB      0x00,0x00,0x00,0x00
00041c  00000000          DCB      0x00,0x00,0x00,0x00
000420  00000000          DCB      0x00,0x00,0x00,0x00
000424  00000000          DCB      0x00,0x00,0x00,0x00
000428  00000000          DCB      0x00,0x00,0x00,0x00
00042c  00000000          DCB      0x00,0x00,0x00,0x00
000430  00000000          DCB      0x00,0x00,0x00,0x00
000434  00000000          DCB      0x00,0x00,0x00,0x00
000438  00000000          DCB      0x00,0x00,0x00,0x00
00043c  00000000          DCB      0x00,0x00,0x00,0x00
000440  00000000          DCB      0x00,0x00,0x00,0x00
000444  00000000          DCB      0x00,0x00,0x00,0x00
000448  00000000          DCB      0x00,0x00,0x00,0x00
00044c  00000000          DCB      0x00,0x00,0x00,0x00
000450  00000000          DCB      0x00,0x00,0x00,0x00
000454  00000000          DCB      0x00,0x00,0x00,0x00
000458  00000000          DCB      0x00,0x00,0x00,0x00
00045c  00000000          DCB      0x00,0x00,0x00,0x00
000460  00000000          DCB      0x00,0x00,0x00,0x00
000464  00000000          DCB      0x00,0x00,0x00,0x00
000468  00000000          DCB      0x00,0x00,0x00,0x00
00046c  00000000          DCB      0x00,0x00,0x00,0x00
000470  00000000          DCB      0x00,0x00,0x00,0x00
000474  00000000          DCB      0x00,0x00,0x00,0x00
000478  00000000          DCB      0x00,0x00,0x00,0x00
00047c  00000000          DCB      0x00,0x00,0x00,0x00
000480  00000609          DCB      0x00,0x00,0x06,0x09
000484  09060000          DCB      0x09,0x06,0x00,0x00
000488  00000000          DCB      0x00,0x00,0x00,0x00
00048c  00000000          DCB      0x00,0x00,0x00,0x00
000490  00000000          DCB      0x00,0x00,0x00,0x00
000494  00000000          DCB      0x00,0x00,0x00,0x00
000498  00000000          DCB      0x00,0x00,0x00,0x00
00049c  00000000          DCB      0x00,0x00,0x00,0x00
0004a0  00000000          DCB      0x00,0x00,0x00,0x00
0004a4  00000000          DCB      0x00,0x00,0x00,0x00
0004a8  00000000          DCB      0x00,0x00,0x00,0x00
0004ac  00000000          DCB      0x00,0x00,0x00,0x00
0004b0  00000000          DCB      0x00,0x00,0x00,0x00
0004b4  00000000          DCB      0x00,0x00,0x00,0x00
0004b8  00000000          DCB      0x00,0x00,0x00,0x00
0004bc  00000000          DCB      0x00,0x00,0x00,0x00
0004c0  00000000          DCB      0x00,0x00,0x00,0x00
0004c4  00000000          DCB      0x00,0x00,0x00,0x00
0004c8  00000000          DCB      0x00,0x00,0x00,0x00
0004cc  00000000          DCB      0x00,0x00,0x00,0x00
0004d0  00000000          DCB      0x00,0x00,0x00,0x00
0004d4  00000000          DCB      0x00,0x00,0x00,0x00
0004d8  00000000          DCB      0x00,0x00,0x00,0x00
0004dc  00000000          DCB      0x00,0x00,0x00,0x00
0004e0  00000000          DCB      0x00,0x00,0x00,0x00
0004e4  00000000          DCB      0x00,0x00,0x00,0x00
0004e8  00000000          DCB      0x00,0x00,0x00,0x00
0004ec  00000000          DCB      0x00,0x00,0x00,0x00
0004f0  00000000          DCB      0x00,0x00,0x00,0x00
0004f4  00000000          DCB      0x00,0x00,0x00,0x00
0004f8  00000000          DCB      0x00,0x00,0x00,0x00
0004fc  00000000          DCB      0x00,0x00,0x00,0x00
000500  7c7e1313          DCB      0x7c,0x7e,0x13,0x13
000504  7e7c0000          DCB      0x7e,0x7c,0x00,0x00
000508  417f7f49          DCB      0x41,0x7f,0x7f,0x49
00050c  49793300          DCB      0x49,0x79,0x33,0x00
000510  417f7f49          DCB      0x41,0x7f,0x7f,0x49
000514  497f3600          DCB      0x49,0x7f,0x36,0x00
000518  417f7f41          DCB      0x41,0x7f,0x7f,0x41
00051c  01030300          DCB      0x01,0x03,0x03,0x00
000520  787e3733          DCB      0x78,0x7e,0x37,0x33
000524  377e7800          DCB      0x37,0x7e,0x78,0x00
000528  417f7f49          DCB      0x41,0x7f,0x7f,0x49
00052c  5d416300          DCB      0x5d,0x41,0x63,0x00
000530  63147f7f          DCB      0x63,0x14,0x7f,0x7f
000534  14630000          DCB      0x14,0x63,0x00,0x00
000538  63634949          DCB      0x63,0x63,0x49,0x49
00053c  6b7f3600          DCB      0x6b,0x7f,0x36,0x00
000540  7f7f3018          DCB      0x7f,0x7f,0x30,0x18
000544  0c7f7f00          DCB      0x0c,0x7f,0x7f,0x00
000548  7f7f301b          DCB      0x7f,0x7f,0x30,0x1b
00054c  0c7f7f00          DCB      0x0c,0x7f,0x7f,0x00
000550  417f7f08          DCB      0x41,0x7f,0x7f,0x08
000554  1c776300          DCB      0x1c,0x77,0x63,0x00
000558  607f1f03          DCB      0x60,0x7f,0x1f,0x03
00055c  7f7f4100          DCB      0x7f,0x7f,0x41,0x00
000560  7f7f0e1c          DCB      0x7f,0x7f,0x0e,0x1c
000564  0e7f7f00          DCB      0x0e,0x7f,0x7f,0x00
000568  7f7f0808          DCB      0x7f,0x7f,0x08,0x08
00056c  7f7f0000          DCB      0x7f,0x7f,0x00,0x00
000570  1c3e6341          DCB      0x1c,0x3e,0x63,0x41
000574  633e1c00          DCB      0x63,0x3e,0x1c,0x00
000578  7f7f0303          DCB      0x7f,0x7f,0x03,0x03
00057c  7f7f0000          DCB      0x7f,0x7f,0x00,0x00
000580  417f7f49          DCB      0x41,0x7f,0x7f,0x49
000584  090f0600          DCB      0x09,0x0f,0x06,0x00
000588  1c3e6341          DCB      0x1c,0x3e,0x63,0x41
00058c  41632200          DCB      0x41,0x63,0x22,0x00
000590  03417f7f          DCB      0x03,0x41,0x7f,0x7f
000594  41030000          DCB      0x41,0x03,0x00,0x00
000598  63673c18          DCB      0x63,0x67,0x3c,0x18
00059c  0c070300          DCB      0x0c,0x07,0x03,0x00
0005a0  1e527f7f          DCB      0x1e,0x52,0x7f,0x7f
0005a4  521e0000          DCB      0x52,0x1e,0x00,0x00
0005a8  63673c18          DCB      0x63,0x67,0x3c,0x18
0005ac  3c676300          DCB      0x3c,0x67,0x63,0x00
0005b0  3f3f2020          DCB      0x3f,0x3f,0x20,0x20
0005b4  3f3f6000          DCB      0x3f,0x3f,0x60,0x00
0005b8  0f1f1858          DCB      0x0f,0x1f,0x18,0x58
0005bc  7f7f4000          DCB      0x7f,0x7f,0x40,0x00
0005c0  7f7f607f          DCB      0x7f,0x7f,0x60,0x7f
0005c4  607f7f00          DCB      0x60,0x7f,0x7f,0x00
0005c8  3f203f3f          DCB      0x3f,0x20,0x3f,0x3f
0005cc  203f6000          DCB      0x20,0x3f,0x60,0x00
0005d0  017f7f48          DCB      0x01,0x7f,0x7f,0x48
0005d4  48783000          DCB      0x48,0x78,0x30,0x00
0005d8  7f7f4848          DCB      0x7f,0x7f,0x48,0x48
0005dc  78007f00          DCB      0x78,0x00,0x7f,0x00
0005e0  7f7f4848          DCB      0x7f,0x7f,0x48,0x48
0005e4  78300000          DCB      0x78,0x30,0x00,0x00
0005e8  36634949          DCB      0x36,0x63,0x49,0x49
0005ec  6b7f3e00          DCB      0x6b,0x7f,0x3e,0x00
0005f0  7f083e63          DCB      0x7f,0x08,0x3e,0x63
0005f4  41633e00          DCB      0x41,0x63,0x3e,0x00
0005f8  667f1909          DCB      0x66,0x7f,0x19,0x09
0005fc  7f7f4100          DCB      0x7f,0x7f,0x41,0x00
000600  20745454          DCB      0x20,0x74,0x54,0x54
000604  3c784000          DCB      0x3c,0x78,0x40,0x00
000608  307c4a4a          DCB      0x30,0x7c,0x4a,0x4a
00060c  7a310000          DCB      0x7a,0x31,0x00,0x00
000610  447c7c54          DCB      0x44,0x7c,0x7c,0x54
000614  54280000          DCB      0x54,0x28,0x00,0x00
000618  447c7c44          DCB      0x44,0x7c,0x7c,0x44
00061c  0c080000          DCB      0x0c,0x08,0x00,0x00
000620  60383434          DCB      0x60,0x38,0x34,0x34
000624  38600000          DCB      0x38,0x60,0x00,0x00
000628  387c5454          DCB      0x38,0x7c,0x54,0x54
00062c  5c180000          DCB      0x5c,0x18,0x00,0x00
000630  44287c7c          DCB      0x44,0x28,0x7c,0x7c
000634  28440000          DCB      0x28,0x44,0x00,0x00
000638  2e445454          DCB      0x2e,0x44,0x54,0x54
00063c  7c280000          DCB      0x7c,0x28,0x00,0x00
000640  7c7c2010          DCB      0x7c,0x7c,0x20,0x10
000644  7c7c0000          DCB      0x7c,0x7c,0x00,0x00
000648  7c7c2111          DCB      0x7c,0x7c,0x21,0x11
00064c  7c7c0000          DCB      0x7c,0x7c,0x00,0x00
000650  447c7c10          DCB      0x44,0x7c,0x7c,0x10
000654  386c4400          DCB      0x38,0x6c,0x44,0x00
000658  40780c04          DCB      0x40,0x78,0x0c,0x04
00065c  7c7c4000          DCB      0x7c,0x7c,0x40,0x00
000660  787c0810          DCB      0x78,0x7c,0x08,0x10
000664  087c7800          DCB      0x08,0x7c,0x78,0x00
000668  7c7c1010          DCB      0x7c,0x7c,0x10,0x10
00066c  7c7c0000          DCB      0x7c,0x7c,0x00,0x00
000670  387c4444          DCB      0x38,0x7c,0x44,0x44
000674  7c380000          DCB      0x7c,0x38,0x00,0x00
000678  7c7c0404          DCB      0x7c,0x7c,0x04,0x04
00067c  7c7c0000          DCB      0x7c,0x7c,0x00,0x00
000680  44787c54          DCB      0x44,0x78,0x7c,0x54
000684  141c0800          DCB      0x14,0x1c,0x08,0x00
000688  387c4444          DCB      0x38,0x7c,0x44,0x44
00068c  6c280000          DCB      0x6c,0x28,0x00,0x00
000690  08447c7c          DCB      0x08,0x44,0x7c,0x7c
000694  44080000          DCB      0x44,0x08,0x00,0x00
000698  4c5c5050          DCB      0x4c,0x5c,0x50,0x50
00069c  7c3c0000          DCB      0x7c,0x3c,0x00,0x00
0006a0  08547c7c          DCB      0x08,0x54,0x7c,0x7c
0006a4  54080000          DCB      0x54,0x08,0x00,0x00
0006a8  446c3810          DCB      0x44,0x6c,0x38,0x10
0006ac  386c4400          DCB      0x38,0x6c,0x44,0x00
0006b0  3c3c203c          DCB      0x3c,0x3c,0x20,0x3c
0006b4  3c600000          DCB      0x3c,0x60,0x00,0x00
0006b8  1c10507c          DCB      0x1c,0x10,0x50,0x7c
0006bc  7c400000          DCB      0x7c,0x40,0x00,0x00
0006c0  7c407c40          DCB      0x7c,0x40,0x7c,0x40
0006c4  7c000000          DCB      0x7c,0x00,0x00,0x00
0006c8  3c203c20          DCB      0x3c,0x20,0x3c,0x20
0006cc  3c600000          DCB      0x3c,0x60,0x00,0x00
0006d0  443c5050          DCB      0x44,0x3c,0x50,0x50
0006d4  70200000          DCB      0x70,0x20,0x00,0x00
0006d8  403c5050          DCB      0x40,0x3c,0x50,0x50
0006dc  20007c00          DCB      0x20,0x00,0x7c,0x00
0006e0  403c5050          DCB      0x40,0x3c,0x50,0x50
0006e4  50200000          DCB      0x50,0x20,0x00,0x00
0006e8  28445454          DCB      0x28,0x44,0x54,0x54
0006ec  38000000          DCB      0x38,0x00,0x00,0x00
0006f0  7c103844          DCB      0x7c,0x10,0x38,0x44
0006f4  44380000          DCB      0x44,0x38,0x00,0x00
0006f8  40281414          DCB      0x40,0x28,0x14,0x14
0006fc  7c7c0000          DCB      0x7c,0x7c,0x00,0x00
                  init_image
000700  fefefefe          DCB      0xfe,0xfe,0xfe,0xfe
000704  fe7e1e06          DCB      0xfe,0x7e,0x1e,0x06
000708  061e7efe          DCB      0x06,0x1e,0x7e,0xfe
00070c  fefefefe          DCB      0xfe,0xfe,0xfe,0xfe
000710  7f5f4741          DCB      0x7f,0x5f,0x47,0x41
000714  7c787060          DCB      0x7c,0x78,0x70,0x60
000718  6070787c          DCB      0x60,0x70,0x78,0x7c
00071c  41475f7f          DCB      0x41,0x47,0x5f,0x7f

                          AREA ||.conststring||, DATA, READONLY, MERGE=1, STRINGS, ALIGN=2

000000  202020c0          DCB      "   ",192,206," """,204,232,235,224,237,228,240,"""",0
000004  ce2022cc
000008  e8ebe0ed
00000c  e4f02200

                          AREA ||.data||, DATA, ALIGN=2

                  init_string
                          DCD      ||.conststring||

;*** Start embedded assembler ***

#line 1 "MLT\\mlt_lcd.c"
	AREA ||.rev16_text||, CODE
	THUMB
	EXPORT |__asm___9_mlt_lcd_c_4a31e541____REV16|
#line 467 "C:\\Users\\AN-Mi\\AppData\\Local\\Arm\\Packs\\ARM\\CMSIS\\5.5.1\\CMSIS\\Core\\Include\\cmsis_armcc.h"
|__asm___9_mlt_lcd_c_4a31e541____REV16| PROC
#line 468

 rev16 r0, r0
 bx lr
	ENDP
	AREA ||.revsh_text||, CODE
	THUMB
	EXPORT |__asm___9_mlt_lcd_c_4a31e541____REVSH|
#line 482
|__asm___9_mlt_lcd_c_4a31e541____REVSH| PROC
#line 483

 revsh r0, r0
 bx lr
	ENDP
	AREA ||.rrx_text||, CODE
	THUMB
	EXPORT |__asm___9_mlt_lcd_c_4a31e541____RRX|
#line 669
|__asm___9_mlt_lcd_c_4a31e541____RRX| PROC
#line 670

 rrx r0, r0
 bx lr
	ENDP

;*** End   embedded assembler ***
