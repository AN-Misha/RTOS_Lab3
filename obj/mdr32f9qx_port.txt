; generated by Component: ARM Compiler 5.06 update 6 (build 750) Tool: ArmCC [4d3637]
; commandline ArmCC [--list --split_sections --debug -c --asm --interleave -o.\obj\mdr32f9qx_port.o --asm_dir=.\obj\ --list_dir=.\obj\ --depend=.\obj\mdr32f9qx_port.d --cpu=Cortex-M3 --apcs=interwork -O0 --diag_suppress=9931 -I"..\CAN TEST" -I.\RTE -I.\RTE\Device -I.\RTE\Device\MDR1986BE92 -I.\rtos -I.\rtos\include -I.\RTE\Device\MDR1986BE92 -I.\RTE\_Target_1 -IC:\Users\AN-Mi\AppData\Local\Arm\Packs\ARM\CMSIS\5.5.1\CMSIS\Core\Include -IC:\Users\AN-Mi\AppData\Local\Arm\Packs\ARM\CMSIS\5.5.1\CMSIS\DSP\Include -IC:\Users\AN-Mi\AppData\Local\Arm\Packs\Keil\MDR1986BExx\1.51\Config -IC:\Users\AN-Mi\AppData\Local\Arm\Packs\Keil\MDR1986BExx\1.51\Libraries\CMSIS\CM3\CoreSupport -IC:\Users\AN-Mi\AppData\Local\Arm\Packs\Keil\MDR1986BExx\1.51\Libraries\CMSIS\CM3\DeviceSupport\MDR32F9Qx\inc -IC:\Users\AN-Mi\AppData\Local\Arm\Packs\Keil\MDR1986BExx\1.51\Libraries\MDR32F9Qx_StdPeriph_Driver\inc -D__MICROLIB -D__UVISION_VERSION=527 -D_RTE_ -DUSE_MDR32F9Q2_Rev1 --omf_browse=.\obj\mdr32f9qx_port.crf C:\Users\AN-Mi\AppData\Local\Arm\Packs\Keil\MDR1986BExx\1.51\Libraries\MDR32F9Qx_StdPeriph_Driver\src\MDR32F9Qx_port.c]
                          THUMB

                          AREA ||i.PORT_DeInit||, CODE, READONLY, ALIGN=1

                  PORT_DeInit PROC
;;;26       */
;;;27     void PORT_DeInit(MDR_PORT_TypeDef* PORTx)
000000  2100              MOVS     r1,#0
;;;28     {
;;;29       /* Check the parameters */
;;;30       assert_param(IS_PORT_ALL_PERIPH(PORTx));
;;;31     
;;;32       PORTx->ANALOG = 0;
000002  60c1              STR      r1,[r0,#0xc]
;;;33       PORTx->PULL = 0;
000004  6101              STR      r1,[r0,#0x10]
;;;34       PORTx->OE = 0;
000006  6041              STR      r1,[r0,#4]
;;;35       PORTx->RXTX = 0;
000008  6001              STR      r1,[r0,#0]
;;;36       PORTx->FUNC = 0;
00000a  6081              STR      r1,[r0,#8]
;;;37       PORTx->PD = 0;
00000c  6141              STR      r1,[r0,#0x14]
;;;38       PORTx->PWR = 0;
00000e  6181              STR      r1,[r0,#0x18]
;;;39       PORTx->GFEN = 0;
000010  61c1              STR      r1,[r0,#0x1c]
;;;40     }
000012  4770              BX       lr
;;;41     
                          ENDP


                          AREA ||i.PORT_Init||, CODE, READONLY, ALIGN=2

                  PORT_Init PROC
;;;50       */
;;;51     void PORT_Init(MDR_PORT_TypeDef* PORTx, const PORT_InitTypeDef* PORT_InitStruct)
000000  e92d4ffe          PUSH     {r1-r11,lr}
;;;52     {
;;;53       uint32_t tmpreg_OE;
;;;54       uint32_t tmpreg_FUNC;
;;;55       uint32_t tmpreg_ANALOG;
;;;56       uint32_t tmpreg_PULL;
;;;57       uint32_t tmpreg_PD;
;;;58       uint32_t tmpreg_PWR;
;;;59       uint32_t tmpreg_GFEN;
;;;60       uint32_t portpin, pos, mask_s, mask_l, mask_d;
;;;61     
;;;62       /* Check the parameters */
;;;63       assert_param(IS_PORT_ALL_PERIPH(PORTx));
;;;64       assert_param(IS_PORT_PIN(PORT_InitStruct->PORT_Pin));
;;;65       assert_param(IS_PORT_OE(PORT_InitStruct->PORT_OE));
;;;66       assert_param(IS_PORT_PULL_UP(PORT_InitStruct->PORT_PULL_UP));
;;;67       assert_param(IS_PORT_PULL_DOWN(PORT_InitStruct->PORT_PULL_DOWN));
;;;68       assert_param(IS_PORT_PD_SHM(PORT_InitStruct->PORT_PD_SHM));
;;;69       assert_param(IS_PORT_PD(PORT_InitStruct->PORT_PD));
;;;70       assert_param(IS_PORT_GFEN(PORT_InitStruct->PORT_GFEN));
;;;71       assert_param(IS_PORT_FUNC(PORT_InitStruct->PORT_FUNC));
;;;72       assert_param(IS_PORT_SPEED(PORT_InitStruct->PORT_SPEED));
;;;73       assert_param(IS_PORT_MODE(PORT_InitStruct->PORT_MODE));
;;;74     
;;;75       /* Get current PORT register values */
;;;76       tmpreg_OE     = PORTx->OE;
000004  6847              LDR      r7,[r0,#4]
;;;77       tmpreg_FUNC   = PORTx->FUNC;
000006  f8d0c008          LDR      r12,[r0,#8]
;;;78       tmpreg_ANALOG = PORTx->ANALOG;
00000a  f8d0800c          LDR      r8,[r0,#0xc]
;;;79       tmpreg_PULL   = PORTx->PULL;
00000e  f8d09010          LDR      r9,[r0,#0x10]
;;;80       tmpreg_PD     = PORTx->PD;
000012  f8d0a014          LDR      r10,[r0,#0x14]
000016  f8cda008          STR      r10,[sp,#8]
;;;81       tmpreg_PWR    = PORTx->PWR;
00001a  f8d0a018          LDR      r10,[r0,#0x18]
00001e  f8cda004          STR      r10,[sp,#4]
;;;82       tmpreg_GFEN   = PORTx->GFEN;
000022  f8d0a01c          LDR      r10,[r0,#0x1c]
000026  f8cda000          STR      r10,[sp,#0]
;;;83     
;;;84       /* Form new values */
;;;85       pos = 0;
00002a  2200              MOVS     r2,#0
;;;86       mask_s = 0x0001;
00002c  2301              MOVS     r3,#1
;;;87       mask_l = 0x00000003;
00002e  2503              MOVS     r5,#3
;;;88       mask_d = 0x00010001;
000030  f04f1601          MOV      r6,#0x10001
;;;89       for (portpin = PORT_InitStruct->PORT_Pin; portpin; portpin >>= 1)
000034  880c              LDRH     r4,[r1,#0]
000036  e05f              B        |L2.248|
                  |L2.56|
;;;90       {
;;;91         if (portpin & 0x1)
000038  f0040a01          AND      r10,r4,#1
00003c  f1ba0f00          CMP      r10,#0
000040  d055              BEQ      |L2.238|
;;;92         {
;;;93           tmpreg_OE     = (tmpreg_OE     & ~mask_s) | (PORT_InitStruct->PORT_OE        <<  pos);
000042  ea270a03          BIC      r10,r7,r3
000046  f891b002          LDRB     r11,[r1,#2]
00004a  fa0bfb02          LSL      r11,r11,r2
00004e  ea4a070b          ORR      r7,r10,r11
;;;94           tmpreg_FUNC   = (tmpreg_FUNC   & ~mask_l) | (PORT_InitStruct->PORT_FUNC      << (pos*2));
000052  f891a008          LDRB     r10,[r1,#8]
000056  ea4f0b42          LSL      r11,r2,#1
00005a  fa0afa0b          LSL      r10,r10,r11
00005e  ea2c0b05          BIC      r11,r12,r5
000062  ea4a0c0b          ORR      r12,r10,r11
;;;95           tmpreg_ANALOG = (tmpreg_ANALOG & ~mask_s) | (PORT_InitStruct->PORT_MODE      <<  pos);
000066  ea280a03          BIC      r10,r8,r3
00006a  f891b00a          LDRB     r11,[r1,#0xa]
00006e  fa0bfb02          LSL      r11,r11,r2
000072  ea4a080b          ORR      r8,r10,r11
;;;96           tmpreg_PULL   = (tmpreg_PULL   & ~mask_d) | (PORT_InitStruct->PORT_PULL_UP   << (pos + 16))
000076  ea290a06          BIC      r10,r9,r6
00007a  f891b003          LDRB     r11,[r1,#3]
00007e  f1020e10          ADD      lr,r2,#0x10
000082  fa0bfb0e          LSL      r11,r11,lr
000086  ea4a0a0b          ORR      r10,r10,r11
00008a  f891b004          LDRB     r11,[r1,#4]
00008e  fa0bfb02          LSL      r11,r11,r2
000092  ea4a090b          ORR      r9,r10,r11
;;;97                                                     | (PORT_InitStruct->PORT_PULL_DOWN <<  pos);
;;;98           tmpreg_PD     = (tmpreg_PD     & ~mask_d) | (PORT_InitStruct->PORT_PD_SHM    << (pos + 16))
000096  f8dda008          LDR      r10,[sp,#8]
00009a  ea2a0a06          BIC      r10,r10,r6
00009e  f891b005          LDRB     r11,[r1,#5]
0000a2  fa0bfb0e          LSL      r11,r11,lr
0000a6  ea4a0a0b          ORR      r10,r10,r11
0000aa  f891b006          LDRB     r11,[r1,#6]
0000ae  fa0bfb02          LSL      r11,r11,r2
0000b2  ea4a0a0b          ORR      r10,r10,r11
0000b6  f8cda008          STR      r10,[sp,#8]
;;;99                                                     | (PORT_InitStruct->PORT_PD        <<  pos);
;;;100          tmpreg_PWR    = (tmpreg_PWR    & ~mask_l) | (PORT_InitStruct->PORT_SPEED     << (pos*2));
0000ba  f891a009          LDRB     r10,[r1,#9]
0000be  ea4f0b42          LSL      r11,r2,#1
0000c2  fa0afa0b          LSL      r10,r10,r11
0000c6  f8ddb004          LDR      r11,[sp,#4]
0000ca  ea2b0b05          BIC      r11,r11,r5
0000ce  ea4a0a0b          ORR      r10,r10,r11
0000d2  f8cda004          STR      r10,[sp,#4]
;;;101          tmpreg_GFEN   = (tmpreg_GFEN   & ~mask_s) | (PORT_InitStruct->PORT_GFEN      <<  pos);
0000d6  f8dda000          LDR      r10,[sp,#0]
0000da  ea2a0a03          BIC      r10,r10,r3
0000de  f891b007          LDRB     r11,[r1,#7]
0000e2  fa0bfb02          LSL      r11,r11,r2
0000e6  ea4a0a0b          ORR      r10,r10,r11
0000ea  f8cda000          STR      r10,[sp,#0]
                  |L2.238|
;;;102        }
;;;103        mask_s <<= 1;
0000ee  005b              LSLS     r3,r3,#1
;;;104        mask_l <<= 2;
0000f0  00ad              LSLS     r5,r5,#2
;;;105        mask_d <<= 1;
0000f2  0076              LSLS     r6,r6,#1
;;;106        pos++;
0000f4  1c52              ADDS     r2,r2,#1
0000f6  0864              LSRS     r4,r4,#1              ;89
                  |L2.248|
0000f8  2c00              CMP      r4,#0                 ;89
0000fa  d19d              BNE      |L2.56|
;;;107      }
;;;108    #if defined  (USE_MDR1986VE9x) || defined (USE_MDR1901VC1T)
;;;109      /* Configure PORT registers with new values */
;;;110      PORTx->OE     = tmpreg_OE & (~JTAG_PINS(PORTx));
0000fc  f8dfa0c4          LDR      r10,|L2.452|
000100  4550              CMP      r0,r10
000102  d102              BNE      |L2.266|
000104  f04f0a1f          MOV      r10,#0x1f
000108  e001              B        |L2.270|
                  |L2.266|
00010a  f04f0a00          MOV      r10,#0
                  |L2.270|
00010e  ea270a0a          BIC      r10,r7,r10
000112  f8c0a004          STR      r10,[r0,#4]
;;;111      PORTx->FUNC   = tmpreg_FUNC & (~JTAG_PINS(PORTx));
000116  f8dfa0ac          LDR      r10,|L2.452|
00011a  4550              CMP      r0,r10
00011c  d102              BNE      |L2.292|
00011e  f04f0a1f          MOV      r10,#0x1f
000122  e001              B        |L2.296|
                  |L2.292|
000124  f04f0a00          MOV      r10,#0
                  |L2.296|
000128  ea2c0a0a          BIC      r10,r12,r10
00012c  f8c0a008          STR      r10,[r0,#8]
;;;112      PORTx->ANALOG = tmpreg_ANALOG & (~JTAG_PINS(PORTx));
000130  f8dfa090          LDR      r10,|L2.452|
000134  4550              CMP      r0,r10
000136  d102              BNE      |L2.318|
000138  f04f0a1f          MOV      r10,#0x1f
00013c  e001              B        |L2.322|
                  |L2.318|
00013e  f04f0a00          MOV      r10,#0
                  |L2.322|
000142  ea280a0a          BIC      r10,r8,r10
000146  f8c0a00c          STR      r10,[r0,#0xc]
;;;113      PORTx->PULL   = tmpreg_PULL & (~JTAG_PINS(PORTx));
00014a  f8dfa078          LDR      r10,|L2.452|
00014e  4550              CMP      r0,r10
000150  d102              BNE      |L2.344|
000152  f04f0a1f          MOV      r10,#0x1f
000156  e001              B        |L2.348|
                  |L2.344|
000158  f04f0a00          MOV      r10,#0
                  |L2.348|
00015c  ea290a0a          BIC      r10,r9,r10
000160  f8c0a010          STR      r10,[r0,#0x10]
;;;114      PORTx->PD     = tmpreg_PD & (~JTAG_PINS(PORTx));
000164  f8dfa05c          LDR      r10,|L2.452|
000168  4550              CMP      r0,r10
00016a  d102              BNE      |L2.370|
00016c  f04f0b1f          MOV      r11,#0x1f
000170  e001              B        |L2.374|
                  |L2.370|
000172  f04f0b00          MOV      r11,#0
                  |L2.374|
000176  f8dda008          LDR      r10,[sp,#8]
00017a  ea2a0a0b          BIC      r10,r10,r11
00017e  f8c0a014          STR      r10,[r0,#0x14]
;;;115      PORTx->PWR    = tmpreg_PWR & (~JTAG_PINS(PORTx));
000182  f8dfa040          LDR      r10,|L2.452|
000186  4550              CMP      r0,r10
000188  d102              BNE      |L2.400|
00018a  f04f0b1f          MOV      r11,#0x1f
00018e  e001              B        |L2.404|
                  |L2.400|
000190  f04f0b00          MOV      r11,#0
                  |L2.404|
000194  f8dda004          LDR      r10,[sp,#4]
000198  ea2a0a0b          BIC      r10,r10,r11
00019c  f8c0a018          STR      r10,[r0,#0x18]
;;;116      PORTx->GFEN   = tmpreg_GFEN & (~JTAG_PINS(PORTx));
0001a0  f8dfa020          LDR      r10,|L2.452|
0001a4  4550              CMP      r0,r10
0001a6  d102              BNE      |L2.430|
0001a8  f04f0b1f          MOV      r11,#0x1f
0001ac  e001              B        |L2.434|
                  |L2.430|
0001ae  f04f0b00          MOV      r11,#0
                  |L2.434|
0001b2  f8dda000          LDR      r10,[sp,#0]
0001b6  ea2a0a0b          BIC      r10,r10,r11
0001ba  f8c0a01c          STR      r10,[r0,#0x1c]
;;;117    #elif defined ( USE_MDR1986VE3 ) || defined (USE_MDR1986VE1T)
;;;118      /* Configure PORT registers with new values */
;;;119      PORTx->OE     = tmpreg_OE;
;;;120      PORTx->FUNC   = tmpreg_FUNC;
;;;121      PORTx->ANALOG = tmpreg_ANALOG;
;;;122      PORTx->PULL   = tmpreg_PULL;
;;;123      PORTx->PD     = tmpreg_PD;
;;;124      PORTx->PWR    = tmpreg_PWR;
;;;125      PORTx->GFEN   = tmpreg_GFEN;
;;;126    
;;;127    #endif
;;;128    
;;;129    }
0001be  e8bd8ffe          POP      {r1-r11,pc}
;;;130    
                          ENDP

0001c2  0000              DCW      0x0000
                  |L2.452|
                          DCD      0x400c0000

                          AREA ||i.PORT_ReadInputData||, CODE, READONLY, ALIGN=1

                  PORT_ReadInputData PROC
;;;182      */
;;;183    uint32_t PORT_ReadInputData(MDR_PORT_TypeDef* PORTx)
000000  4601              MOV      r1,r0
;;;184    {
;;;185      /* Check the parameters */
;;;186      assert_param(IS_PORT_ALL_PERIPH(PORTx));
;;;187    
;;;188      return (PORTx->RXTX);
000002  6808              LDR      r0,[r1,#0]
;;;189    }
000004  4770              BX       lr
;;;190    
                          ENDP


                          AREA ||i.PORT_ReadInputDataBit||, CODE, READONLY, ALIGN=1

                  PORT_ReadInputDataBit PROC
;;;158      */
;;;159    uint8_t PORT_ReadInputDataBit(MDR_PORT_TypeDef* PORTx, uint32_t PORT_Pin)
000000  4602              MOV      r2,r0
;;;160    {
;;;161      uint8_t bitstatus;
;;;162    
;;;163      /* Check the parameters */
;;;164      assert_param(IS_PORT_ALL_PERIPH(PORTx));
;;;165      assert_param(IS_GET_PORT_PIN(PORT_Pin));
;;;166    
;;;167      if ((PORTx->RXTX & PORT_Pin) != Bit_RESET)
000002  6813              LDR      r3,[r2,#0]
000004  400b              ANDS     r3,r3,r1
000006  b10b              CBZ      r3,|L4.12|
;;;168      {
;;;169        bitstatus = (uint8_t)Bit_SET;
000008  2001              MOVS     r0,#1
00000a  e000              B        |L4.14|
                  |L4.12|
;;;170      }
;;;171      else
;;;172      {
;;;173        bitstatus = (uint8_t)Bit_RESET;
00000c  2000              MOVS     r0,#0
                  |L4.14|
;;;174      }
;;;175      return bitstatus;
;;;176    }
00000e  4770              BX       lr
;;;177    
                          ENDP


                          AREA ||i.PORT_ResetBits||, CODE, READONLY, ALIGN=2

                  PORT_ResetBits PROC
;;;220      */
;;;221    void PORT_ResetBits(MDR_PORT_TypeDef* PORTx, uint32_t PORT_Pin)
000000  6802              LDR      r2,[r0,#0]
;;;222    {
;;;223      /* Check the parameters */
;;;224      assert_param(IS_PORT_ALL_PERIPH(PORTx));
;;;225      assert_param(IS_PORT_PIN(PORT_Pin));
;;;226      assert_param(IS_NOT_JTAG_PIN(PORTx, PORT_Pin));
;;;227    
;;;228    #if defined  (USE_MDR1986VE9x) || defined (USE_MDR1901VC1T)
;;;229      PORTx->RXTX &= ~(PORT_Pin | JTAG_PINS(PORTx));
000002  4b05              LDR      r3,|L5.24|
000004  4298              CMP      r0,r3
000006  d101              BNE      |L5.12|
000008  231f              MOVS     r3,#0x1f
00000a  e000              B        |L5.14|
                  |L5.12|
00000c  2300              MOVS     r3,#0
                  |L5.14|
00000e  430b              ORRS     r3,r3,r1
000010  439a              BICS     r2,r2,r3
000012  6002              STR      r2,[r0,#0]
;;;230    #endif
;;;231    
;;;232    #if defined ( USE_MDR1986VE3 ) || defined (USE_MDR1986VE1T)
;;;233      PORTx->CLRTX = PORT_Pin;
;;;234    #endif
;;;235    }
000014  4770              BX       lr
;;;236    
                          ENDP

000016  0000              DCW      0x0000
                  |L5.24|
                          DCD      0x400c0000

                          AREA ||i.PORT_SetBits||, CODE, READONLY, ALIGN=2

                  PORT_SetBits PROC
;;;197      */
;;;198    void PORT_SetBits ( MDR_PORT_TypeDef* PORTx, uint32_t PORT_Pin )
000000  6802              LDR      r2,[r0,#0]
;;;199    {
;;;200    	/* Check the parameters */
;;;201    	assert_param(IS_PORT_ALL_PERIPH(PORTx));
;;;202    	assert_param(IS_PORT_PIN(PORT_Pin));
;;;203    	assert_param(IS_NOT_JTAG_PIN(PORTx, PORT_Pin));
;;;204    
;;;205    #if defined  (USE_MDR1986VE9x) || defined (USE_MDR1901VC1T)
;;;206    	PORTx->RXTX = PORT_Pin | (PORTx->RXTX & (~JTAG_PINS(PORTx)));
000002  4b05              LDR      r3,|L6.24|
000004  4298              CMP      r0,r3
000006  d101              BNE      |L6.12|
000008  231f              MOVS     r3,#0x1f
00000a  e000              B        |L6.14|
                  |L6.12|
00000c  2300              MOVS     r3,#0
                  |L6.14|
00000e  439a              BICS     r2,r2,r3
000010  430a              ORRS     r2,r2,r1
000012  6002              STR      r2,[r0,#0]
;;;207    #endif
;;;208    
;;;209    #if defined ( USE_MDR1986VE3 ) || defined (USE_MDR1986VE1T)
;;;210    	PORTx->SETTX = PORT_Pin;
;;;211    #endif
;;;212    }
000014  4770              BX       lr
;;;213    
                          ENDP

000016  0000              DCW      0x0000
                  |L6.24|
                          DCD      0x400c0000

                          AREA ||i.PORT_StructInit||, CODE, READONLY, ALIGN=1

                  PORT_StructInit PROC
;;;136      */
;;;137    void PORT_StructInit(PORT_InitTypeDef* PORT_InitStruct)
000000  f64f71ff          MOV      r1,#0xffff
;;;138    {
;;;139      /* Reset PORT initialization structure parameters values */
;;;140      PORT_InitStruct->PORT_Pin        = PORT_Pin_All;
000004  8001              STRH     r1,[r0,#0]
;;;141      PORT_InitStruct->PORT_OE         = PORT_OE_IN;
000006  2100              MOVS     r1,#0
000008  7081              STRB     r1,[r0,#2]
;;;142      PORT_InitStruct->PORT_PULL_UP    = PORT_PULL_UP_OFF;
00000a  70c1              STRB     r1,[r0,#3]
;;;143      PORT_InitStruct->PORT_PULL_DOWN  = PORT_PULL_DOWN_OFF;
00000c  7101              STRB     r1,[r0,#4]
;;;144      PORT_InitStruct->PORT_PD_SHM     = PORT_PD_SHM_OFF;
00000e  7141              STRB     r1,[r0,#5]
;;;145      PORT_InitStruct->PORT_PD         = PORT_PD_DRIVER;
000010  7181              STRB     r1,[r0,#6]
;;;146      PORT_InitStruct->PORT_GFEN       = PORT_GFEN_OFF;
000012  71c1              STRB     r1,[r0,#7]
;;;147      PORT_InitStruct->PORT_FUNC       = PORT_FUNC_PORT;
000014  7201              STRB     r1,[r0,#8]
;;;148      PORT_InitStruct->PORT_SPEED      = PORT_OUTPUT_OFF;
000016  7241              STRB     r1,[r0,#9]
;;;149      PORT_InitStruct->PORT_MODE       = PORT_MODE_ANALOG;
000018  7281              STRB     r1,[r0,#0xa]
;;;150    }
00001a  4770              BX       lr
;;;151    
                          ENDP


                          AREA ||i.PORT_Write||, CODE, READONLY, ALIGN=2

                  PORT_Write PROC
;;;274      */
;;;275    void PORT_Write(MDR_PORT_TypeDef* PORTx, uint32_t PortVal)
000000  4a04              LDR      r2,|L8.20|
;;;276    {
;;;277      /* Check the parameters */
;;;278      assert_param(IS_PORT_ALL_PERIPH(PORTx));
;;;279      assert_param(IS_NOT_JTAG_PIN(PORTx, PortVal));
;;;280    
;;;281      PORTx->RXTX = PortVal & (~JTAG_PINS(PORTx));
000002  4290              CMP      r0,r2
000004  d101              BNE      |L8.10|
000006  221f              MOVS     r2,#0x1f
000008  e000              B        |L8.12|
                  |L8.10|
00000a  2200              MOVS     r2,#0
                  |L8.12|
00000c  ea210202          BIC      r2,r1,r2
000010  6002              STR      r2,[r0,#0]
;;;282    }
000012  4770              BX       lr
;;;283    
                          ENDP

                  |L8.20|
                          DCD      0x400c0000

                          AREA ||i.PORT_WriteBit||, CODE, READONLY, ALIGN=2

                  PORT_WriteBit PROC
;;;247      */
;;;248    void PORT_WriteBit(MDR_PORT_TypeDef* PORTx, uint32_t PORT_Pin, BitAction BitVal)
000000  b530              PUSH     {r4,r5,lr}
;;;249    {
000002  4613              MOV      r3,r2
;;;250      uint32_t portdata;
;;;251      /* Check the parameters */
;;;252      assert_param(IS_PORT_ALL_PERIPH(PORTx));
;;;253      assert_param(IS_GET_PORT_PIN(PORT_Pin));
;;;254      assert_param(IS_PORT_BIT_ACTION(BitVal));
;;;255      assert_param(IS_NOT_JTAG_PIN(PORTx, PORT_Pin));
;;;256    
;;;257      portdata = PORTx->RXTX & (~JTAG_PINS(PORTx));
000004  6804              LDR      r4,[r0,#0]
000006  4d08              LDR      r5,|L9.40|
000008  42a8              CMP      r0,r5
00000a  d101              BNE      |L9.16|
00000c  251f              MOVS     r5,#0x1f
00000e  e000              B        |L9.18|
                  |L9.16|
000010  2500              MOVS     r5,#0
                  |L9.18|
000012  ea240205          BIC      r2,r4,r5
;;;258      if (BitVal != Bit_RESET)
000016  b11b              CBZ      r3,|L9.32|
;;;259      {
;;;260        PORTx->RXTX = portdata | PORT_Pin;
000018  ea420401          ORR      r4,r2,r1
00001c  6004              STR      r4,[r0,#0]
00001e  e002              B        |L9.38|
                  |L9.32|
;;;261      }
;;;262      else
;;;263      {
;;;264        PORTx->RXTX = portdata & (~PORT_Pin);
000020  ea220401          BIC      r4,r2,r1
000024  6004              STR      r4,[r0,#0]
                  |L9.38|
;;;265      }
;;;266    }
000026  bd30              POP      {r4,r5,pc}
;;;267    
                          ENDP

                  |L9.40|
                          DCD      0x400c0000

;*** Start embedded assembler ***

#line 1 "C:\\Users\\AN-Mi\\AppData\\Local\\Arm\\Packs\\Keil\\MDR1986BExx\\1.51\\Libraries\\MDR32F9Qx_StdPeriph_Driver\\src\\MDR32F9Qx_port.c"
	AREA ||.rev16_text||, CODE
	THUMB
	EXPORT |__asm___16_MDR32F9Qx_port_c_a6c41966____REV16|
#line 467 "C:\\Users\\AN-Mi\\AppData\\Local\\Arm\\Packs\\ARM\\CMSIS\\5.5.1\\CMSIS\\Core\\Include\\cmsis_armcc.h"
|__asm___16_MDR32F9Qx_port_c_a6c41966____REV16| PROC
#line 468

 rev16 r0, r0
 bx lr
	ENDP
	AREA ||.revsh_text||, CODE
	THUMB
	EXPORT |__asm___16_MDR32F9Qx_port_c_a6c41966____REVSH|
#line 482
|__asm___16_MDR32F9Qx_port_c_a6c41966____REVSH| PROC
#line 483

 revsh r0, r0
 bx lr
	ENDP
	AREA ||.rrx_text||, CODE
	THUMB
	EXPORT |__asm___16_MDR32F9Qx_port_c_a6c41966____RRX|
#line 669
|__asm___16_MDR32F9Qx_port_c_a6c41966____RRX| PROC
#line 670

 rrx r0, r0
 bx lr
	ENDP

;*** End   embedded assembler ***
