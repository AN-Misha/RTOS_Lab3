; generated by Component: ARM Compiler 5.06 update 6 (build 750) Tool: ArmCC [4d3637]
; commandline ArmCC [--list --split_sections --debug -c --asm --interleave -o.\obj\mdr32f9qx_dma.o --asm_dir=.\obj\ --list_dir=.\obj\ --depend=.\obj\mdr32f9qx_dma.d --cpu=Cortex-M3 --apcs=interwork -O0 --diag_suppress=9931 -I"..\CAN TEST" -I.\RTE -I.\RTE\Device -I.\RTE\Device\MDR1986BE92 -I.\rtos -I.\rtos\include -I.\RTE\Device\MDR1986BE92 -I.\RTE\_Target_1 -IC:\Users\AN-Mi\AppData\Local\Arm\Packs\ARM\CMSIS\5.5.1\CMSIS\Core\Include -IC:\Users\AN-Mi\AppData\Local\Arm\Packs\ARM\CMSIS\5.5.1\CMSIS\DSP\Include -IC:\Users\AN-Mi\AppData\Local\Arm\Packs\Keil\MDR1986BExx\1.51\Config -IC:\Users\AN-Mi\AppData\Local\Arm\Packs\Keil\MDR1986BExx\1.51\Libraries\CMSIS\CM3\CoreSupport -IC:\Users\AN-Mi\AppData\Local\Arm\Packs\Keil\MDR1986BExx\1.51\Libraries\CMSIS\CM3\DeviceSupport\MDR32F9Qx\inc -IC:\Users\AN-Mi\AppData\Local\Arm\Packs\Keil\MDR1986BExx\1.51\Libraries\MDR32F9Qx_StdPeriph_Driver\inc -D__MICROLIB -D__UVISION_VERSION=527 -D_RTE_ -DUSE_MDR32F9Q2_Rev1 --omf_browse=.\obj\mdr32f9qx_dma.crf C:\Users\AN-Mi\AppData\Local\Arm\Packs\Keil\MDR1986BExx\1.51\Libraries\MDR32F9Qx_StdPeriph_Driver\src\MDR32F9Qx_dma.c]
                          THUMB

                          AREA ||i.DMA_ClearError||, CODE, READONLY, ALIGN=2

                  DMA_ClearError PROC
;;;436      */
;;;437    void DMA_ClearError(void)
000000  2001              MOVS     r0,#1
;;;438    {
;;;439      MDR_DMA->ERR_CLR = 0x01;            /* Clear dma_err status */
000002  4901              LDR      r1,|L1.8|
000004  64c8              STR      r0,[r1,#0x4c]
;;;440    }
000006  4770              BX       lr
;;;441    
                          ENDP

                  |L1.8|
                          DCD      0x40028000

                          AREA ||i.DMA_Cmd||, CODE, READONLY, ALIGN=2

                  DMA_Cmd PROC
;;;401      */
;;;402    void DMA_Cmd(uint8_t DMA_Channel, FunctionalState NewState)
000000  2901              CMP      r1,#1
;;;403    {
;;;404      /* Check the parameters */
;;;405      assert_param(IS_DMA_CHANNEL(DMA_Channel));
;;;406    
;;;407      /* Channel Enable/Disable */
;;;408      if ( NewState == ENABLE)
000002  d104              BNE      |L2.14|
;;;409      {
;;;410        MDR_DMA->CHNL_ENABLE_SET = (1 << DMA_Channel);
000004  2201              MOVS     r2,#1
000006  4082              LSLS     r2,r2,r0
000008  4b03              LDR      r3,|L2.24|
00000a  629a              STR      r2,[r3,#0x28]
00000c  e003              B        |L2.22|
                  |L2.14|
;;;411      }
;;;412      else
;;;413      {
;;;414        MDR_DMA->CHNL_ENABLE_CLR = (1 << DMA_Channel);
00000e  2201              MOVS     r2,#1
000010  4082              LSLS     r2,r2,r0
000012  4b01              LDR      r3,|L2.24|
000014  62da              STR      r2,[r3,#0x2c]
                  |L2.22|
;;;415      }
;;;416    }
000016  4770              BX       lr
;;;417    
                          ENDP

                  |L2.24|
                          DCD      0x40028000

                          AREA ||i.DMA_CtrlDataInit||, CODE, READONLY, ALIGN=1

                  DMA_CtrlDataInit PROC
;;;93       */
;;;94     void DMA_CtrlDataInit(DMA_CtrlDataInitTypeDef *DMA_ctrl_data_ptr, DMA_CtrlDataTypeDef *DMA_ctrl_table_ptr)
000000  6882              LDR      r2,[r0,#8]
;;;95     {
;;;96       /* Check DMA configuration parameters */
;;;97       assert_param(IS_DMA_CHANNELS(DMA_Channels_Number));
;;;98       assert_param(IS_DMA_ALTERNATE_DATA(DMA_AlternateData));
;;;99     
;;;100      /* Check the parameters */
;;;101      assert_param(IS_DMA_SOURCE_INC_STATE(DMA_ctrl_data_ptr->DMA_SourceIncSize));
;;;102      assert_param(IS_DMA_DEST_INC_STATE(DMA_ctrl_data_ptr->DMA_DestIncSize));
;;;103      assert_param(IS_DMA_MEMORY_DATA_SIZE(DMA_ctrl_data_ptr->DMA_MemoryDataSize));
;;;104      assert_param(IS_DMA_MODE(DMA_ctrl_data_ptr->DMA_Mode));
;;;105      assert_param(IS_DMA_CYCLE_SIZE(DMA_ctrl_data_ptr->DMA_CycleSize));
;;;106      assert_param(IS_DMA_CONTINUOUS_NUMBER(DMA_ctrl_data_ptr->DMA_NumContinuous));
;;;107      assert_param(IS_DMA_SOURCE_PROT(DMA_ctrl_data_ptr->DMA_SourceProtCtrl));
;;;108      assert_param(IS_DMA_DEST_PROT(DMA_ctrl_data_ptr->DMA_DestProtCtrl));
;;;109    
;;;110      /* DMA Source Data End Address */
;;;111      if (DMA_ctrl_data_ptr->DMA_SourceIncSize == DMA_SourceIncNo)
000002  f1b26f40          CMP      r2,#0xc000000
000006  d102              BNE      |L3.14|
;;;112      {
;;;113        DMA_ctrl_table_ptr->DMA_SourceEndAddr = DMA_ctrl_data_ptr->DMA_SourceBaseAddr;
000008  6802              LDR      r2,[r0,#0]
00000a  600a              STR      r2,[r1,#0]
00000c  e007              B        |L3.30|
                  |L3.14|
;;;114      }
;;;115      else
;;;116      {
;;;117        DMA_ctrl_table_ptr->DMA_SourceEndAddr = ( DMA_ctrl_data_ptr->DMA_SourceBaseAddr +
00000e  6982              LDR      r2,[r0,#0x18]
000010  1e52              SUBS     r2,r2,#1
000012  6883              LDR      r3,[r0,#8]
000014  0e9b              LSRS     r3,r3,#26
000016  409a              LSLS     r2,r2,r3
000018  6803              LDR      r3,[r0,#0]
00001a  441a              ADD      r2,r2,r3
00001c  600a              STR      r2,[r1,#0]
                  |L3.30|
;;;118            ((DMA_ctrl_data_ptr->DMA_CycleSize - 1) << (DMA_ctrl_data_ptr->DMA_SourceIncSize >> 26)));
;;;119      }
;;;120    
;;;121      /* DMA Destination Data End Address */
;;;122      if (DMA_ctrl_data_ptr->DMA_Mode == DMA_Mode_MemScatterPri)
00001e  6942              LDR      r2,[r0,#0x14]
000020  2a04              CMP      r2,#4
000022  d103              BNE      |L3.44|
;;;123      {
;;;124        /* Memory Scatter-Gather mode */
;;;125        DMA_ctrl_table_ptr->DMA_DestEndAddr = (DMA_ctrl_data_ptr->DMA_DestBaseAddr + 12);
000024  6842              LDR      r2,[r0,#4]
000026  320c              ADDS     r2,r2,#0xc
000028  604a              STR      r2,[r1,#4]
00002a  e00e              B        |L3.74|
                  |L3.44|
;;;126      }
;;;127      else
;;;128      {
;;;129        /* Other modes */
;;;130        if (DMA_ctrl_data_ptr->DMA_DestIncSize == DMA_DestIncNo)
00002c  68c2              LDR      r2,[r0,#0xc]
00002e  f1b24f40          CMP      r2,#0xc0000000
000032  d102              BNE      |L3.58|
;;;131        {
;;;132          DMA_ctrl_table_ptr->DMA_DestEndAddr = DMA_ctrl_data_ptr->DMA_DestBaseAddr;
000034  6842              LDR      r2,[r0,#4]
000036  604a              STR      r2,[r1,#4]
000038  e007              B        |L3.74|
                  |L3.58|
;;;133        }
;;;134        else
;;;135        {
;;;136          DMA_ctrl_table_ptr->DMA_DestEndAddr = ( DMA_ctrl_data_ptr->DMA_DestBaseAddr +
00003a  6982              LDR      r2,[r0,#0x18]
00003c  1e52              SUBS     r2,r2,#1
00003e  68c3              LDR      r3,[r0,#0xc]
000040  0f9b              LSRS     r3,r3,#30
000042  409a              LSLS     r2,r2,r3
000044  6843              LDR      r3,[r0,#4]
000046  441a              ADD      r2,r2,r3
000048  604a              STR      r2,[r1,#4]
                  |L3.74|
;;;137            ((DMA_ctrl_data_ptr->DMA_CycleSize - 1) << (DMA_ctrl_data_ptr->DMA_DestIncSize >> 30)));
;;;138        }
;;;139      }
;;;140    
;;;141      /* DMA Control Data */
;;;142      DMA_ctrl_table_ptr->DMA_Control = (DMA_ctrl_data_ptr->DMA_DestIncSize     |
00004a  e9d02303          LDRD     r2,r3,[r0,#0xc]
00004e  431a              ORRS     r2,r2,r3
000050  6883              LDR      r3,[r0,#8]
000052  431a              ORRS     r2,r2,r3
000054  6a43              LDR      r3,[r0,#0x24]
000056  431a              ORRS     r2,r2,r3
000058  6a03              LDR      r3,[r0,#0x20]
00005a  431a              ORRS     r2,r2,r3
00005c  69c3              LDR      r3,[r0,#0x1c]
00005e  431a              ORRS     r2,r2,r3
000060  6983              LDR      r3,[r0,#0x18]
000062  1e5b              SUBS     r3,r3,#1
000064  ea421203          ORR      r2,r2,r3,LSL #4
000068  6943              LDR      r3,[r0,#0x14]
00006a  431a              ORRS     r2,r2,r3
00006c  608a              STR      r2,[r1,#8]
;;;143                                         DMA_ctrl_data_ptr->DMA_MemoryDataSize  |
;;;144                                         DMA_ctrl_data_ptr->DMA_SourceIncSize   |
;;;145                                         DMA_ctrl_data_ptr->DMA_DestProtCtrl    |
;;;146                                         DMA_ctrl_data_ptr->DMA_SourceProtCtrl  |
;;;147                                         DMA_ctrl_data_ptr->DMA_NumContinuous   |
;;;148                                         ((DMA_ctrl_data_ptr->DMA_CycleSize - 1) << 4)  |
;;;149                                         DMA_ctrl_data_ptr->DMA_Mode);
;;;150    }
00006e  4770              BX       lr
;;;151    
                          ENDP


                          AREA ||i.DMA_CtrlInit||, CODE, READONLY, ALIGN=2

                  DMA_CtrlInit PROC
;;;182      */
;;;183    void DMA_CtrlInit(uint8_t DMA_Channel, uint8_t DMA_CtrlDataType,  DMA_CtrlDataInitTypeDef* DMA_CtrlStruct)
000000  b5f0              PUSH     {r4-r7,lr}
;;;184    {
000002  4604              MOV      r4,r0
000004  460d              MOV      r5,r1
000006  4616              MOV      r6,r2
;;;185      /* Primary Control Data Init */
;;;186      if (DMA_CtrlDataType == DMA_CTRL_DATA_PRIMARY)
000008  b935              CBNZ     r5,|L4.24|
;;;187      {
;;;188        DMA_CtrlDataInit(DMA_CtrlStruct, &DMA_ControlTable[DMA_Channel]);
00000a  4808              LDR      r0,|L4.44|
00000c  eb001104          ADD      r1,r0,r4,LSL #4
000010  4630              MOV      r0,r6
000012  f7fffffe          BL       DMA_CtrlDataInit
000016  e008              B        |L4.42|
                  |L4.24|
;;;189      }
;;;190    #if (DMA_AlternateData == 1)
;;;191      /* Alternate Control Data Init */
;;;192      else
;;;193      {
;;;194        uint32_t ptr = (MDR_DMA->ALT_CTRL_BASE_PTR + (DMA_Channel * sizeof(DMA_CtrlDataTypeDef)));
000018  4805              LDR      r0,|L4.48|
00001a  68c0              LDR      r0,[r0,#0xc]
00001c  eb001704          ADD      r7,r0,r4,LSL #4
;;;195        DMA_CtrlDataInit(DMA_CtrlStruct, (DMA_CtrlDataTypeDef *)ptr);
000020  4639              MOV      r1,r7
000022  4630              MOV      r0,r6
000024  f7fffffe          BL       DMA_CtrlDataInit
;;;196      }
000028  bf00              NOP      
                  |L4.42|
;;;197    #endif
;;;198    }
00002a  bdf0              POP      {r4-r7,pc}
;;;199    
                          ENDP

                  |L4.44|
                          DCD      DMA_ControlTable
                  |L4.48|
                          DCD      0x40028000

                          AREA ||i.DMA_DeInit||, CODE, READONLY, ALIGN=2

                  DMA_DeInit PROC
;;;156      */
;;;157    void DMA_DeInit(void)
000000  2000              MOVS     r0,#0
;;;158    {
;;;159      MDR_DMA->CFG = 0;                           /* Master Enable Off */
000002  4906              LDR      r1,|L5.28|
000004  6048              STR      r0,[r1,#4]
;;;160      MDR_DMA->CTRL_BASE_PTR = 0;                 /* Control data base pointer */
000006  6088              STR      r0,[r1,#8]
;;;161      MDR_DMA->CHNL_SW_REQUEST = 0;               /* Disable all sw requests */
000008  6148              STR      r0,[r1,#0x14]
;;;162      //MDR_DMA->CHNL_USEBURST_CLR = 0xFFFFFFFF;    /* Disable burst mode */
;;;163      MDR_DMA->CHNL_USEBURST_SET = 0xFFFFFFFF;    /* Disable burst mode */
00000a  1e40              SUBS     r0,r0,#1
00000c  6188              STR      r0,[r1,#0x18]
;;;164      //MDR_DMA->CHNL_REQ_MASK_CLR = 0xFFFFFFFF;    /* Clear mask request */
;;;165      MDR_DMA->CHNL_REQ_MASK_SET = 0xFFFFFFFF;    /* Disable all channel*/
00000e  6208              STR      r0,[r1,#0x20]
;;;166      
;;;167      MDR_DMA->CHNL_ENABLE_CLR = 0xFFFFFFFF;      /* Clear channel enable */
000010  62c8              STR      r0,[r1,#0x2c]
;;;168      MDR_DMA->CHNL_PRI_ALT_CLR = 0xFFFFFFFF;     /* Reset to primary data structure */
000012  6348              STR      r0,[r1,#0x34]
;;;169      MDR_DMA->CHNL_PRIORITY_CLR = 0xFFFFFFFF;    /* Reset to default priority */
000014  63c8              STR      r0,[r1,#0x3c]
;;;170      MDR_DMA->ERR_CLR = 0x01;                    /* Clear dma_err status */
000016  2001              MOVS     r0,#1
000018  64c8              STR      r0,[r1,#0x4c]
;;;171    }
00001a  4770              BX       lr
;;;172    
                          ENDP

                  |L5.28|
                          DCD      0x40028000

                          AREA ||i.DMA_GetCurrTransferCounter||, CODE, READONLY, ALIGN=2

                  DMA_GetCurrTransferCounter PROC
;;;450      */
;;;451    uint32_t DMA_GetCurrTransferCounter(uint8_t DMA_Channel, uint8_t DMA_CtrlData)
000000  4602              MOV      r2,r0
;;;452    {
000002  460b              MOV      r3,r1
;;;453      DMA_CtrlDataTypeDef *ptr;     /* Pointer to the channels's data structure */
;;;454    
;;;455      /* Check the parameters */
;;;456      assert_param(IS_DMA_CHANNEL(DMA_Channel));
;;;457      assert_param(IS_DMA_SELECT_DATA_STRUCTURE(DMA_CtrlData));
;;;458    
;;;459      /* Init the control data pointer */
;;;460      if (DMA_CtrlData == DMA_CTRL_DATA_PRIMARY)
000004  b923              CBNZ     r3,|L6.16|
;;;461      {
;;;462        ptr = (DMA_CtrlDataTypeDef *)(MDR_DMA->CTRL_BASE_PTR + (DMA_Channel * sizeof(DMA_CtrlDataTypeDef)));
000006  4807              LDR      r0,|L6.36|
000008  6880              LDR      r0,[r0,#8]
00000a  eb001102          ADD      r1,r0,r2,LSL #4
00000e  e003              B        |L6.24|
                  |L6.16|
;;;463      }
;;;464      else
;;;465      {
;;;466        ptr = (DMA_CtrlDataTypeDef *)(MDR_DMA->ALT_CTRL_BASE_PTR + (DMA_Channel * sizeof(DMA_CtrlDataTypeDef)));
000010  4804              LDR      r0,|L6.36|
000012  68c0              LDR      r0,[r0,#0xc]
000014  eb001102          ADD      r1,r0,r2,LSL #4
                  |L6.24|
;;;467      }
;;;468    
;;;469      /* Read the number of remaining transfers */
;;;470      return (((ptr->DMA_Control & DMA_CONTROL_MINUS_1)>>4) + 1);
000018  8908              LDRH     r0,[r1,#8]
00001a  f3c01009          UBFX     r0,r0,#4,#10
00001e  1c40              ADDS     r0,r0,#1
;;;471    }
000020  4770              BX       lr
;;;472    
                          ENDP

000022  0000              DCW      0x0000
                  |L6.36|
                          DCD      0x40028000

                          AREA ||i.DMA_GetFlagStatus||, CODE, READONLY, ALIGN=2

                  DMA_GetFlagStatus PROC
;;;487      */
;;;488    FlagStatus DMA_GetFlagStatus(uint8_t DMA_Channel, uint8_t DMA_Flag)
000000  4602              MOV      r2,r0
;;;489    {
;;;490      /* Check the parameters */
;;;491      assert_param(IS_DMA_CHANNEL(DMA_Channel));
;;;492      assert_param(IS_DMA_FLAG(DMA_Flag));
;;;493    
;;;494      /* Read Flag Status */
;;;495      switch(DMA_Flag)
000002  2909              CMP      r1,#9
000004  d24e              BCS      |L7.164|
000006  e8dff001          TBB      [pc,r1]
00000a  4d05              DCB      0x4d,0x05
00000c  0a111b25          DCB      0x0a,0x11,0x1b,0x25
000010  2f394300          DCB      0x2f,0x39,0x43,0x00
;;;496      {
;;;497        case DMA_FLAG_DMA_ENA:
;;;498          return (FlagStatus)((MDR_DMA->STATUS & DMA_STATUS_MASTER_ENABLE)  != 0);
000014  4824              LDR      r0,|L7.168|
000016  6800              LDR      r0,[r0,#0]
000018  f0000001          AND      r0,r0,#1
                  |L7.28|
;;;499        case DMA_FLAG_DMA_ERR:
;;;500          return (FlagStatus)((MDR_DMA->ERR_CLR & 0x01) == 0);
;;;501        case DMA_FLAG_CHNL_ENA:
;;;502          return (FlagStatus)((MDR_DMA->CHNL_ENABLE_SET & (1 << DMA_Channel)) != 0);
;;;503        case DMA_FLAG_CHNL_MASK:
;;;504          return (FlagStatus)((MDR_DMA->CHNL_REQ_MASK_SET & (1 << DMA_Channel)) != 0);
;;;505        case DMA_FLAG_CHNL_WAIT:
;;;506          return (FlagStatus)((MDR_DMA->WAITONREQ_STATUS & (1 << DMA_Channel)) != 0);
;;;507        case DMA_FLAG_CHNL_BURST:
;;;508          return (FlagStatus)((MDR_DMA->CHNL_USEBURST_SET & (1 << DMA_Channel)) != 0);
;;;509        case DMA_FLAG_CHNL_ALT:
;;;510          return (FlagStatus)((MDR_DMA->CHNL_PRI_ALT_SET & (1 << DMA_Channel)) != 0);
;;;511        case DMA_FLAG_CHNL_PRIORITY:
;;;512          return (FlagStatus)((MDR_DMA->CHNL_PRIORITY_SET & (1 << DMA_Channel)) != 0);
;;;513        default:
;;;514          return (FlagStatus)0;
;;;515      }
;;;516    }
00001c  4770              BX       lr
00001e  4822              LDR      r0,|L7.168|
000020  6cc0              LDR      r0,[r0,#0x4c]         ;500
000022  f0000001          AND      r0,r0,#1              ;500
000026  f0800001          EOR      r0,r0,#1              ;500
00002a  e7f7              B        |L7.28|
00002c  481e              LDR      r0,|L7.168|
00002e  6a80              LDR      r0,[r0,#0x28]         ;502
000030  2301              MOVS     r3,#1                 ;502
000032  4093              LSLS     r3,r3,r2              ;502
000034  4018              ANDS     r0,r0,r3              ;502
000036  b108              CBZ      r0,|L7.60|
000038  2001              MOVS     r0,#1                 ;502
00003a  e7ef              B        |L7.28|
                  |L7.60|
00003c  2000              MOVS     r0,#0                 ;502
00003e  e7ed              B        |L7.28|
000040  4819              LDR      r0,|L7.168|
000042  6a03              LDR      r3,[r0,#0x20]         ;504
000044  2001              MOVS     r0,#1                 ;504
000046  4090              LSLS     r0,r0,r2              ;504
000048  4003              ANDS     r3,r3,r0              ;504
00004a  b10b              CBZ      r3,|L7.80|
00004c  2001              MOVS     r0,#1                 ;504
00004e  e7e5              B        |L7.28|
                  |L7.80|
000050  2000              MOVS     r0,#0                 ;504
000052  e7e3              B        |L7.28|
000054  4814              LDR      r0,|L7.168|
000056  6900              LDR      r0,[r0,#0x10]         ;506
000058  2301              MOVS     r3,#1                 ;506
00005a  4093              LSLS     r3,r3,r2              ;506
00005c  4018              ANDS     r0,r0,r3              ;506
00005e  b108              CBZ      r0,|L7.100|
000060  2001              MOVS     r0,#1                 ;506
000062  e7db              B        |L7.28|
                  |L7.100|
000064  2000              MOVS     r0,#0                 ;506
000066  e7d9              B        |L7.28|
000068  480f              LDR      r0,|L7.168|
00006a  6983              LDR      r3,[r0,#0x18]         ;508
00006c  2001              MOVS     r0,#1                 ;508
00006e  4090              LSLS     r0,r0,r2              ;508
000070  4003              ANDS     r3,r3,r0              ;508
000072  b10b              CBZ      r3,|L7.120|
000074  2001              MOVS     r0,#1                 ;508
000076  e7d1              B        |L7.28|
                  |L7.120|
000078  2000              MOVS     r0,#0                 ;508
00007a  e7cf              B        |L7.28|
00007c  480a              LDR      r0,|L7.168|
00007e  6b03              LDR      r3,[r0,#0x30]         ;510
000080  2001              MOVS     r0,#1                 ;510
000082  4090              LSLS     r0,r0,r2              ;510
000084  4003              ANDS     r3,r3,r0              ;510
000086  b10b              CBZ      r3,|L7.140|
000088  2001              MOVS     r0,#1                 ;510
00008a  e7c7              B        |L7.28|
                  |L7.140|
00008c  2000              MOVS     r0,#0                 ;510
00008e  e7c5              B        |L7.28|
000090  4805              LDR      r0,|L7.168|
000092  6b80              LDR      r0,[r0,#0x38]         ;512
000094  2301              MOVS     r3,#1                 ;512
000096  4093              LSLS     r3,r3,r2              ;512
000098  4018              ANDS     r0,r0,r3              ;512
00009a  b108              CBZ      r0,|L7.160|
00009c  2001              MOVS     r0,#1                 ;512
00009e  e7bd              B        |L7.28|
                  |L7.160|
0000a0  2000              MOVS     r0,#0                 ;512
0000a2  e7bb              B        |L7.28|
                  |L7.164|
0000a4  2000              MOVS     r0,#0                 ;514
0000a6  e7b9              B        |L7.28|
;;;517    
                          ENDP

                  |L7.168|
                          DCD      0x40028000

                          AREA ||i.DMA_Init||, CODE, READONLY, ALIGN=2

                  DMA_Init PROC
;;;294      */
;;;295    void DMA_Init(uint8_t DMA_Channel, DMA_ChannelInitTypeDef* DMA_InitStruct)
000000  b570              PUSH     {r4-r6,lr}
;;;296    {
000002  4604              MOV      r4,r0
000004  460d              MOV      r5,r1
;;;297      /* Check the parameters */
;;;298      assert_param(IS_DMA_CHANNEL(DMA_Channel));
;;;299      assert_param(IS_DMA_AHB_PROT(DMA_InitStruct->DMA_ProtCtrl));
;;;300      assert_param(IS_DMA_PRIORITY(DMA_InitStruct->DMA_Priority));
;;;301      assert_param(IS_DMA_BURST(DMA_InitStruct->DMA_UseBurst));
;;;302      assert_param(IS_DMA_SELECT_DATA_STRUCTURE(DMA_InitStruct->DMA_SelectDataStructure));
;;;303    
;;;304      /* Check the CTRL_BASE_PTR initialisation */
;;;305      MDR_DMA->CTRL_BASE_PTR = (uint32_t)DMA_ControlTable;
000006  4821              LDR      r0,|L8.140|
000008  4921              LDR      r1,|L8.144|
00000a  6088              STR      r0,[r1,#8]
;;;306    
;;;307      /* Primary Control Data Init */
;;;308      if (DMA_InitStruct->DMA_PriCtrlData)
00000c  6828              LDR      r0,[r5,#0]
00000e  b128              CBZ      r0,|L8.28|
;;;309      {
;;;310        DMA_CtrlDataInit(DMA_InitStruct->DMA_PriCtrlData, &DMA_ControlTable[DMA_Channel]);
000010  4a1e              LDR      r2,|L8.140|
000012  eb021104          ADD      r1,r2,r4,LSL #4
000016  6828              LDR      r0,[r5,#0]
000018  f7fffffe          BL       DMA_CtrlDataInit
                  |L8.28|
;;;311      }
;;;312    
;;;313    #if (DMA_AlternateData == 1)
;;;314      /* Alternate Control Data Init */
;;;315      if (DMA_InitStruct->DMA_AltCtrlData)
00001c  6868              LDR      r0,[r5,#4]
00001e  b140              CBZ      r0,|L8.50|
;;;316      {
;;;317        uint32_t ptr = (MDR_DMA->ALT_CTRL_BASE_PTR + (DMA_Channel * sizeof(DMA_CtrlDataTypeDef)));
000020  481b              LDR      r0,|L8.144|
000022  68c0              LDR      r0,[r0,#0xc]
000024  eb001604          ADD      r6,r0,r4,LSL #4
;;;318        DMA_CtrlDataInit(DMA_InitStruct->DMA_AltCtrlData, (DMA_CtrlDataTypeDef *)ptr);
000028  4631              MOV      r1,r6
00002a  6868              LDR      r0,[r5,#4]
00002c  f7fffffe          BL       DMA_CtrlDataInit
;;;319      }
000030  bf00              NOP      
                  |L8.50|
;;;320    #endif
;;;321    
;;;322      /* DMA configuration register */
;;;323      MDR_DMA->CFG = DMA_CFG_MASTER_ENABLE | DMA_InitStruct->DMA_ProtCtrl;
000032  68a8              LDR      r0,[r5,#8]
000034  f0400001          ORR      r0,r0,#1
000038  4915              LDR      r1,|L8.144|
00003a  6048              STR      r0,[r1,#4]
;;;324    
;;;325      /* Burst mode */
;;;326      if (DMA_InitStruct->DMA_UseBurst == DMA_BurstSet)
00003c  7b68              LDRB     r0,[r5,#0xd]
00003e  2801              CMP      r0,#1
000040  d102              BNE      |L8.72|
;;;327      {
;;;328        MDR_DMA->CHNL_USEBURST_SET = (1 << DMA_Channel);
000042  40a0              LSLS     r0,r0,r4
000044  6188              STR      r0,[r1,#0x18]
000046  e003              B        |L8.80|
                  |L8.72|
;;;329      }
;;;330      else
;;;331      {
;;;332        MDR_DMA->CHNL_USEBURST_CLR = (1 << DMA_Channel);
000048  2001              MOVS     r0,#1
00004a  40a0              LSLS     r0,r0,r4
00004c  4910              LDR      r1,|L8.144|
00004e  61c8              STR      r0,[r1,#0x1c]
                  |L8.80|
;;;333      }
;;;334    
;;;335      /* Channel mask clear */
;;;336      MDR_DMA->CHNL_REQ_MASK_CLR = (1 << DMA_Channel);
000050  2001              MOVS     r0,#1
000052  40a0              LSLS     r0,r0,r4
000054  490e              LDR      r1,|L8.144|
000056  6248              STR      r0,[r1,#0x24]
;;;337    
;;;338      /* Enable channel */
;;;339      MDR_DMA->CHNL_ENABLE_SET = (1 << DMA_Channel);
000058  2001              MOVS     r0,#1
00005a  40a0              LSLS     r0,r0,r4
00005c  6288              STR      r0,[r1,#0x28]
;;;340    
;;;341      /* Primary - Alternate control data structure selection */
;;;342      if (DMA_InitStruct->DMA_SelectDataStructure == DMA_CTRL_DATA_PRIMARY)
00005e  7ba8              LDRB     r0,[r5,#0xe]
000060  b918              CBNZ     r0,|L8.106|
;;;343      {
;;;344        MDR_DMA->CHNL_PRI_ALT_CLR = (1 << DMA_Channel);       /* Use Primary */
000062  2001              MOVS     r0,#1
000064  40a0              LSLS     r0,r0,r4
000066  6348              STR      r0,[r1,#0x34]
000068  e003              B        |L8.114|
                  |L8.106|
;;;345      }
;;;346      else
;;;347      {
;;;348        MDR_DMA->CHNL_PRI_ALT_SET = (1 << DMA_Channel);       /* Use Alternate */
00006a  2001              MOVS     r0,#1
00006c  40a0              LSLS     r0,r0,r4
00006e  4908              LDR      r1,|L8.144|
000070  6308              STR      r0,[r1,#0x30]
                  |L8.114|
;;;349      }
;;;350    
;;;351      /* Channel priority set */
;;;352      if (DMA_InitStruct->DMA_Priority == DMA_Priority_High)
000072  7b28              LDRB     r0,[r5,#0xc]
000074  2801              CMP      r0,#1
000076  d103              BNE      |L8.128|
;;;353      {
;;;354        MDR_DMA->CHNL_PRIORITY_SET = (1 << DMA_Channel);      /* High priority */
000078  40a0              LSLS     r0,r0,r4
00007a  4905              LDR      r1,|L8.144|
00007c  6388              STR      r0,[r1,#0x38]
00007e  e003              B        |L8.136|
                  |L8.128|
;;;355      }
;;;356      else
;;;357      {
;;;358        MDR_DMA->CHNL_PRIORITY_CLR = (1 << DMA_Channel);      /* Default priority */
000080  2001              MOVS     r0,#1
000082  40a0              LSLS     r0,r0,r4
000084  4902              LDR      r1,|L8.144|
000086  63c8              STR      r0,[r1,#0x3c]
                  |L8.136|
;;;359      }
;;;360    }
000088  bd70              POP      {r4-r6,pc}
;;;361    
                          ENDP

00008a  0000              DCW      0x0000
                  |L8.140|
                          DCD      DMA_ControlTable
                  |L8.144|
                          DCD      0x40028000

                          AREA ||i.DMA_Request||, CODE, READONLY, ALIGN=2

                  DMA_Request PROC
;;;422      */
;;;423    void DMA_Request(uint8_t DMA_Channel)
000000  2101              MOVS     r1,#1
;;;424    {
;;;425      /* Check the parameters */
;;;426      assert_param(IS_DMA_CHANNEL(DMA_Channel));
;;;427    
;;;428      /* Set SW Request */
;;;429      MDR_DMA->CHNL_SW_REQUEST = (1 << DMA_Channel);
000002  4081              LSLS     r1,r1,r0
000004  4a01              LDR      r2,|L9.12|
000006  6151              STR      r1,[r2,#0x14]
;;;430    }
000008  4770              BX       lr
;;;431    
                          ENDP

00000a  0000              DCW      0x0000
                  |L9.12|
                          DCD      0x40028000

                          AREA ||i.DMA_SG_CtrlInit||, CODE, READONLY, ALIGN=1

                  DMA_SG_CtrlInit PROC
;;;209      */
;;;210    void DMA_SG_CtrlInit(uint32_t DMA_Task, DMA_CtrlDataTypeDef *DMA_SG_TaskArray,  DMA_CtrlDataInitTypeDef* DMA_CtrlStruct)
000000  b570              PUSH     {r4-r6,lr}
;;;211    {
000002  4604              MOV      r4,r0
000004  460d              MOV      r5,r1
000006  4616              MOV      r6,r2
;;;212      DMA_CtrlDataInit(DMA_CtrlStruct, &DMA_SG_TaskArray[DMA_Task]);
000008  eb051104          ADD      r1,r5,r4,LSL #4
00000c  4630              MOV      r0,r6
00000e  f7fffffe          BL       DMA_CtrlDataInit
;;;213    }
000012  bd70              POP      {r4-r6,pc}
;;;214    
                          ENDP


                          AREA ||i.DMA_SG_Init||, CODE, READONLY, ALIGN=2

                  DMA_SG_Init PROC
;;;221      */
;;;222    void DMA_SG_Init( uint8_t DMA_Channel, DMA_Channel_SG_InitTypeDef *DMA_SG_InitStruct)
000000  b530              PUSH     {r4,r5,lr}
;;;223    {
000002  b08a              SUB      sp,sp,#0x28
000004  4604              MOV      r4,r0
000006  460d              MOV      r5,r1
;;;224      DMA_CtrlDataInitTypeDef DMA_PriCtrlData;
;;;225    
;;;226      /* Check the parameters */
;;;227      assert_param(DMA_AlternateData == 1);
;;;228      assert_param(DMA_SG_InitStruct != 0);
;;;229      assert_param(DMA_SG_InitStruct->DMA_SG_TaskNumber != 0);
;;;230      assert_param(IS_DMA_CHANNEL(DMA_Channel));
;;;231      assert_param(IS_DMA_AHB_PROT(DMA_SG_InitStruct->DMA_ProtCtrl));
;;;232      assert_param(IS_DMA_PRIORITY(DMA_SG_InitStruct->DMA_Priority));
;;;233      assert_param(IS_DMA_SOURCE_PROT(DMA_SG_InitStruct->DMA_SourceProtCtrl));
;;;234      assert_param(IS_DMA_DEST_PROT(DMA_SG_InitStruct->DMA_DestProtCtrl));
;;;235      assert_param(IS_DMA_BURST(DMA_SG_InitStruct->DMA_UseBurst));
;;;236    
;;;237      /* Check the CTRL_BASE_PTR initialisation */
;;;238      MDR_DMA->CTRL_BASE_PTR = (uint32_t)DMA_ControlTable;
000008  4824              LDR      r0,|L11.156|
00000a  4925              LDR      r1,|L11.160|
00000c  6088              STR      r0,[r1,#8]
;;;239    
;;;240      /* Primary Control Data Init */
;;;241      DMA_PriCtrlData.DMA_SourceBaseAddr = (uint32_t)(DMA_SG_InitStruct->DMA_SG_TaskArray);
00000e  6828              LDR      r0,[r5,#0]
000010  9000              STR      r0,[sp,#0]
;;;242      DMA_PriCtrlData.DMA_DestBaseAddr = (MDR_DMA->ALT_CTRL_BASE_PTR + (DMA_Channel * sizeof(DMA_CtrlDataTypeDef)));
000012  4608              MOV      r0,r1
000014  68c0              LDR      r0,[r0,#0xc]
000016  eb001004          ADD      r0,r0,r4,LSL #4
00001a  9001              STR      r0,[sp,#4]
;;;243      DMA_PriCtrlData.DMA_SourceIncSize = DMA_SourceIncWord;
00001c  f04f6000          MOV      r0,#0x8000000
000020  9002              STR      r0,[sp,#8]
;;;244      DMA_PriCtrlData.DMA_DestIncSize = DMA_DestIncWord;
000022  0100              LSLS     r0,r0,#4
000024  9003              STR      r0,[sp,#0xc]
;;;245      DMA_PriCtrlData.DMA_MemoryDataSize = DMA_MemoryDataSize_Word;
000026  f04f5008          MOV      r0,#0x22000000
00002a  9004              STR      r0,[sp,#0x10]
;;;246      DMA_PriCtrlData.DMA_Mode = DMA_Mode_MemScatterPri;
00002c  2004              MOVS     r0,#4
00002e  9005              STR      r0,[sp,#0x14]
;;;247      DMA_PriCtrlData.DMA_CycleSize = DMA_SG_InitStruct->DMA_SG_TaskNumber << 2;
000030  6868              LDR      r0,[r5,#4]
000032  0080              LSLS     r0,r0,#2
000034  9006              STR      r0,[sp,#0x18]
;;;248      DMA_PriCtrlData.DMA_NumContinuous = DMA_Transfers_4;
000036  f44f4000          MOV      r0,#0x8000
00003a  9007              STR      r0,[sp,#0x1c]
;;;249      DMA_PriCtrlData.DMA_SourceProtCtrl = DMA_SG_InitStruct->DMA_SourceProtCtrl;
00003c  68a8              LDR      r0,[r5,#8]
00003e  9008              STR      r0,[sp,#0x20]
;;;250      DMA_PriCtrlData.DMA_DestProtCtrl = DMA_SG_InitStruct->DMA_DestProtCtrl;
000040  68e8              LDR      r0,[r5,#0xc]
000042  9009              STR      r0,[sp,#0x24]
;;;251    
;;;252      DMA_CtrlDataInit(&DMA_PriCtrlData, &DMA_ControlTable[DMA_Channel]);
000044  4815              LDR      r0,|L11.156|
000046  eb001104          ADD      r1,r0,r4,LSL #4
00004a  4668              MOV      r0,sp
00004c  f7fffffe          BL       DMA_CtrlDataInit
;;;253    
;;;254      /* DMA configuration register */
;;;255      MDR_DMA->CFG = DMA_CFG_MASTER_ENABLE | DMA_SG_InitStruct->DMA_ProtCtrl;
000050  6928              LDR      r0,[r5,#0x10]
000052  f0400001          ORR      r0,r0,#1
000056  4912              LDR      r1,|L11.160|
000058  6048              STR      r0,[r1,#4]
;;;256    
;;;257      /* Burst mode */
;;;258      if (DMA_SG_InitStruct->DMA_UseBurst == DMA_BurstSet)
00005a  7d68              LDRB     r0,[r5,#0x15]
00005c  2801              CMP      r0,#1
00005e  d102              BNE      |L11.102|
;;;259      {
;;;260        MDR_DMA->CHNL_USEBURST_SET = (1 << DMA_Channel);
000060  40a0              LSLS     r0,r0,r4
000062  6188              STR      r0,[r1,#0x18]
000064  e003              B        |L11.110|
                  |L11.102|
;;;261      }
;;;262      else
;;;263      {
;;;264        MDR_DMA->CHNL_USEBURST_CLR = (1 << DMA_Channel);
000066  2001              MOVS     r0,#1
000068  40a0              LSLS     r0,r0,r4
00006a  490d              LDR      r1,|L11.160|
00006c  61c8              STR      r0,[r1,#0x1c]
                  |L11.110|
;;;265      }
;;;266    
;;;267      /* Channel mask clear */
;;;268      MDR_DMA->CHNL_REQ_MASK_CLR = (1 << DMA_Channel);
00006e  2001              MOVS     r0,#1
000070  40a0              LSLS     r0,r0,r4
000072  490b              LDR      r1,|L11.160|
000074  6248              STR      r0,[r1,#0x24]
;;;269    
;;;270      /* Enable channel */
;;;271      MDR_DMA->CHNL_ENABLE_SET = (1 << DMA_Channel);
000076  2001              MOVS     r0,#1
000078  40a0              LSLS     r0,r0,r4
00007a  6288              STR      r0,[r1,#0x28]
;;;272    
;;;273      /* Primary - Alternate control data structure selection */
;;;274      MDR_DMA->CHNL_PRI_ALT_CLR = (1 << DMA_Channel);       /* Use Primary */
00007c  2001              MOVS     r0,#1
00007e  40a0              LSLS     r0,r0,r4
000080  6348              STR      r0,[r1,#0x34]
;;;275    
;;;276      /* Channel priority set */
;;;277      if (DMA_SG_InitStruct->DMA_Priority == DMA_Priority_High)
000082  7d28              LDRB     r0,[r5,#0x14]
000084  2801              CMP      r0,#1
000086  d102              BNE      |L11.142|
;;;278      {
;;;279        MDR_DMA->CHNL_PRIORITY_SET = (1 << DMA_Channel);      /* High priority */
000088  40a0              LSLS     r0,r0,r4
00008a  6388              STR      r0,[r1,#0x38]
00008c  e003              B        |L11.150|
                  |L11.142|
;;;280      }
;;;281      else
;;;282      {
;;;283        MDR_DMA->CHNL_PRIORITY_CLR = (1 << DMA_Channel);      /* Default priority */
00008e  2001              MOVS     r0,#1
000090  40a0              LSLS     r0,r0,r4
000092  4903              LDR      r1,|L11.160|
000094  63c8              STR      r0,[r1,#0x3c]
                  |L11.150|
;;;284      }
;;;285    }
000096  b00a              ADD      sp,sp,#0x28
000098  bd30              POP      {r4,r5,pc}
;;;286    
                          ENDP

00009a  0000              DCW      0x0000
                  |L11.156|
                          DCD      DMA_ControlTable
                  |L11.160|
                          DCD      0x40028000

                          AREA ||i.DMA_SG_StructInit||, CODE, READONLY, ALIGN=1

                  DMA_SG_StructInit PROC
;;;383      */
;;;384    void DMA_SG_StructInit(DMA_Channel_SG_InitTypeDef* DMA_SG_InitStruct)
000000  2100              MOVS     r1,#0
;;;385    {
;;;386      DMA_SG_InitStruct->DMA_SG_TaskArray = 0;
000002  6001              STR      r1,[r0,#0]
;;;387      DMA_SG_InitStruct->DMA_SG_TaskNumber = 0;
000004  6041              STR      r1,[r0,#4]
;;;388      DMA_SG_InitStruct->DMA_SourceProtCtrl = 0;
000006  6081              STR      r1,[r0,#8]
;;;389      DMA_SG_InitStruct->DMA_DestProtCtrl = 0;
000008  60c1              STR      r1,[r0,#0xc]
;;;390      DMA_SG_InitStruct->DMA_ProtCtrl = 0;
00000a  6101              STR      r1,[r0,#0x10]
;;;391      DMA_SG_InitStruct->DMA_Priority = 0;
00000c  7501              STRB     r1,[r0,#0x14]
;;;392      DMA_SG_InitStruct->DMA_UseBurst = 0;
00000e  7541              STRB     r1,[r0,#0x15]
;;;393    }
000010  4770              BX       lr
;;;394    
                          ENDP


                          AREA ||i.DMA_StructInit||, CODE, READONLY, ALIGN=1

                  DMA_StructInit PROC
;;;367      */
;;;368    void DMA_StructInit(DMA_ChannelInitTypeDef* DMA_InitStruct)
000000  2100              MOVS     r1,#0
;;;369    {
;;;370      DMA_InitStruct->DMA_PriCtrlData = 0;
000002  6001              STR      r1,[r0,#0]
;;;371      DMA_InitStruct->DMA_AltCtrlData = 0;
000004  6041              STR      r1,[r0,#4]
;;;372      DMA_InitStruct->DMA_ProtCtrl = 0;
000006  6081              STR      r1,[r0,#8]
;;;373      DMA_InitStruct->DMA_Priority = 0;
000008  7301              STRB     r1,[r0,#0xc]
;;;374      DMA_InitStruct->DMA_UseBurst = 0;
00000a  7341              STRB     r1,[r0,#0xd]
;;;375      DMA_InitStruct->DMA_SelectDataStructure = 0;
00000c  7381              STRB     r1,[r0,#0xe]
;;;376    }
00000e  4770              BX       lr
;;;377    
                          ENDP


                          AREA ||.bss||, DATA, NOINIT, ALIGN=10

                  DMA_ControlTable
                          %        1024

;*** Start embedded assembler ***

#line 1 "C:\\Users\\AN-Mi\\AppData\\Local\\Arm\\Packs\\Keil\\MDR1986BExx\\1.51\\Libraries\\MDR32F9Qx_StdPeriph_Driver\\src\\MDR32F9Qx_dma.c"
	AREA ||.rev16_text||, CODE
	THUMB
	EXPORT |__asm___15_MDR32F9Qx_dma_c_605561c4____REV16|
#line 467 "C:\\Users\\AN-Mi\\AppData\\Local\\Arm\\Packs\\ARM\\CMSIS\\5.5.1\\CMSIS\\Core\\Include\\cmsis_armcc.h"
|__asm___15_MDR32F9Qx_dma_c_605561c4____REV16| PROC
#line 468

 rev16 r0, r0
 bx lr
	ENDP
	AREA ||.revsh_text||, CODE
	THUMB
	EXPORT |__asm___15_MDR32F9Qx_dma_c_605561c4____REVSH|
#line 482
|__asm___15_MDR32F9Qx_dma_c_605561c4____REVSH| PROC
#line 483

 revsh r0, r0
 bx lr
	ENDP
	AREA ||.rrx_text||, CODE
	THUMB
	EXPORT |__asm___15_MDR32F9Qx_dma_c_605561c4____RRX|
#line 669
|__asm___15_MDR32F9Qx_dma_c_605561c4____RRX| PROC
#line 670

 rrx r0, r0
 bx lr
	ENDP

;*** End   embedded assembler ***
