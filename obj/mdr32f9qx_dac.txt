; generated by Component: ARM Compiler 5.06 update 6 (build 750) Tool: ArmCC [4d3637]
; commandline ArmCC [--list --split_sections --debug -c --asm --interleave -o.\obj\mdr32f9qx_dac.o --asm_dir=.\obj\ --list_dir=.\obj\ --depend=.\obj\mdr32f9qx_dac.d --cpu=Cortex-M3 --apcs=interwork -O0 --diag_suppress=9931 -I"..\CAN TEST" -I.\RTE -I.\RTE\Device -I.\RTE\Device\MDR1986BE92 -I.\rtos -I.\rtos\include -I.\RTE\Device\MDR1986BE92 -I.\RTE\_Target_1 -IC:\Users\AN-Mi\AppData\Local\Arm\Packs\ARM\CMSIS\5.5.1\CMSIS\Core\Include -IC:\Users\AN-Mi\AppData\Local\Arm\Packs\ARM\CMSIS\5.5.1\CMSIS\DSP\Include -IC:\Users\AN-Mi\AppData\Local\Arm\Packs\Keil\MDR1986BExx\1.51\Config -IC:\Users\AN-Mi\AppData\Local\Arm\Packs\Keil\MDR1986BExx\1.51\Libraries\CMSIS\CM3\CoreSupport -IC:\Users\AN-Mi\AppData\Local\Arm\Packs\Keil\MDR1986BExx\1.51\Libraries\CMSIS\CM3\DeviceSupport\MDR32F9Qx\inc -IC:\Users\AN-Mi\AppData\Local\Arm\Packs\Keil\MDR1986BExx\1.51\Libraries\MDR32F9Qx_StdPeriph_Driver\inc -D__MICROLIB -D__UVISION_VERSION=527 -D_RTE_ -DUSE_MDR32F9Q2_Rev1 --omf_browse=.\obj\mdr32f9qx_dac.crf C:\Users\AN-Mi\AppData\Local\Arm\Packs\Keil\MDR1986BExx\1.51\Libraries\MDR32F9Qx_StdPeriph_Driver\src\MDR32F9Qx_dac.c]
                          THUMB

                          AREA ||i.DAC1_Cmd||, CODE, READONLY, ALIGN=2

                  DAC1_Cmd PROC
;;;113      */
;;;114    void DAC1_Cmd(FunctionalState NewState)
000000  4601              MOV      r1,r0
;;;115    {
;;;116      uint32_t tmpreg_CFG;
;;;117    
;;;118      /* Check the parameters */
;;;119      assert_param(IS_FUNCTIONAL_STATE(NewState));
;;;120    
;;;121      tmpreg_CFG = MDR_DAC->CFG;
000002  4a05              LDR      r2,|L1.24|
000004  6810              LDR      r0,[r2,#0]
;;;122    
;;;123      /* Form new value */
;;;124      if (NewState != DISABLE)
000006  b111              CBZ      r1,|L1.14|
;;;125      {
;;;126        /* Enable DAC1 by setting the Cfg_ON_DAC0 bit in the DAC_CFG register */
;;;127        tmpreg_CFG |= DAC_CFG_ON_DAC0;
000008  f0400004          ORR      r0,r0,#4
00000c  e001              B        |L1.18|
                  |L1.14|
;;;128      }
;;;129      else
;;;130      {
;;;131        /* Disable DAC1 by resetting the Cfg_ON_DAC0 bit in the DAC_CFG register */
;;;132        tmpreg_CFG &= ~DAC_CFG_ON_DAC0;
00000e  f0200004          BIC      r0,r0,#4
                  |L1.18|
;;;133      }
;;;134    
;;;135      /* Configure DAC_CFG register with new value */
;;;136      MDR_DAC->CFG = tmpreg_CFG;
000012  4a01              LDR      r2,|L1.24|
000014  6010              STR      r0,[r2,#0]
;;;137    }
000016  4770              BX       lr
;;;138    
                          ENDP

                  |L1.24|
                          DCD      0x40090000

                          AREA ||i.DAC1_GetData||, CODE, READONLY, ALIGN=2

                  DAC1_GetData PROC
;;;200      */
;;;201    uint32_t DAC1_GetData(void)
000000  4801              LDR      r0,|L2.8|
;;;202    {
;;;203      return MDR_DAC->DAC1_DATA;
000002  6840              LDR      r0,[r0,#4]
;;;204    }
000004  4770              BX       lr
;;;205    
                          ENDP

000006  0000              DCW      0x0000
                  |L2.8|
                          DCD      0x40090000

                          AREA ||i.DAC1_Init||, CODE, READONLY, ALIGN=2

                  DAC1_Init PROC
;;;73       */
;;;74     void DAC1_Init(uint32_t DAC1_Ref)
000000  4601              MOV      r1,r0
;;;75     {
;;;76       uint32_t tmpreg_CFG;
;;;77     
;;;78       /* Check the parameters */
;;;79       assert_param(IS_DAC1_REF_CONFIG(DAC1_Ref));
;;;80     
;;;81       tmpreg_CFG = MDR_DAC->CFG;
000002  4a03              LDR      r2,|L3.16|
000004  6810              LDR      r0,[r2,#0]
;;;82       tmpreg_CFG &= ~DAC_CFG_M_REF0;
000006  f0200001          BIC      r0,r0,#1
;;;83       tmpreg_CFG += DAC1_Ref;
00000a  4408              ADD      r0,r0,r1
;;;84       MDR_DAC->CFG = tmpreg_CFG;
00000c  6010              STR      r0,[r2,#0]
;;;85     }
00000e  4770              BX       lr
;;;86     
                          ENDP

                  |L3.16|
                          DCD      0x40090000

                          AREA ||i.DAC1_SetData||, CODE, READONLY, ALIGN=2

                  DAC1_SetData PROC
;;;174      */
;;;175    void DAC1_SetData(uint32_t Data)
000000  4901              LDR      r1,|L4.8|
;;;176    {
;;;177      /* Check the parameters */
;;;178      assert_param(IS_DAC_DATA(Data));
;;;179    
;;;180      MDR_DAC->DAC1_DATA = Data;
000002  6048              STR      r0,[r1,#4]
;;;181    }
000004  4770              BX       lr
;;;182    
                          ENDP

000006  0000              DCW      0x0000
                  |L4.8|
                          DCD      0x40090000

                          AREA ||i.DAC2_Cmd||, CODE, READONLY, ALIGN=2

                  DAC2_Cmd PROC
;;;144      */
;;;145    void DAC2_Cmd(FunctionalState NewState)
000000  4601              MOV      r1,r0
;;;146    {
;;;147      uint32_t tmpreg_CFG;
;;;148    
;;;149      /* Check the parameters */
;;;150      assert_param(IS_FUNCTIONAL_STATE(NewState));
;;;151    
;;;152      tmpreg_CFG = MDR_DAC->CFG;
000002  4a05              LDR      r2,|L5.24|
000004  6810              LDR      r0,[r2,#0]
;;;153    
;;;154      /* Form new value */
;;;155      if (NewState != DISABLE)
000006  b111              CBZ      r1,|L5.14|
;;;156      {
;;;157        /* Enable DAC2 by setting the Cfg_ON_DAC1 bit in the DAC_CFG register */
;;;158        tmpreg_CFG |= DAC_CFG_ON_DAC1;
000008  f0400008          ORR      r0,r0,#8
00000c  e001              B        |L5.18|
                  |L5.14|
;;;159      }
;;;160      else
;;;161      {
;;;162        /* Disable DAC2 by resetting the Cfg_ON_DAC1 bit in the DAC_CFG register */
;;;163        tmpreg_CFG &= ~DAC_CFG_ON_DAC1;
00000e  f0200008          BIC      r0,r0,#8
                  |L5.18|
;;;164      }
;;;165    
;;;166      /* Configure DAC_CFG register with new value */
;;;167      MDR_DAC->CFG = tmpreg_CFG;
000012  4a01              LDR      r2,|L5.24|
000014  6010              STR      r0,[r2,#0]
;;;168    }
000016  4770              BX       lr
;;;169    
                          ENDP

                  |L5.24|
                          DCD      0x40090000

                          AREA ||i.DAC2_GetData||, CODE, READONLY, ALIGN=2

                  DAC2_GetData PROC
;;;210      */
;;;211    uint32_t DAC2_GetData(void)
000000  4801              LDR      r0,|L6.8|
;;;212    {
;;;213      return MDR_DAC->DAC2_DATA;
000002  6880              LDR      r0,[r0,#8]
;;;214    }
000004  4770              BX       lr
;;;215    
                          ENDP

000006  0000              DCW      0x0000
                  |L6.8|
                          DCD      0x40090000

                          AREA ||i.DAC2_Init||, CODE, READONLY, ALIGN=2

                  DAC2_Init PROC
;;;94       */
;;;95     void DAC2_Init(uint32_t DAC2_Ref)
000000  4601              MOV      r1,r0
;;;96     {
;;;97       uint32_t tmpreg_CFG;
;;;98     
;;;99       /* Check the parameters */
;;;100      assert_param(IS_DAC2_REF_CONFIG(DAC2_Ref));
;;;101    
;;;102      tmpreg_CFG = MDR_DAC->CFG;
000002  4a03              LDR      r2,|L7.16|
000004  6810              LDR      r0,[r2,#0]
;;;103      tmpreg_CFG &= ~DAC_CFG_M_REF1;
000006  f0200002          BIC      r0,r0,#2
;;;104      tmpreg_CFG += DAC2_Ref;
00000a  4408              ADD      r0,r0,r1
;;;105      MDR_DAC->CFG = tmpreg_CFG;
00000c  6010              STR      r0,[r2,#0]
;;;106    }
00000e  4770              BX       lr
;;;107    
                          ENDP

                  |L7.16|
                          DCD      0x40090000

                          AREA ||i.DAC2_SetData||, CODE, READONLY, ALIGN=2

                  DAC2_SetData PROC
;;;187      */
;;;188    void DAC2_SetData(uint32_t Data)
000000  4901              LDR      r1,|L8.8|
;;;189    {
;;;190      /* Check the parameters */
;;;191      assert_param(IS_DAC_DATA(Data));
;;;192    
;;;193      MDR_DAC->DAC2_DATA = Data;
000002  6088              STR      r0,[r1,#8]
;;;194    }
000004  4770              BX       lr
;;;195    
                          ENDP

000006  0000              DCW      0x0000
                  |L8.8|
                          DCD      0x40090000

                          AREA ||i.DAC_DeInit||, CODE, READONLY, ALIGN=2

                  DAC_DeInit PROC
;;;27       */
;;;28     void DAC_DeInit(void)
000000  2000              MOVS     r0,#0
;;;29     {
;;;30       MDR_DAC->DAC1_DATA = 0;
000002  4902              LDR      r1,|L9.12|
000004  6048              STR      r0,[r1,#4]
;;;31       MDR_DAC->DAC2_DATA = 0;
000006  6088              STR      r0,[r1,#8]
;;;32       MDR_DAC->CFG = 0;
000008  6008              STR      r0,[r1,#0]
;;;33     }
00000a  4770              BX       lr
;;;34     
                          ENDP

                  |L9.12|
                          DCD      0x40090000

                          AREA ||i.DAC_Init||, CODE, READONLY, ALIGN=2

                  DAC_Init PROC
;;;50       */
;;;51     void DAC_Init(uint32_t SyncMode, uint32_t DAC1_Ref, uint32_t DAC2_Ref)
000000  b510              PUSH     {r4,lr}
;;;52     {
000002  4603              MOV      r3,r0
;;;53       uint32_t tmpreg_CFG;
;;;54     
;;;55       /* Check the parameters */
;;;56       assert_param(IS_DAC_SYNC_MODE(SyncMode));
;;;57       assert_param(IS_DAC1_REF_CONFIG(DAC1_Ref));
;;;58       assert_param(IS_DAC2_REF_CONFIG(DAC2_Ref));
;;;59     
;;;60       tmpreg_CFG = MDR_DAC->CFG;
000004  4c04              LDR      r4,|L10.24|
000006  6820              LDR      r0,[r4,#0]
;;;61       tmpreg_CFG &= ~(DAC_CFG_SYNC_A | DAC_CFG_M_REF0 | DAC_CFG_M_REF1);
000008  f0200013          BIC      r0,r0,#0x13
;;;62       tmpreg_CFG += SyncMode + DAC1_Ref + DAC2_Ref;
00000c  185c              ADDS     r4,r3,r1
00000e  4414              ADD      r4,r4,r2
000010  4420              ADD      r0,r0,r4
;;;63       MDR_DAC->CFG = tmpreg_CFG;
000012  4c01              LDR      r4,|L10.24|
000014  6020              STR      r0,[r4,#0]
;;;64     }
000016  bd10              POP      {r4,pc}
;;;65     
                          ENDP

                  |L10.24|
                          DCD      0x40090000

;*** Start embedded assembler ***

#line 1 "C:\\Users\\AN-Mi\\AppData\\Local\\Arm\\Packs\\Keil\\MDR1986BExx\\1.51\\Libraries\\MDR32F9Qx_StdPeriph_Driver\\src\\MDR32F9Qx_dac.c"
	AREA ||.rev16_text||, CODE
	THUMB
	EXPORT |__asm___15_MDR32F9Qx_dac_c_4da4a0a9____REV16|
#line 467 "C:\\Users\\AN-Mi\\AppData\\Local\\Arm\\Packs\\ARM\\CMSIS\\5.5.1\\CMSIS\\Core\\Include\\cmsis_armcc.h"
|__asm___15_MDR32F9Qx_dac_c_4da4a0a9____REV16| PROC
#line 468

 rev16 r0, r0
 bx lr
	ENDP
	AREA ||.revsh_text||, CODE
	THUMB
	EXPORT |__asm___15_MDR32F9Qx_dac_c_4da4a0a9____REVSH|
#line 482
|__asm___15_MDR32F9Qx_dac_c_4da4a0a9____REVSH| PROC
#line 483

 revsh r0, r0
 bx lr
	ENDP
	AREA ||.rrx_text||, CODE
	THUMB
	EXPORT |__asm___15_MDR32F9Qx_dac_c_4da4a0a9____RRX|
#line 669
|__asm___15_MDR32F9Qx_dac_c_4da4a0a9____RRX| PROC
#line 670

 rrx r0, r0
 bx lr
	ENDP

;*** End   embedded assembler ***
