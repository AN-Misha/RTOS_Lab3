; generated by Component: ARM Compiler 5.06 update 5 (build 528) Tool: ArmCC [4d3621]
; commandline ArmCC [--list --split_sections --debug -c --asm --interleave -o.\obj\menu.o --asm_dir=.\obj\ --list_dir=.\obj\ --depend=.\obj\menu.d --cpu=Cortex-M3 --apcs=interwork -O0 --diag_suppress=9931 -I"..\CAN TEST" -I.\RTE -I.\RTE\Device -I.\RTE\Device\MDR1986BE92 -I.\rtos -I.\rtos\include -I.\RTE\Device\MDR1986BE92 -I.\RTE\_Target_1 -IC:\Keil_v5\ARM\PACK\ARM\CMSIS\5.0.1\CMSIS\Include -IC:\Keil_v5\ARM\PACK\Keil\MDR1986BExx\1.4\Config -IC:\Keil_v5\ARM\PACK\Keil\MDR1986BExx\1.4\Libraries\CMSIS\CM3\CoreSupport -IC:\Keil_v5\ARM\PACK\Keil\MDR1986BExx\1.4\Libraries\CMSIS\CM3\DeviceSupport\MDR32F9Qx\inc -IC:\Keil_v5\ARM\PACK\Keil\MDR1986BExx\1.4\Libraries\MDR32F9Qx_StdPeriph_Driver\inc -D__MICROLIB -D__UVISION_VERSION=524 -D_RTE_ -DUSE_MDR32F9Q2_Rev1 --omf_browse=.\obj\menu.crf menu.c]
                          THUMB

                          AREA ||i.Task_DSP||, CODE, READONLY, ALIGN=2

                          REQUIRE _printf_pre_padding
                          REQUIRE _printf_percent
                          REQUIRE _printf_widthprec
                          REQUIRE _printf_f
                          REQUIRE _printf_fp_dec
                  Task_DSP PROC
;;;249    // Задача обработчик буфера оцифрованных значений
;;;250    void Task_DSP(void)
000000  b08c              SUB      sp,sp,#0x30
;;;251    {
;;;252        arm_status fft_status;
;;;253        uint16_t *buffer_ADC,front1, front2, front3, counter = 0, tim_period;
000002  2700              MOVS     r7,#0
;;;254        uint32_t i,average,summa,period = 0;
000004  2000              MOVS     r0,#0
000006  9009              STR      r0,[sp,#0x24]
;;;255        float summ_U = 0;
000008  9008              STR      r0,[sp,#0x20]
;;;256        State state = freq_meas;
00000a  9007              STR      r0,[sp,#0x1c]
;;;257    	while(1)
00000c  e19d              B        |L1.842|
                  |L1.14|
;;;258    	{
;;;259    		// Объявление указателя на буфер обработки данных 
;;;260    		
;;;261            
;;;262            
;;;263    		float U;
;;;264    		/* Реализовано ожидание события с помощью двоичного
;;;265    		семафора. Семафор после создания становится
;;;266    		доступен (так, как будто его кто-то отдал).
;;;267    		Поэтому сразу после запуска планировщика задача
;;;268    		захватит его. Второй раз сделать это ей не удастся,
;;;269    		и она будет ожидать, находясь в блокированном
;;;270    		состоянии, пока семафор не отдаст обработчик
;;;271    		прерывания. Время ожидания задано равным
;;;272    		бесконечности, поэтому нет необходимости проверять
;;;273    		возвращаемое функцией xSemaphoreTake() значение. */
;;;274    		xSemaphoreTake(SemaphoreDMA, portMAX_DELAY);
00000e  2300              MOVS     r3,#0
000010  1e5a              SUBS     r2,r3,#1
000012  4619              MOV      r1,r3
000014  48cd              LDR      r0,|L1.844|
000016  6800              LDR      r0,[r0,#0]  ; SemaphoreDMA
000018  f7fffffe          BL       xQueueGenericReceive
;;;275    		TIMER_Cmd(MDR_TIMER2, DISABLE);
00001c  2100              MOVS     r1,#0
00001e  48cc              LDR      r0,|L1.848|
000020  f7fffffe          BL       TIMER_Cmd
;;;276    		//Задача разблокирована, семафор взят
;;;277    		if(ping_pong==PING)
000024  48cb              LDR      r0,|L1.852|
000026  6800              LDR      r0,[r0,#0]  ; ping_pong
000028  b900              CBNZ     r0,|L1.44|
;;;278    		{
;;;279    			//Заполняется DMA буфер пинг
;;;280    				// В указатель buffer_ADC записывается начальный адрес массива буфера понг
;;;281    			buffer_ADC=ADC_Buffer_pong;
00002a  4dcb              LDR      r5,|L1.856|
                  |L1.44|
;;;282    		}
;;;283    		if(ping_pong==PONG)
00002c  48c9              LDR      r0,|L1.852|
00002e  6800              LDR      r0,[r0,#0]  ; ping_pong
000030  2801              CMP      r0,#1
000032  d100              BNE      |L1.54|
;;;284    		{
;;;285    			//Заполняется DMA буфер понг
;;;286    			// В указатель buffer_ADC записывается начальный адрес массива буфера пинг
;;;287    			buffer_ADC=ADC_Buffer_ping;
000034  4dc9              LDR      r5,|L1.860|
                  |L1.54|
;;;288    		}
;;;289    		// Обработка буфера оцифрованных значений
;;;290            
;;;291    		if(state == freq_meas)
000036  9807              LDR      r0,[sp,#0x1c]
000038  2800              CMP      r0,#0
00003a  d17c              BNE      |L1.310|
;;;292            {
;;;293                counter++;
00003c  1c78              ADDS     r0,r7,#1
00003e  b287              UXTH     r7,r0
;;;294                if(counter == 5)
000040  2f05              CMP      r7,#5
000042  d179              BNE      |L1.312|
;;;295                {
;;;296                    summa=0;
000044  2000              MOVS     r0,#0
000046  900a              STR      r0,[sp,#0x28]
;;;297                    for(i=0;i<ADC_BUFFER_SIZE;i++)
000048  2400              MOVS     r4,#0
00004a  e005              B        |L1.88|
                  |L1.76|
;;;298                    {
;;;299                        summa=buffer_ADC[i]+summa;
00004c  f8351014          LDRH     r1,[r5,r4,LSL #1]
000050  980a              LDR      r0,[sp,#0x28]
000052  4408              ADD      r0,r0,r1
000054  900a              STR      r0,[sp,#0x28]
000056  1c64              ADDS     r4,r4,#1              ;297
                  |L1.88|
000058  f5b47f16          CMP      r4,#0x258             ;297
00005c  d3f6              BCC      |L1.76|
;;;300                    }
;;;301                    // Получение среднего значения
;;;302                    average=summa/ADC_BUFFER_SIZE;
00005e  f44f7116          MOV      r1,#0x258
000062  980a              LDR      r0,[sp,#0x28]
000064  fbb0f6f1          UDIV     r6,r0,r1
;;;303                    
;;;304                    if(buffer_ADC[0] > average)
000068  8828              LDRH     r0,[r5,#0]
00006a  42b0              CMP      r0,r6
00006c  d929              BLS      |L1.194|
;;;305                    {
;;;306                       for(i = 0; i < ADC_BUFFER_SIZE; i++)
00006e  2400              MOVS     r4,#0
000070  e007              B        |L1.130|
                  |L1.114|
;;;307                       {
;;;308                          if(buffer_ADC[i] < average)
000072  f8350014          LDRH     r0,[r5,r4,LSL #1]
000076  42b0              CMP      r0,r6
000078  d202              BCS      |L1.128|
;;;309                          {
;;;310                              front1 = i;
00007a  fa1ff984          UXTH     r9,r4
;;;311                              break;
00007e  e003              B        |L1.136|
                  |L1.128|
000080  1c64              ADDS     r4,r4,#1              ;306
                  |L1.130|
000082  f5b47f16          CMP      r4,#0x258             ;306
000086  d3f4              BCC      |L1.114|
                  |L1.136|
000088  bf00              NOP      
;;;312                          }
;;;313                       }
;;;314                       for(i = front1; i < ADC_BUFFER_SIZE; i++)
00008a  464c              MOV      r4,r9
00008c  e007              B        |L1.158|
                  |L1.142|
;;;315                       {
;;;316                          if(buffer_ADC[i] > average)
00008e  f8350014          LDRH     r0,[r5,r4,LSL #1]
000092  42b0              CMP      r0,r6
000094  d902              BLS      |L1.156|
;;;317                          {
;;;318                              front2 = i;
000096  fa1ffa84          UXTH     r10,r4
;;;319                              break;
00009a  e003              B        |L1.164|
                  |L1.156|
00009c  1c64              ADDS     r4,r4,#1              ;314
                  |L1.158|
00009e  f5b47f16          CMP      r4,#0x258             ;314
0000a2  d3f4              BCC      |L1.142|
                  |L1.164|
0000a4  bf00              NOP      
;;;320                          }
;;;321                       }
;;;322                                 for(i = front2; i < ADC_BUFFER_SIZE; i++)
0000a6  4654              MOV      r4,r10
0000a8  e007              B        |L1.186|
                  |L1.170|
;;;323                       {
;;;324                          if(buffer_ADC[i] < average)
0000aa  f8350014          LDRH     r0,[r5,r4,LSL #1]
0000ae  42b0              CMP      r0,r6
0000b0  d202              BCS      |L1.184|
;;;325                          {
;;;326                              front3 = i;
0000b2  b2a0              UXTH     r0,r4
0000b4  900b              STR      r0,[sp,#0x2c]
;;;327                              break;
0000b6  e003              B        |L1.192|
                  |L1.184|
0000b8  1c64              ADDS     r4,r4,#1              ;322
                  |L1.186|
0000ba  f5b47f16          CMP      r4,#0x258             ;322
0000be  d3f4              BCC      |L1.170|
                  |L1.192|
0000c0  e029              B        |L1.278|
                  |L1.194|
;;;328                          }
;;;329                       } 
;;;330                    }
;;;331                    
;;;332                        
;;;333                        
;;;334                        //обработка буфера иная
;;;335                    else
;;;336                    {
;;;337                       for(i = 0; i < ADC_BUFFER_SIZE; i++)
0000c2  2400              MOVS     r4,#0
0000c4  e007              B        |L1.214|
                  |L1.198|
;;;338                       {
;;;339                          if(buffer_ADC[i] > average)
0000c6  f8350014          LDRH     r0,[r5,r4,LSL #1]
0000ca  42b0              CMP      r0,r6
0000cc  d902              BLS      |L1.212|
;;;340                          {
;;;341                              front1 = i;
0000ce  fa1ff984          UXTH     r9,r4
;;;342                              break;
0000d2  e003              B        |L1.220|
                  |L1.212|
0000d4  1c64              ADDS     r4,r4,#1              ;337
                  |L1.214|
0000d6  f5b47f16          CMP      r4,#0x258             ;337
0000da  d3f4              BCC      |L1.198|
                  |L1.220|
0000dc  bf00              NOP      
;;;343                          }
;;;344                       }
;;;345                       for(i = front1; i < ADC_BUFFER_SIZE; i++)
0000de  464c              MOV      r4,r9
0000e0  e007              B        |L1.242|
                  |L1.226|
;;;346                       {   
;;;347                          if(buffer_ADC[i] < average)
0000e2  f8350014          LDRH     r0,[r5,r4,LSL #1]
0000e6  42b0              CMP      r0,r6
0000e8  d202              BCS      |L1.240|
;;;348                          {
;;;349                              front2 = i;
0000ea  fa1ffa84          UXTH     r10,r4
;;;350                              break;
0000ee  e003              B        |L1.248|
                  |L1.240|
0000f0  1c64              ADDS     r4,r4,#1              ;345
                  |L1.242|
0000f2  f5b47f16          CMP      r4,#0x258             ;345
0000f6  d3f4              BCC      |L1.226|
                  |L1.248|
0000f8  bf00              NOP      
;;;351                          }
;;;352                       }
;;;353                       for(i = front2; i < ADC_BUFFER_SIZE; i++)
0000fa  4654              MOV      r4,r10
0000fc  e007              B        |L1.270|
                  |L1.254|
;;;354                       {
;;;355                          if(buffer_ADC[i] > average)
0000fe  f8350014          LDRH     r0,[r5,r4,LSL #1]
000102  42b0              CMP      r0,r6
000104  d902              BLS      |L1.268|
;;;356                          {
;;;357                              front3 = i;
000106  b2a0              UXTH     r0,r4
000108  900b              STR      r0,[sp,#0x2c]
;;;358                              break;
00010a  e003              B        |L1.276|
                  |L1.268|
00010c  1c64              ADDS     r4,r4,#1              ;353
                  |L1.270|
00010e  f5b47f16          CMP      r4,#0x258             ;353
000112  d3f4              BCC      |L1.254|
                  |L1.276|
000114  bf00              NOP      
                  |L1.278|
;;;359                          }
;;;360                       } 
;;;361                    }
;;;362    								
;;;363                    period = (front3 - front1);
000116  980b              LDR      r0,[sp,#0x2c]
000118  eba00009          SUB      r0,r0,r9
00011c  9009              STR      r0,[sp,#0x24]
;;;364                    tim_period = ((((float)period/ADC_FREQ) * 10000000) / 32) - 1;//(20000 / 32)/(ADC_FREQ/period);  
00011e  9809              LDR      r0,[sp,#0x24]
000120  f7fffffe          BL       __aeabi_ui2f
000124  498e              LDR      r1,|L1.864|
000126  9001              STR      r0,[sp,#4]
000128  f7fffffe          BL       __aeabi_fdiv
00012c  498d              LDR      r1,|L1.868|
00012e  9002              STR      r0,[sp,#8]
000130  f7fffffe          BL       __aeabi_fmul
000134  e001              B        |L1.314|
                  |L1.310|
000136  e044              B        |L1.450|
                  |L1.312|
000138  e102              B        |L1.832|
                  |L1.314|
00013a  f04f4184          MOV      r1,#0x42000000
00013e  9003              STR      r0,[sp,#0xc]
000140  f7fffffe          BL       __aeabi_fdiv
000144  f04f517e          MOV      r1,#0x3f800000
000148  9004              STR      r0,[sp,#0x10]
00014a  f7fffffe          BL       __aeabi_fsub
00014e  9005              STR      r0,[sp,#0x14]
000150  f7fffffe          BL       __aeabi_f2uiz
000154  fa1ffb80          UXTH     r11,r0
;;;365    				//tim_period = (312 /(ADC_FREQ/period))*999;				
;;;366                    U = ADC_FREQ/period;
000158  f2427110          MOV      r1,#0x2710
00015c  9809              LDR      r0,[sp,#0x24]
00015e  fbb1f0f0          UDIV     r0,r1,r0
000162  9005              STR      r0,[sp,#0x14]
000164  f7fffffe          BL       __aeabi_ui2f
000168  9006              STR      r0,[sp,#0x18]
;;;367    				
;;;368                    sprintf(message , "F = %5.3fHz", U);
00016a  9806              LDR      r0,[sp,#0x18]
00016c  f7fffffe          BL       __aeabi_f2d
000170  4602              MOV      r2,r0
000172  460b              MOV      r3,r1
000174  e9cd0104          STRD     r0,r1,[sp,#0x10]
000178  a17b              ADR      r1,|L1.872|
00017a  487e              LDR      r0,|L1.884|
00017c  f7fffffe          BL       __2sprintf
;;;369                    U_MLT_Put_String (message, 4);
000180  2104              MOVS     r1,#4
000182  487c              LDR      r0,|L1.884|
000184  f7fffffe          BL       U_MLT_Put_String
;;;370    								
;;;371                    DMA_Cmd (DMA_Channel_ADC1, DISABLE);
000188  2100              MOVS     r1,#0
00018a  2008              MOVS     r0,#8
00018c  f7fffffe          BL       DMA_Cmd
;;;372                    TIMER_Cmd(MDR_TIMER2, DISABLE);
000190  2100              MOVS     r1,#0
000192  486f              LDR      r0,|L1.848|
000194  f7fffffe          BL       TIMER_Cmd
;;;373    				//MDR_TIMER2->STATUS = 0;
;;;374    				//tim_period=MDR_TIMER2->ARR;
;;;375                    
;;;376    				//MDR_TIMER2->ARR=tim_period;
;;;377    				//tim_period=MDR_TIMER2->ARR;
;;;378    								
;;;379                    TIM_CntInit.TIMER_Period = tim_period;
000198  4877              LDR      r0,|L1.888|
00019a  f8a0b004          STRH     r11,[r0,#4]
;;;380                    period = 0;
00019e  2000              MOVS     r0,#0
0001a0  9009              STR      r0,[sp,#0x24]
;;;381                    //ping_pong = PING;
;;;382                    //DMA_InitStructure.DMA_DestBaseAddr  =(uint32_t) &ADC_Buffer_ping;
;;;383                    //DMA_Init (DMA_Channel_ADC1, &DMA_Channel_InitStructure);
;;;384                    TIMER_CntInit(MDR_TIMER2, &TIM_CntInit);
0001a2  4975              LDR      r1,|L1.888|
0001a4  486a              LDR      r0,|L1.848|
0001a6  f7fffffe          BL       TIMER_CntInit
;;;385                    
;;;386                    TIMER_Cmd(MDR_TIMER2, ENABLE);
0001aa  2101              MOVS     r1,#1
0001ac  4868              LDR      r0,|L1.848|
0001ae  f7fffffe          BL       TIMER_Cmd
;;;387    								//Timer1_init(tim_period);
;;;388    				DMA_Cmd (DMA_Channel_ADC1, ENABLE);
0001b2  2101              MOVS     r1,#1
0001b4  2008              MOVS     r0,#8
0001b6  f7fffffe          BL       DMA_Cmd
;;;389                    
;;;390                    state = fft;
0001ba  2001              MOVS     r0,#1
0001bc  9007              STR      r0,[sp,#0x1c]
;;;391    				counter = 0;
0001be  2700              MOVS     r7,#0
                  |L1.448|
0001c0  e0be              B        |L1.832|
                  |L1.450|
;;;392                }
;;;393    						 
;;;394            
;;;395            }
;;;396            else if(state == fft)
0001c2  9807              LDR      r0,[sp,#0x1c]
0001c4  2801              CMP      r0,#1
0001c6  d1fb              BNE      |L1.448|
;;;397            {
;;;398                counter++;       //very govnocod
0001c8  1c78              ADDS     r0,r7,#1
0001ca  b287              UXTH     r7,r0
;;;399                if(counter == 5)
0001cc  2f05              CMP      r7,#5
0001ce  d1f7              BNE      |L1.448|
;;;400                {
;;;401                    counter = 0;
0001d0  2700              MOVS     r7,#0
;;;402                    fft_status = arm_rfft_init_q15(&S, FFT_SIZE,0, 1);
0001d2  2301              MOVS     r3,#1
0001d4  2200              MOVS     r2,#0
0001d6  2120              MOVS     r1,#0x20
0001d8  4868              LDR      r0,|L1.892|
0001da  f7fffffe          BL       arm_rfft_init_q15
0001de  4680              MOV      r8,r0
;;;403                    if(fft_status == ARM_MATH_SUCCESS)
0001e0  f1b80f00          CMP      r8,#0
0001e4  d17d              BNE      |L1.738|
;;;404                    {
;;;405                        summ_U = 0;
0001e6  2000              MOVS     r0,#0
0001e8  9008              STR      r0,[sp,#0x20]
;;;406                        arm_rfft_q15(&S, (q15_t *)&buffer_ADC[0], &fft_res[0]);
0001ea  4a65              LDR      r2,|L1.896|
0001ec  4629              MOV      r1,r5
0001ee  4863              LDR      r0,|L1.892|
0001f0  f7fffffe          BL       arm_rfft_q15
;;;407                        for(i = 0; i < FFT_SIZE*2; i++)
0001f4  2400              MOVS     r4,#0
0001f6  e008              B        |L1.522|
                  |L1.504|
;;;408                        {
;;;409                            fft_res[i]<<=FFT_UPSCALE;
0001f8  4861              LDR      r0,|L1.896|
0001fa  f8300014          LDRH     r0,[r0,r4,LSL #1]
0001fe  0100              LSLS     r0,r0,#4
000200  b200              SXTH     r0,r0
000202  495f              LDR      r1,|L1.896|
000204  f8210014          STRH     r0,[r1,r4,LSL #1]
000208  1c64              ADDS     r4,r4,#1              ;407
                  |L1.522|
00020a  2c40              CMP      r4,#0x40              ;407
00020c  d3f4              BCC      |L1.504|
;;;410                        }
;;;411                        arm_cmplx_mag_q15(&fft_res[0], (q15_t *)&fft_amp[0], FFT_SIZE);
00020e  2220              MOVS     r2,#0x20
000210  495c              LDR      r1,|L1.900|
000212  485b              LDR      r0,|L1.896|
000214  f7fffffe          BL       arm_cmplx_mag_q15
;;;412    										
;;;413    										for(i = 1; i < FFT_SIZE/2; i++)
000218  2401              MOVS     r4,#1
00021a  e011              B        |L1.576|
                  |L1.540|
;;;414                        {
;;;415                            fft_amp_norm[i] = (float)fft_amp[i] / (float)fft_amp[1];
00021c  4959              LDR      r1,|L1.900|
00021e  8848              LDRH     r0,[r1,#2]  ; fft_amp
000220  f7fffffe          BL       __aeabi_ui2f
000224  4957              LDR      r1,|L1.900|
000226  9005              STR      r0,[sp,#0x14]
000228  f8310014          LDRH     r0,[r1,r4,LSL #1]
00022c  f7fffffe          BL       __aeabi_ui2f
000230  9004              STR      r0,[sp,#0x10]
000232  9905              LDR      r1,[sp,#0x14]
000234  f7fffffe          BL       __aeabi_fdiv
000238  4953              LDR      r1,|L1.904|
00023a  f8410024          STR      r0,[r1,r4,LSL #2]
00023e  1c64              ADDS     r4,r4,#1              ;413
                  |L1.576|
000240  2c10              CMP      r4,#0x10              ;413
000242  d3eb              BCC      |L1.540|
;;;416                        }
;;;417    										
;;;418                        for(i = 2; i < FFT_SIZE/2; i++)
000244  2402              MOVS     r4,#2
000246  e00c              B        |L1.610|
                  |L1.584|
;;;419                        {
;;;420                            summ_U += fft_amp_norm[i] * fft_amp_norm[i];
000248  4a4f              LDR      r2,|L1.904|
00024a  f8521024          LDR      r1,[r2,r4,LSL #2]
00024e  f8520024          LDR      r0,[r2,r4,LSL #2]
000252  f7fffffe          BL       __aeabi_fmul
000256  9005              STR      r0,[sp,#0x14]
000258  9908              LDR      r1,[sp,#0x20]
00025a  f7fffffe          BL       __aeabi_fadd
00025e  9008              STR      r0,[sp,#0x20]
000260  1c64              ADDS     r4,r4,#1              ;418
                  |L1.610|
000262  2c10              CMP      r4,#0x10              ;418
000264  d3f0              BCC      |L1.584|
;;;421                        }
;;;422                        thd = 100*(sqrt(summ_U));
000266  9808              LDR      r0,[sp,#0x20]
000268  f7fffffe          BL       __aeabi_f2d
00026c  e9cd0100          STRD     r0,r1,[sp,#0]
000270  f7fffffe          BL       sqrt
000274  2200              MOVS     r2,#0
000276  4b45              LDR      r3,|L1.908|
000278  e9cd0102          STRD     r0,r1,[sp,#8]
00027c  f7fffffe          BL       __aeabi_dmul
000280  e9cd0104          STRD     r0,r1,[sp,#0x10]
000284  f7fffffe          BL       __aeabi_d2f
000288  4941              LDR      r1,|L1.912|
00028a  6008              STR      r0,[r1,#0]  ; thd
;;;423                        sprintf(message , "THD = %3.3f%%", thd);
00028c  4608              MOV      r0,r1
00028e  6800              LDR      r0,[r0,#0]  ; thd
000290  f7fffffe          BL       __aeabi_f2d
000294  4602              MOV      r2,r0
000296  460b              MOV      r3,r1
000298  e9cd0104          STRD     r0,r1,[sp,#0x10]
00029c  a13d              ADR      r1,|L1.916|
00029e  4835              LDR      r0,|L1.884|
0002a0  f7fffffe          BL       __2sprintf
;;;424                        U_MLT_Put_String (message, 5);
0002a4  2105              MOVS     r1,#5
0002a6  4833              LDR      r0,|L1.884|
0002a8  f7fffffe          BL       U_MLT_Put_String
;;;425                        
;;;426                        
;;;427                        DMA_Cmd (DMA_Channel_ADC1, DISABLE);
0002ac  2100              MOVS     r1,#0
0002ae  2008              MOVS     r0,#8
0002b0  f7fffffe          BL       DMA_Cmd
;;;428      //                  TIMER_Cmd(MDR_TIMER1, DISABLE);
;;;429    					//MDR_TIMER2->STATUS = 0;
;;;430                        //tim_period=MDR_TIMER2->ARR;
;;;431    					tim_period = 999;
0002b4  f2403be7          MOV      r11,#0x3e7
;;;432                        TIM_CntInit.TIMER_Period = tim_period;
0002b8  482f              LDR      r0,|L1.888|
0002ba  f8a0b004          STRH     r11,[r0,#4]
;;;433    					//MDR_TIMER2->ARR=tim_period;
;;;434                        //tim_period=MDR_TIMER2->ARR;
;;;435                        period = 0;
0002be  2000              MOVS     r0,#0
0002c0  9009              STR      r0,[sp,#0x24]
;;;436                        //ping_pong = PING;
;;;437                        //DMA_InitStructure.DMA_DestBaseAddr  =(uint32_t) &ADC_Buffer_ping;
;;;438                        //DMA_Init (DMA_Channel_ADC1, &DMA_Channel_InitStructure);
;;;439                        TIMER_CntInit(MDR_TIMER2, &TIM_CntInit);
0002c2  492d              LDR      r1,|L1.888|
0002c4  4822              LDR      r0,|L1.848|
0002c6  f7fffffe          BL       TIMER_CntInit
;;;440                        DMA_Cmd (DMA_Channel_ADC1, ENABLE);
0002ca  2101              MOVS     r1,#1
0002cc  2008              MOVS     r0,#8
0002ce  f7fffffe          BL       DMA_Cmd
;;;441                        TIMER_Cmd(MDR_TIMER2, ENABLE);
0002d2  2101              MOVS     r1,#1
0002d4  481e              LDR      r0,|L1.848|
0002d6  f7fffffe          BL       TIMER_Cmd
;;;442                        
;;;443    										
;;;444    										//Timer1_init(999);
;;;445    										//DMA_Cmd (DMA_Channel_ADC1, ENABLE);
;;;446    										
;;;447    										
;;;448                        if(thd < 6)
0002da  4932              LDR      r1,|L1.932|
0002dc  482c              LDR      r0,|L1.912|
0002de  6800              LDR      r0,[r0,#0]  ; thd
0002e0  e000              B        |L1.740|
                  |L1.738|
0002e2  e02b              B        |L1.828|
                  |L1.740|
0002e4  f7fffffe          BL       __aeabi_cfcmple
0002e8  d20b              BCS      |L1.770|
;;;449                        {
;;;450                            signal = s_sin;
0002ea  2000              MOVS     r0,#0
0002ec  492e              LDR      r1,|L1.936|
0002ee  7008              STRB     r0,[r1,#0]
;;;451                            U_MLT_Put_Image (image_sin, 0, 0, 1, 3);
0002f0  2003              MOVS     r0,#3
0002f2  2301              MOVS     r3,#1
0002f4  2200              MOVS     r2,#0
0002f6  4611              MOV      r1,r2
0002f8  9000              STR      r0,[sp,#0]
0002fa  482c              LDR      r0,|L1.940|
0002fc  f7fffffe          BL       U_MLT_Put_Image
000300  e01c              B        |L1.828|
                  |L1.770|
;;;452                        }
;;;453                        else if(thd < 30)
000302  492b              LDR      r1,|L1.944|
000304  4822              LDR      r0,|L1.912|
000306  6800              LDR      r0,[r0,#0]  ; thd
000308  f7fffffe          BL       __aeabi_cfcmple
00030c  d20b              BCS      |L1.806|
;;;454                        {
;;;455                            signal = s_ramp;
00030e  2001              MOVS     r0,#1
000310  4925              LDR      r1,|L1.936|
000312  7008              STRB     r0,[r1,#0]
;;;456                            U_MLT_Put_Image (image_ramp, 0, 0, 1, 3);
000314  2003              MOVS     r0,#3
000316  2301              MOVS     r3,#1
000318  2200              MOVS     r2,#0
00031a  4611              MOV      r1,r2
00031c  9000              STR      r0,[sp,#0]
00031e  4825              LDR      r0,|L1.948|
000320  f7fffffe          BL       U_MLT_Put_Image
000324  e00a              B        |L1.828|
                  |L1.806|
;;;457                        }
;;;458                        else
;;;459                        {
;;;460                            signal = s_square;
000326  2002              MOVS     r0,#2
000328  491f              LDR      r1,|L1.936|
00032a  7008              STRB     r0,[r1,#0]
;;;461                            U_MLT_Put_Image (image_square, 0, 0, 1, 3);
00032c  2003              MOVS     r0,#3
00032e  2301              MOVS     r3,#1
000330  2200              MOVS     r2,#0
000332  4611              MOV      r1,r2
000334  9000              STR      r0,[sp,#0]
000336  4820              LDR      r0,|L1.952|
000338  f7fffffe          BL       U_MLT_Put_Image
                  |L1.828|
;;;462                        }
;;;463    																				
;;;464                    }
;;;465    				state = freq_meas;
00033c  2000              MOVS     r0,#0
00033e  9007              STR      r0,[sp,#0x1c]
                  |L1.832|
;;;466                }
;;;467            }
;;;468                
;;;469                
;;;470    
;;;471            
;;;472    		// Преобразование среднего значения АЦП в измеренное напряжение
;;;473    		// U_ADC_U равно 3.3, напряжение питания
;;;474    		// U_ADC_D равно 0x1000 (212=4096) – максимальное значение 12-разрядного АЦП
;;;475    		// U_ADC_U и U_ADC_D определены в файле adc.h
;;;476    		//U = ADC_FREQ/period; // получается результат вещественный в вольтах
;;;477    		// Вывести результат измерения напряжения на ЖКИ
;;;478    		// формирует строку символов с вставкой 5-символьного поля - вещественное значение с 3 цифрами после запятой 
;;;479    		TIMER_Cmd(MDR_TIMER2, ENABLE);
000340  2101              MOVS     r1,#1
000342  4803              LDR      r0,|L1.848|
000344  f7fffffe          BL       TIMER_Cmd
;;;480    	}
000348  bf00              NOP      
                  |L1.842|
00034a  e660              B        |L1.14|
;;;481    	
;;;482    }	
                          ENDP

                  |L1.844|
                          DCD      SemaphoreDMA
                  |L1.848|
                          DCD      0x40078000
                  |L1.852|
                          DCD      ping_pong
                  |L1.856|
                          DCD      ADC_Buffer_pong
                  |L1.860|
                          DCD      ADC_Buffer_ping
                  |L1.864|
                          DCD      0x461c4000
                  |L1.868|
                          DCD      0x4b189680
                  |L1.872|
000368  46203d20          DCB      "F = %5.3fHz",0
00036c  25352e33
000370  66487a00
                  |L1.884|
                          DCD      message
                  |L1.888|
                          DCD      TIM_CntInit
                  |L1.892|
                          DCD      S
                  |L1.896|
                          DCD      fft_res
                  |L1.900|
                          DCD      fft_amp
                  |L1.904|
                          DCD      fft_amp_norm
                  |L1.908|
                          DCD      0x40590000
                  |L1.912|
                          DCD      thd
                  |L1.916|
000394  54484420          DCB      "THD = %3.3f%%",0
000398  3d202533
00039c  2e336625
0003a0  2500    
0003a2  00                DCB      0
0003a3  00                DCB      0
                  |L1.932|
                          DCD      0x40c00000
                  |L1.936|
                          DCD      signal
                  |L1.940|
                          DCD      image_sin
                  |L1.944|
                          DCD      0x41f00000
                  |L1.948|
                          DCD      image_ramp
                  |L1.952|
                          DCD      image_square

                          AREA ||i.Task_output||, CODE, READONLY, ALIGN=2

                  Task_output PROC
;;;231    // Задача для работы с выводом по UART
;;;232    void Task_output(void)
000000  e014              B        |L2.44|
                  |L2.2|
;;;233    {
;;;234    	  static uint8_t buffer;
;;;235      while(1)
;;;236    	{
;;;237    		if (xQueueReceive(stdout_queue, &buffer, portMAX_DELAY) == pdPASS)
000002  2300              MOVS     r3,#0
000004  1e5a              SUBS     r2,r3,#1
000006  490a              LDR      r1,|L2.48|
000008  480a              LDR      r0,|L2.52|
00000a  6800              LDR      r0,[r0,#0]  ; stdout_queue
00000c  f7fffffe          BL       xQueueGenericReceive
000010  2801              CMP      r0,#1
000012  d10b              BNE      |L2.44|
;;;238        {
;;;239    				  /* Ожидание флага освобождения буфера передачи (TXFE) */
;;;240    					while (UART_GetFlagStatus(UART_IO, UART_FLAG_TXFE) != SET);
000014  bf00              NOP      
                  |L2.22|
000016  2180              MOVS     r1,#0x80
000018  4807              LDR      r0,|L2.56|
00001a  f7fffffe          BL       UART_GetFlagStatus
00001e  2801              CMP      r0,#1
000020  d1f9              BNE      |L2.22|
;;;241    					// Отправка одного символа по UART
;;;242    					UART_SendData(UART_IO, buffer);
000022  4803              LDR      r0,|L2.48|
000024  7801              LDRB     r1,[r0,#0]  ; buffer
000026  4804              LDR      r0,|L2.56|
000028  f7fffffe          BL       UART_SendData
                  |L2.44|
00002c  e7e9              B        |L2.2|
;;;243    		}
;;;244    				
;;;245      }
;;;246    }
;;;247    
                          ENDP

00002e  0000              DCW      0x0000
                  |L2.48|
                          DCD      buffer
                  |L2.52|
                          DCD      stdout_queue
                  |L2.56|
                          DCD      0x40038000

                          AREA ||i.U_MENU_Init||, CODE, READONLY, ALIGN=2

                  U_MENU_Init PROC
;;;90     // Инициализировать меню
;;;91     void U_MENU_Init (void)
000000  b510              PUSH     {r4,lr}
;;;92     {
;;;93       	
;;;94     	// Выбрать начальный пункт меню
;;;95     	U_MENU_Item = 0;
000002  2000              MOVS     r0,#0
000004  4908              LDR      r1,|L3.40|
000006  7008              STRB     r0,[r1,#0]
;;;96     	// Отобразить начальный пункт меню
;;;97     	 // Подготовить строку для выбранного пункта меню
;;;98          U_MENU_Message = U_MENU_Prepare_Item (U_MENU_Item); 			
000008  4608              MOV      r0,r1
00000a  7800              LDRB     r0,[r0,#0]  ; U_MENU_Item
00000c  f7fffffe          BL       U_MENU_Prepare_Item
000010  4906              LDR      r1,|L3.44|
000012  6008              STR      r0,[r1,#0]  ; U_MENU_Message
;;;99     	// Вывести на ЖКИ строку пункта меню
;;;100    	if (U_MENU_Message)
000014  4608              MOV      r0,r1
000016  6800              LDR      r0,[r0,#0]  ; U_MENU_Message
000018  b120              CBZ      r0,|L3.36|
;;;101    	U_MLT_Put_String (U_MENU_Message, 3);
00001a  2103              MOVS     r1,#3
00001c  4803              LDR      r0,|L3.44|
00001e  6800              LDR      r0,[r0,#0]  ; U_MENU_Message
000020  f7fffffe          BL       U_MLT_Put_String
                  |L3.36|
;;;102    }
000024  bd10              POP      {r4,pc}
;;;103    
                          ENDP

000026  0000              DCW      0x0000
                  |L3.40|
                          DCD      U_MENU_Item
                  |L3.44|
                          DCD      U_MENU_Message

                          AREA ||i.U_MENU_Output||, CODE, READONLY, ALIGN=2

                          REQUIRE _scanf_string
                  U_MENU_Output PROC
;;;208    //Задача по выводу на ЖКИ информации полученной с терминала по UART
;;;209    void U_MENU_Output (void)
000000  b086              SUB      sp,sp,#0x18
;;;210    { 
;;;211    	 /* Буфер для полученного сообщения по UART */
;;;212        char Message_UART[16 + 1]; 
;;;213    	while(1)
000002  e00a              B        |L4.26|
                  |L4.4|
;;;214    	{	
;;;215    	 /* Ожидание ввода сообщения по UART */
;;;216       scanf("%16s", Message_UART);
000004  a901              ADD      r1,sp,#4
000006  a005              ADR      r0,|L4.28|
000008  f7fffffe          BL       __0scanf
;;;217    	 // Передача полученного ссобщения на дисплей ЖКИ в 4-ю строку
;;;218    	  U_MLT_Put_String (Message_UART, 4); 
00000c  2104              MOVS     r1,#4
00000e  a801              ADD      r0,sp,#4
000010  f7fffffe          BL       U_MLT_Put_String
;;;219    	 // Передача в стандартный поток вывода, что сообщение успешно передано на ЖКИ
;;;220    	 printf("Transmit Message To LCD - Success\r\n");
000014  a003              ADR      r0,|L4.36|
000016  f7fffffe          BL       __2printf
                  |L4.26|
00001a  e7f3              B        |L4.4|
;;;221    	}
;;;222    }
;;;223    // Задача - приветствие
                          ENDP

                  |L4.28|
00001c  25313673          DCB      "%16s",0
000020  00      
000021  00                DCB      0
000022  00                DCB      0
000023  00                DCB      0
                  |L4.36|
000024  5472616e          DCB      "Transmit Message To LCD - Success\r\n",0
000028  736d6974
00002c  204d6573
000030  73616765
000034  20546f20
000038  4c434420
00003c  2d205375
000040  63636573
000044  730d0a00

                          AREA ||i.U_MENU_Prepare_Item||, CODE, READONLY, ALIGN=2

                  U_MENU_Prepare_Item PROC
;;;157    // Подготовить строку для выбранного пункта меню
;;;158    char* U_MENU_Prepare_Item (uint8_t item) 
000000  4601              MOV      r1,r0
;;;159    {
;;;160    	switch (item)
000002  b131              CBZ      r1,|L5.18|
000004  2901              CMP      r1,#1
000006  d006              BEQ      |L5.22|
000008  2902              CMP      r1,#2
00000a  d006              BEQ      |L5.26|
00000c  2903              CMP      r1,#3
00000e  d108              BNE      |L5.34|
000010  e005              B        |L5.30|
                  |L5.18|
;;;161    	{
;;;162    		// Пункт 0;
;;;163    		case 0:
;;;164    			
;;;165    			return "\xCF\xF3\xED\xEA\xF2 0";  // Пункт 0
000012  a005              ADR      r0,|L5.40|
                  |L5.20|
;;;166    		
;;;167    		// Пункт 1;
;;;168    		case 1:
;;;169    			
;;;170    			return "\xCF\xF3\xED\xEA\xF2 1";  // Пункт 1
;;;171    
;;;172    		// Пункт 2;
;;;173    		case 2:
;;;174    			
;;;175    			return "\xCF\xF3\xED\xEA\xF2 2";  // Пункт 2
;;;176    
;;;177    		// Пункт 3;
;;;178    		case 3:
;;;179    		
;;;180    			return "\xCF\xF3\xED\xEA\xF2 3";  // Пункт 3
;;;181    		
;;;182    		default:
;;;183    			
;;;184    			return 0;
;;;185    	}
;;;186    }
000014  4770              BX       lr
                  |L5.22|
000016  a006              ADR      r0,|L5.48|
000018  e7fc              B        |L5.20|
                  |L5.26|
00001a  a007              ADR      r0,|L5.56|
00001c  e7fa              B        |L5.20|
                  |L5.30|
00001e  a008              ADR      r0,|L5.64|
000020  e7f8              B        |L5.20|
                  |L5.34|
000022  2000              MOVS     r0,#0                 ;184
000024  e7f6              B        |L5.20|
;;;187    
                          ENDP

000026  0000              DCW      0x0000
                  |L5.40|
000028  cff3edea          DCB      207,243,237,234,242," 0",0
00002c  f2203000
                  |L5.48|
000030  cff3edea          DCB      207,243,237,234,242," 1",0
000034  f2203100
                  |L5.56|
000038  cff3edea          DCB      207,243,237,234,242," 2",0
00003c  f2203200
                  |L5.64|
000040  cff3edea          DCB      207,243,237,234,242," 3",0
000044  f2203300

                          AREA ||i.U_MENU_Running_String_Task_Function||, CODE, READONLY, ALIGN=2

                  U_MENU_Running_String_Task_Function PROC
;;;188    // Задача по выводу бегущей строки на ЖКИ
;;;189    void U_MENU_Running_String_Task_Function (void)
000000  b086              SUB      sp,sp,#0x18
;;;190    {
;;;191    	uint32_t k = 0;
000002  2400              MOVS     r4,#0
;;;192    	
;;;193    	// Строка, выводимая на индикатор 
;;;194    //	const char s[] =  "\xD0\xE0\xE1\xEE\xF2\xE0 \xF1 \xEA\xED\xEE\xEF\xEA\xE0\xEC\xE8   ";  // "Работа с кнопками"
;;;195    	const char s[]="Work with buttons";
000004  2214              MOVS     r2,#0x14
000006  a108              ADR      r1,|L6.40|
000008  a801              ADD      r0,sp,#4
00000a  f7fffffe          BL       __aeabi_memcpy4
;;;196    	while(1)
00000e  e009              B        |L6.36|
                  |L6.16|
;;;197    	{
;;;198    		// Пауза в тиках системного таймера. Здесь 1 тик = 1 мс
;;;199        vTaskDelay(1000);
000010  f44f707a          MOV      r0,#0x3e8
000014  f7fffffe          BL       vTaskDelay
;;;200    		
;;;201    		// Вывести строку c прокруткой
;;;202    		// s - выводимая строка
;;;203    		// 6 - номер строки на дисплее
;;;204    		// k++ - смещение строки на количество символов
;;;205    		U_MLT_Scroll_String (s, 6, k++);
000018  4622              MOV      r2,r4
00001a  1c64              ADDS     r4,r4,#1
00001c  2106              MOVS     r1,#6
00001e  a801              ADD      r0,sp,#4
000020  f7fffffe          BL       U_MLT_Scroll_String
                  |L6.36|
000024  e7f4              B        |L6.16|
;;;206    	}
;;;207    }
;;;208    //Задача по выводу на ЖКИ информации полученной с терминала по UART
                          ENDP

000026  0000              DCW      0x0000
                  |L6.40|
000028  576f726b          DCB      "Work with buttons",0
00002c  20776974
000030  68206275
000034  74746f6e
000038  7300    
00003a  00                DCB      0
00003b  00                DCB      0

                          AREA ||i.U_MENU_Task_Function||, CODE, READONLY, ALIGN=2

                          REQUIRE _printf_percent
                          REQUIRE _printf_u
                          REQUIRE _printf_f
                          REQUIRE _printf_int_dec
                          REQUIRE _printf_fp_dec
                  U_MENU_Task_Function PROC
;;;106    // Задача по работе с меню
;;;107    void U_MENU_Task_Function (void)
000000  b508              PUSH     {r3,lr}
;;;108    {
;;;109    	/*Переменная, которая будет хранить значение счётчика квантов*/
;;;110    	portTickType xLastTime;
;;;111    	uint8_t flag_button;
;;;112    	//Инициализация переменной, хранящей значение счётчика квантов
;;;113    	xLastTime=xTaskGetTickCount();
000002  f7fffffe          BL       xTaskGetTickCount
000006  4604              MOV      r4,r0
;;;114    	flag_button=OFF;
000008  2500              MOVS     r5,#0
;;;115    	while(1)
00000a  e058              B        |L7.190|
                  |L7.12|
;;;116    	{
;;;117    		// Пауза 20мс, чтобы по-напрасну не грузить процессор
;;;118        vTaskDelay (20);  
00000c  2014              MOVS     r0,#0x14
00000e  f7fffffe          BL       vTaskDelay
;;;119        // Проверка на нажатие кнопки
;;;120    		if ((U_BTN_Read_Button()==ON) && (flag_button==OFF)&& ((xTaskGetTickCount()-xLastTime)>=DrebezgTime))
000012  f7fffffe          BL       U_BTN_Read_Button
000016  2801              CMP      r0,#1
000018  d109              BNE      |L7.46|
00001a  b945              CBNZ     r5,|L7.46|
00001c  f7fffffe          BL       xTaskGetTickCount
000020  1b00              SUBS     r0,r0,r4
000022  2832              CMP      r0,#0x32
000024  d303              BCC      |L7.46|
;;;121    		{
;;;122    			// Если нажата кнопка установить флаг нажатой кнопки
;;;123    			flag_button=ON;
000026  2501              MOVS     r5,#1
;;;124    			xLastTime=xTaskGetTickCount(); // Получение текущего значения счётчика квантов	
000028  f7fffffe          BL       xTaskGetTickCount
00002c  4604              MOV      r4,r0
                  |L7.46|
;;;125    		}	
;;;126    		// Проверка на отпускание кнопки с учетом времени антидребезга
;;;127    		if ((flag_button==ON)&&(U_BTN_Read_Button()==OFF)&& ((xTaskGetTickCount()-xLastTime)>=DrebezgTime))
00002e  2d01              CMP      r5,#1
000030  d145              BNE      |L7.190|
000032  f7fffffe          BL       U_BTN_Read_Button
000036  2800              CMP      r0,#0
000038  d141              BNE      |L7.190|
00003a  f7fffffe          BL       xTaskGetTickCount
00003e  1b00              SUBS     r0,r0,r4
000040  2832              CMP      r0,#0x32
000042  d33c              BCC      |L7.190|
;;;128    		{
;;;129    			// Перейти к следующему пункту меню, а если прошли все, то к начальному
;;;130    		 //code
;;;131    					
;;;132    					switch(signal)
000044  481e              LDR      r0,|L7.192|
000046  7800              LDRB     r0,[r0,#0]  ; signal
000048  b120              CBZ      r0,|L7.84|
00004a  2801              CMP      r0,#1
00004c  d012              BEQ      |L7.116|
00004e  2802              CMP      r0,#2
000050  d130              BNE      |L7.180|
000052  e01f              B        |L7.148|
                  |L7.84|
;;;133    					{
;;;134    							case s_sin:
;;;135    									printf("Sin, THD: %f, Time (ms): %u\n", thd, xTaskGetTickCount());
000054  f7fffffe          BL       xTaskGetTickCount
000058  4680              MOV      r8,r0
00005a  481a              LDR      r0,|L7.196|
00005c  6800              LDR      r0,[r0,#0]  ; thd
00005e  f7fffffe          BL       __aeabi_f2d
000062  4606              MOV      r6,r0
000064  4632              MOV      r2,r6
000066  460b              MOV      r3,r1
000068  a017              ADR      r0,|L7.200|
00006a  f8cd8000          STR      r8,[sp,#0]
00006e  f7fffffe          BL       __2printf
;;;136    							break;
000072  e01f              B        |L7.180|
                  |L7.116|
;;;137    							
;;;138    							case s_ramp:
;;;139    									printf("Triangle, THD: %f, Time (ms): %u\n", thd, xTaskGetTickCount());
000074  f7fffffe          BL       xTaskGetTickCount
000078  4680              MOV      r8,r0
00007a  4812              LDR      r0,|L7.196|
00007c  6800              LDR      r0,[r0,#0]  ; thd
00007e  f7fffffe          BL       __aeabi_f2d
000082  4606              MOV      r6,r0
000084  4632              MOV      r2,r6
000086  460b              MOV      r3,r1
000088  a017              ADR      r0,|L7.232|
00008a  f8cd8000          STR      r8,[sp,#0]
00008e  f7fffffe          BL       __2printf
;;;140    							break;
000092  e00f              B        |L7.180|
                  |L7.148|
;;;141    							
;;;142    							case s_square:
;;;143    									printf("Square, THD: %f, Time (ms): %u\n", thd, xTaskGetTickCount());
000094  f7fffffe          BL       xTaskGetTickCount
000098  4680              MOV      r8,r0
00009a  480a              LDR      r0,|L7.196|
00009c  6800              LDR      r0,[r0,#0]  ; thd
00009e  f7fffffe          BL       __aeabi_f2d
0000a2  4606              MOV      r6,r0
0000a4  4632              MOV      r2,r6
0000a6  460b              MOV      r3,r1
0000a8  a018              ADR      r0,|L7.268|
0000aa  f8cd8000          STR      r8,[sp,#0]
0000ae  f7fffffe          BL       __2printf
;;;144    							break;
0000b2  bf00              NOP      
                  |L7.180|
0000b4  bf00              NOP                            ;136
;;;145    					}
;;;146    					
;;;147    					
;;;148    			// Если кнопка отжата установить флаг отжатой кнопки
;;;149    			flag_button=OFF;
0000b6  2500              MOVS     r5,#0
;;;150    			xLastTime=xTaskGetTickCount(); // Получение текущего значения счётчика квантов	
0000b8  f7fffffe          BL       xTaskGetTickCount
0000bc  4604              MOV      r4,r0
                  |L7.190|
0000be  e7a5              B        |L7.12|
;;;151    		}
;;;152        
;;;153    		
;;;154    	}
;;;155    }
;;;156    
                          ENDP

                  |L7.192|
                          DCD      signal
                  |L7.196|
                          DCD      thd
                  |L7.200|
0000c8  53696e2c          DCB      "Sin, THD: %f, Time (ms): %u\n",0
0000cc  20544844
0000d0  3a202566
0000d4  2c205469
0000d8  6d652028
0000dc  6d73293a
0000e0  2025750a
0000e4  00      
0000e5  00                DCB      0
0000e6  00                DCB      0
0000e7  00                DCB      0
                  |L7.232|
0000e8  54726961          DCB      "Triangle, THD: %f, Time (ms): %u\n",0
0000ec  6e676c65
0000f0  2c205448
0000f4  443a2025
0000f8  662c2054
0000fc  696d6520
000100  286d7329
000104  3a202575
000108  0a00    
00010a  00                DCB      0
00010b  00                DCB      0
                  |L7.268|
00010c  53717561          DCB      "Square, THD: %f, Time (ms): %u\n",0
000110  72652c20
000114  5448443a
000118  2025662c
00011c  2054696d
000120  6520286d
000124  73293a20
000128  25750a00

                          AREA ||i.U_Privet||, CODE, READONLY, ALIGN=2

                  U_Privet PROC
;;;223    // Задача - приветствие
;;;224    void U_Privet(void)
000000  b510              PUSH     {r4,lr}
;;;225    {
;;;226    	// Отправка сообщения приветствия
;;;227    	printf("Work with Semaphors\r\n");
000002  a003              ADR      r0,|L8.16|
000004  f7fffffe          BL       __2printf
;;;228    	// Удаление задачи
;;;229    	vTaskDelete( NULL );
000008  2000              MOVS     r0,#0
00000a  f7fffffe          BL       vTaskDelete
;;;230    }
00000e  bd10              POP      {r4,pc}
;;;231    // Задача для работы с выводом по UART
                          ENDP

                  |L8.16|
000010  576f726b          DCB      "Work with Semaphors\r\n",0
000014  20776974
000018  68205365
00001c  6d617068
000020  6f72730d
000024  0a00    
000026  00                DCB      0
000027  00                DCB      0

                          AREA ||.bss||, DATA, NOINIT, ALIGN=2

                  fft_res
                          %        128
                  S
                          %        24
                  fft_amp
                          %        64
                  fft_amp_norm
                          %        64
                  message
                          %        64

                          AREA ||.constdata||, DATA, READONLY, ALIGN=0

                  MLT_Font
000000  00000000          DCB      0x00,0x00,0x00,0x00
000004  00000000          DCB      0x00,0x00,0x00,0x00
000008  000000df          DCB      0x00,0x00,0x00,0xdf
00000c  df000000          DCB      0xdf,0x00,0x00,0x00
000010  00070700          DCB      0x00,0x07,0x07,0x00
000014  07070000          DCB      0x07,0x07,0x00,0x00
000018  2424ff24          DCB      0x24,0x24,0xff,0x24
00001c  ff242400          DCB      0xff,0x24,0x24,0x00
000020  00000000          DCB      0x00,0x00,0x00,0x00
000024  00000000          DCB      0x00,0x00,0x00,0x00
000028  00633318          DCB      0x00,0x63,0x33,0x18
00002c  0c666300          DCB      0x0c,0x66,0x63,0x00
000030  60f69f89          DCB      0x60,0xf6,0x9f,0x89
000034  9f76d800          DCB      0x9f,0x76,0xd8,0x00
000038  00000007          DCB      0x00,0x00,0x00,0x07
00003c  07000000          DCB      0x07,0x00,0x00,0x00
000040  003c7ec3          DCB      0x00,0x3c,0x7e,0xc3
000044  81810000          DCB      0x81,0x81,0x00,0x00
000048  008181c3          DCB      0x00,0x81,0x81,0xc3
00004c  7e3c0000          DCB      0x7e,0x3c,0x00,0x00
000050  082a1c7f          DCB      0x08,0x2a,0x1c,0x7f
000054  1c2a0800          DCB      0x1c,0x2a,0x08,0x00
000058  0018187e          DCB      0x00,0x18,0x18,0x7e
00005c  7e181800          DCB      0x7e,0x18,0x18,0x00
000060  000080e0          DCB      0x00,0x00,0x80,0xe0
000064  60000000          DCB      0x60,0x00,0x00,0x00
000068  00181818          DCB      0x00,0x18,0x18,0x18
00006c  18181800          DCB      0x18,0x18,0x18,0x00
000070  00000060          DCB      0x00,0x00,0x00,0x60
000074  60000000          DCB      0x60,0x00,0x00,0x00
000078  0000c0f0          DCB      0x00,0x00,0xc0,0xf0
00007c  3c0f0300          DCB      0x3c,0x0f,0x03,0x00
000080  3e7f7159          DCB      0x3e,0x7f,0x71,0x59
000084  4d7f3e00          DCB      0x4d,0x7f,0x3e,0x00
000088  40427f7f          DCB      0x40,0x42,0x7f,0x7f
00008c  40400000          DCB      0x40,0x40,0x00,0x00
000090  62735949          DCB      0x62,0x73,0x59,0x49
000094  6f660000          DCB      0x6f,0x66,0x00,0x00
000098  22634949          DCB      0x22,0x63,0x49,0x49
00009c  7f360000          DCB      0x7f,0x36,0x00,0x00
0000a0  181c1653          DCB      0x18,0x1c,0x16,0x53
0000a4  7f7f5000          DCB      0x7f,0x7f,0x50,0x00
0000a8  27674545          DCB      0x27,0x67,0x45,0x45
0000ac  7d390000          DCB      0x7d,0x39,0x00,0x00
0000b0  3c7e4b49          DCB      0x3c,0x7e,0x4b,0x49
0000b4  79300000          DCB      0x79,0x30,0x00,0x00
0000b8  03037179          DCB      0x03,0x03,0x71,0x79
0000bc  0f070000          DCB      0x0f,0x07,0x00,0x00
0000c0  367f4949          DCB      0x36,0x7f,0x49,0x49
0000c4  7f360000          DCB      0x7f,0x36,0x00,0x00
0000c8  064f4969          DCB      0x06,0x4f,0x49,0x69
0000cc  3f1e0000          DCB      0x3f,0x1e,0x00,0x00
0000d0  00000066          DCB      0x00,0x00,0x00,0x66
0000d4  66000000          DCB      0x66,0x00,0x00,0x00
0000d8  00008066          DCB      0x00,0x00,0x80,0x66
0000dc  66000000          DCB      0x66,0x00,0x00,0x00
0000e0  00000814          DCB      0x00,0x00,0x08,0x14
0000e4  22410000          DCB      0x22,0x41,0x00,0x00
0000e8  00282828          DCB      0x00,0x28,0x28,0x28
0000ec  28282800          DCB      0x28,0x28,0x28,0x00
0000f0  00004122          DCB      0x00,0x00,0x41,0x22
0000f4  14080000          DCB      0x14,0x08,0x00,0x00
0000f8  00020369          DCB      0x00,0x02,0x03,0x69
0000fc  6d070200          DCB      0x6d,0x07,0x02,0x00
000100  00000000          DCB      0x00,0x00,0x00,0x00
000104  00000000          DCB      0x00,0x00,0x00,0x00
000108  7c7e1313          DCB      0x7c,0x7e,0x13,0x13
00010c  7e7c0000          DCB      0x7e,0x7c,0x00,0x00
000110  417f7f49          DCB      0x41,0x7f,0x7f,0x49
000114  497f3600          DCB      0x49,0x7f,0x36,0x00
000118  1c3e6341          DCB      0x1c,0x3e,0x63,0x41
00011c  41632200          DCB      0x41,0x63,0x22,0x00
000120  417f7f41          DCB      0x41,0x7f,0x7f,0x41
000124  633e1c00          DCB      0x63,0x3e,0x1c,0x00
000128  417f7f49          DCB      0x41,0x7f,0x7f,0x49
00012c  5d416300          DCB      0x5d,0x41,0x63,0x00
000130  417f7f49          DCB      0x41,0x7f,0x7f,0x49
000134  1d010300          DCB      0x1d,0x01,0x03,0x00
000138  1c3e6341          DCB      0x1c,0x3e,0x63,0x41
00013c  51737200          DCB      0x51,0x73,0x72,0x00
000140  7f7f0808          DCB      0x7f,0x7f,0x08,0x08
000144  7f7f0000          DCB      0x7f,0x7f,0x00,0x00
000148  00417f7f          DCB      0x00,0x41,0x7f,0x7f
00014c  41000000          DCB      0x41,0x00,0x00,0x00
000150  30704041          DCB      0x30,0x70,0x40,0x41
000154  7f3f0100          DCB      0x7f,0x3f,0x01,0x00
000158  417f7f08          DCB      0x41,0x7f,0x7f,0x08
00015c  1c776300          DCB      0x1c,0x77,0x63,0x00
000160  417f7f41          DCB      0x41,0x7f,0x7f,0x41
000164  40607000          DCB      0x40,0x60,0x70,0x00
000168  7f7f0e1c          DCB      0x7f,0x7f,0x0e,0x1c
00016c  0e7f7f00          DCB      0x0e,0x7f,0x7f,0x00
000170  7f7f060c          DCB      0x7f,0x7f,0x06,0x0c
000174  187f7f00          DCB      0x18,0x7f,0x7f,0x00
000178  1c3e6341          DCB      0x1c,0x3e,0x63,0x41
00017c  633e1c00          DCB      0x63,0x3e,0x1c,0x00
000180  417f7f49          DCB      0x41,0x7f,0x7f,0x49
000184  090f0600          DCB      0x09,0x0f,0x06,0x00
000188  1e3f2171          DCB      0x1e,0x3f,0x21,0x71
00018c  7f5e0000          DCB      0x7f,0x5e,0x00,0x00
000190  417f7f09          DCB      0x41,0x7f,0x7f,0x09
000194  197f6600          DCB      0x19,0x7f,0x66,0x00
000198  266f4d59          DCB      0x26,0x6f,0x4d,0x59
00019c  73320000          DCB      0x73,0x32,0x00,0x00
0001a0  03417f7f          DCB      0x03,0x41,0x7f,0x7f
0001a4  41030000          DCB      0x41,0x03,0x00,0x00
0001a8  3f7f6060          DCB      0x3f,0x7f,0x60,0x60
0001ac  7f3f0000          DCB      0x7f,0x3f,0x00,0x00
0001b0  1f3f6060          DCB      0x1f,0x3f,0x60,0x60
0001b4  3f1f0000          DCB      0x3f,0x1f,0x00,0x00
0001b8  7f7f3018          DCB      0x7f,0x7f,0x30,0x18
0001bc  307f7f00          DCB      0x30,0x7f,0x7f,0x00
0001c0  63673c18          DCB      0x63,0x67,0x3c,0x18
0001c4  3c676300          DCB      0x3c,0x67,0x63,0x00
0001c8  074f7878          DCB      0x07,0x4f,0x78,0x78
0001cc  4f070000          DCB      0x4f,0x07,0x00,0x00
0001d0  47637159          DCB      0x47,0x63,0x71,0x59
0001d4  4d677300          DCB      0x4d,0x67,0x73,0x00
0001d8  00000000          DCB      0x00,0x00,0x00,0x00
0001dc  00000000          DCB      0x00,0x00,0x00,0x00
0001e0  00000000          DCB      0x00,0x00,0x00,0x00
0001e4  00000000          DCB      0x00,0x00,0x00,0x00
0001e8  00000000          DCB      0x00,0x00,0x00,0x00
0001ec  00000000          DCB      0x00,0x00,0x00,0x00
0001f0  00000000          DCB      0x00,0x00,0x00,0x00
0001f4  00000000          DCB      0x00,0x00,0x00,0x00
0001f8  00000000          DCB      0x00,0x00,0x00,0x00
0001fc  00000000          DCB      0x00,0x00,0x00,0x00
000200  00000000          DCB      0x00,0x00,0x00,0x00
000204  00000000          DCB      0x00,0x00,0x00,0x00
000208  20745454          DCB      0x20,0x74,0x54,0x54
00020c  3c784000          DCB      0x3c,0x78,0x40,0x00
000210  417f3f48          DCB      0x41,0x7f,0x3f,0x48
000214  48783000          DCB      0x48,0x78,0x30,0x00
000218  387c4444          DCB      0x38,0x7c,0x44,0x44
00021c  6c280000          DCB      0x6c,0x28,0x00,0x00
000220  30784849          DCB      0x30,0x78,0x48,0x49
000224  3f7f4000          DCB      0x3f,0x7f,0x40,0x00
000228  387c5454          DCB      0x38,0x7c,0x54,0x54
00022c  5c180000          DCB      0x5c,0x18,0x00,0x00
000230  487e7f49          DCB      0x48,0x7e,0x7f,0x49
000234  03020000          DCB      0x03,0x02,0x00,0x00
000238  4c5e5252          DCB      0x4c,0x5e,0x52,0x52
00023c  7c3e0200          DCB      0x7c,0x3e,0x02,0x00
000240  417f7f08          DCB      0x41,0x7f,0x7f,0x08
000244  047c7800          DCB      0x04,0x7c,0x78,0x00
000248  00447d7d          DCB      0x00,0x44,0x7d,0x7d
00024c  40000000          DCB      0x40,0x00,0x00,0x00
000250  30704040          DCB      0x30,0x70,0x40,0x40
000254  7d3d0000          DCB      0x7d,0x3d,0x00,0x00
000258  417f7f10          DCB      0x41,0x7f,0x7f,0x10
00025c  386c4400          DCB      0x38,0x6c,0x44,0x00
000260  00417f7f          DCB      0x00,0x41,0x7f,0x7f
000264  40000000          DCB      0x40,0x00,0x00,0x00
000268  7c7c1838          DCB      0x7c,0x7c,0x18,0x38
00026c  1c7c7800          DCB      0x1c,0x7c,0x78,0x00
000270  7c7c0404          DCB      0x7c,0x7c,0x04,0x04
000274  7c780000          DCB      0x7c,0x78,0x00,0x00
000278  387c4444          DCB      0x38,0x7c,0x44,0x44
00027c  7c380000          DCB      0x7c,0x38,0x00,0x00
000280  44787c54          DCB      0x44,0x78,0x7c,0x54
000284  141c0800          DCB      0x14,0x1c,0x08,0x00
000288  081c1454          DCB      0x08,0x1c,0x14,0x54
00028c  787c4000          DCB      0x78,0x7c,0x40,0x00
000290  447c784c          DCB      0x44,0x7c,0x78,0x4c
000294  041c1800          DCB      0x04,0x1c,0x18,0x00
000298  485c5454          DCB      0x48,0x5c,0x54,0x54
00029c  74240000          DCB      0x74,0x24,0x00,0x00
0002a0  00043e7f          DCB      0x00,0x04,0x3e,0x7f
0002a4  44240000          DCB      0x44,0x24,0x00,0x00
0002a8  3c7c4040          DCB      0x3c,0x7c,0x40,0x40
0002ac  3c7c4000          DCB      0x3c,0x7c,0x40,0x00
0002b0  1c3c6060          DCB      0x1c,0x3c,0x60,0x60
0002b4  3c1c0000          DCB      0x3c,0x1c,0x00,0x00
0002b8  3c7c7038          DCB      0x3c,0x7c,0x70,0x38
0002bc  707c3c00          DCB      0x70,0x7c,0x3c,0x00
0002c0  446c3810          DCB      0x44,0x6c,0x38,0x10
0002c4  386c4400          DCB      0x38,0x6c,0x44,0x00
0002c8  4c5c5050          DCB      0x4c,0x5c,0x50,0x50
0002cc  7c3c0000          DCB      0x7c,0x3c,0x00,0x00
0002d0  4c64745c          DCB      0x4c,0x64,0x74,0x5c
0002d4  4c640000          DCB      0x4c,0x64,0x00,0x00
0002d8  00000000          DCB      0x00,0x00,0x00,0x00
0002dc  00000000          DCB      0x00,0x00,0x00,0x00
0002e0  00000000          DCB      0x00,0x00,0x00,0x00
0002e4  00000000          DCB      0x00,0x00,0x00,0x00
0002e8  00000000          DCB      0x00,0x00,0x00,0x00
0002ec  00000000          DCB      0x00,0x00,0x00,0x00
0002f0  00000000          DCB      0x00,0x00,0x00,0x00
0002f4  00000000          DCB      0x00,0x00,0x00,0x00
0002f8  00000000          DCB      0x00,0x00,0x00,0x00
0002fc  00000000          DCB      0x00,0x00,0x00,0x00
000300  00000000          DCB      0x00,0x00,0x00,0x00
000304  00000000          DCB      0x00,0x00,0x00,0x00
000308  00000000          DCB      0x00,0x00,0x00,0x00
00030c  00000000          DCB      0x00,0x00,0x00,0x00
000310  00000000          DCB      0x00,0x00,0x00,0x00
000314  00000000          DCB      0x00,0x00,0x00,0x00
000318  00000000          DCB      0x00,0x00,0x00,0x00
00031c  00000000          DCB      0x00,0x00,0x00,0x00
000320  00000000          DCB      0x00,0x00,0x00,0x00
000324  00000000          DCB      0x00,0x00,0x00,0x00
000328  00000000          DCB      0x00,0x00,0x00,0x00
00032c  00000000          DCB      0x00,0x00,0x00,0x00
000330  00000000          DCB      0x00,0x00,0x00,0x00
000334  00000000          DCB      0x00,0x00,0x00,0x00
000338  00000000          DCB      0x00,0x00,0x00,0x00
00033c  00000000          DCB      0x00,0x00,0x00,0x00
000340  00000000          DCB      0x00,0x00,0x00,0x00
000344  00000000          DCB      0x00,0x00,0x00,0x00
000348  00000000          DCB      0x00,0x00,0x00,0x00
00034c  00000000          DCB      0x00,0x00,0x00,0x00
000350  00000000          DCB      0x00,0x00,0x00,0x00
000354  00000000          DCB      0x00,0x00,0x00,0x00
000358  00000000          DCB      0x00,0x00,0x00,0x00
00035c  00000000          DCB      0x00,0x00,0x00,0x00
000360  00000000          DCB      0x00,0x00,0x00,0x00
000364  00000000          DCB      0x00,0x00,0x00,0x00
000368  00000000          DCB      0x00,0x00,0x00,0x00
00036c  00000000          DCB      0x00,0x00,0x00,0x00
000370  00000000          DCB      0x00,0x00,0x00,0x00
000374  00000000          DCB      0x00,0x00,0x00,0x00
000378  00000000          DCB      0x00,0x00,0x00,0x00
00037c  00000000          DCB      0x00,0x00,0x00,0x00
000380  00000000          DCB      0x00,0x00,0x00,0x00
000384  00000000          DCB      0x00,0x00,0x00,0x00
000388  00000000          DCB      0x00,0x00,0x00,0x00
00038c  00000000          DCB      0x00,0x00,0x00,0x00
000390  00000000          DCB      0x00,0x00,0x00,0x00
000394  00000000          DCB      0x00,0x00,0x00,0x00
000398  00000000          DCB      0x00,0x00,0x00,0x00
00039c  00000000          DCB      0x00,0x00,0x00,0x00
0003a0  00000000          DCB      0x00,0x00,0x00,0x00
0003a4  00000000          DCB      0x00,0x00,0x00,0x00
0003a8  00000000          DCB      0x00,0x00,0x00,0x00
0003ac  00000000          DCB      0x00,0x00,0x00,0x00
0003b0  00000000          DCB      0x00,0x00,0x00,0x00
0003b4  00000000          DCB      0x00,0x00,0x00,0x00
0003b8  00000000          DCB      0x00,0x00,0x00,0x00
0003bc  00000000          DCB      0x00,0x00,0x00,0x00
0003c0  00000000          DCB      0x00,0x00,0x00,0x00
0003c4  00000000          DCB      0x00,0x00,0x00,0x00
0003c8  00000000          DCB      0x00,0x00,0x00,0x00
0003cc  00000000          DCB      0x00,0x00,0x00,0x00
0003d0  00000000          DCB      0x00,0x00,0x00,0x00
0003d4  00000000          DCB      0x00,0x00,0x00,0x00
0003d8  00000000          DCB      0x00,0x00,0x00,0x00
0003dc  00000000          DCB      0x00,0x00,0x00,0x00
0003e0  00000000          DCB      0x00,0x00,0x00,0x00
0003e4  00000000          DCB      0x00,0x00,0x00,0x00
0003e8  00000000          DCB      0x00,0x00,0x00,0x00
0003ec  00000000          DCB      0x00,0x00,0x00,0x00
0003f0  00000000          DCB      0x00,0x00,0x00,0x00
0003f4  00000000          DCB      0x00,0x00,0x00,0x00
0003f8  00000000          DCB      0x00,0x00,0x00,0x00
0003fc  00000000          DCB      0x00,0x00,0x00,0x00
000400  00000000          DCB      0x00,0x00,0x00,0x00
000404  00000000          DCB      0x00,0x00,0x00,0x00
000408  00000000          DCB      0x00,0x00,0x00,0x00
00040c  00000000          DCB      0x00,0x00,0x00,0x00
000410  00000000          DCB      0x00,0x00,0x00,0x00
000414  00000000          DCB      0x00,0x00,0x00,0x00
000418  00000000          DCB      0x00,0x00,0x00,0x00
00041c  00000000          DCB      0x00,0x00,0x00,0x00
000420  00000000          DCB      0x00,0x00,0x00,0x00
000424  00000000          DCB      0x00,0x00,0x00,0x00
000428  00000000          DCB      0x00,0x00,0x00,0x00
00042c  00000000          DCB      0x00,0x00,0x00,0x00
000430  00000000          DCB      0x00,0x00,0x00,0x00
000434  00000000          DCB      0x00,0x00,0x00,0x00
000438  00000000          DCB      0x00,0x00,0x00,0x00
00043c  00000000          DCB      0x00,0x00,0x00,0x00
000440  00000000          DCB      0x00,0x00,0x00,0x00
000444  00000000          DCB      0x00,0x00,0x00,0x00
000448  00000000          DCB      0x00,0x00,0x00,0x00
00044c  00000000          DCB      0x00,0x00,0x00,0x00
000450  00000000          DCB      0x00,0x00,0x00,0x00
000454  00000000          DCB      0x00,0x00,0x00,0x00
000458  00000000          DCB      0x00,0x00,0x00,0x00
00045c  00000000          DCB      0x00,0x00,0x00,0x00
000460  00000000          DCB      0x00,0x00,0x00,0x00
000464  00000000          DCB      0x00,0x00,0x00,0x00
000468  00000000          DCB      0x00,0x00,0x00,0x00
00046c  00000000          DCB      0x00,0x00,0x00,0x00
000470  00000000          DCB      0x00,0x00,0x00,0x00
000474  00000000          DCB      0x00,0x00,0x00,0x00
000478  00000000          DCB      0x00,0x00,0x00,0x00
00047c  00000000          DCB      0x00,0x00,0x00,0x00
000480  00000609          DCB      0x00,0x00,0x06,0x09
000484  09060000          DCB      0x09,0x06,0x00,0x00
000488  00000000          DCB      0x00,0x00,0x00,0x00
00048c  00000000          DCB      0x00,0x00,0x00,0x00
000490  00000000          DCB      0x00,0x00,0x00,0x00
000494  00000000          DCB      0x00,0x00,0x00,0x00
000498  00000000          DCB      0x00,0x00,0x00,0x00
00049c  00000000          DCB      0x00,0x00,0x00,0x00
0004a0  00000000          DCB      0x00,0x00,0x00,0x00
0004a4  00000000          DCB      0x00,0x00,0x00,0x00
0004a8  00000000          DCB      0x00,0x00,0x00,0x00
0004ac  00000000          DCB      0x00,0x00,0x00,0x00
0004b0  00000000          DCB      0x00,0x00,0x00,0x00
0004b4  00000000          DCB      0x00,0x00,0x00,0x00
0004b8  00000000          DCB      0x00,0x00,0x00,0x00
0004bc  00000000          DCB      0x00,0x00,0x00,0x00
0004c0  00000000          DCB      0x00,0x00,0x00,0x00
0004c4  00000000          DCB      0x00,0x00,0x00,0x00
0004c8  00000000          DCB      0x00,0x00,0x00,0x00
0004cc  00000000          DCB      0x00,0x00,0x00,0x00
0004d0  00000000          DCB      0x00,0x00,0x00,0x00
0004d4  00000000          DCB      0x00,0x00,0x00,0x00
0004d8  00000000          DCB      0x00,0x00,0x00,0x00
0004dc  00000000          DCB      0x00,0x00,0x00,0x00
0004e0  00000000          DCB      0x00,0x00,0x00,0x00
0004e4  00000000          DCB      0x00,0x00,0x00,0x00
0004e8  00000000          DCB      0x00,0x00,0x00,0x00
0004ec  00000000          DCB      0x00,0x00,0x00,0x00
0004f0  00000000          DCB      0x00,0x00,0x00,0x00
0004f4  00000000          DCB      0x00,0x00,0x00,0x00
0004f8  00000000          DCB      0x00,0x00,0x00,0x00
0004fc  00000000          DCB      0x00,0x00,0x00,0x00
000500  7c7e1313          DCB      0x7c,0x7e,0x13,0x13
000504  7e7c0000          DCB      0x7e,0x7c,0x00,0x00
000508  417f7f49          DCB      0x41,0x7f,0x7f,0x49
00050c  49793300          DCB      0x49,0x79,0x33,0x00
000510  417f7f49          DCB      0x41,0x7f,0x7f,0x49
000514  497f3600          DCB      0x49,0x7f,0x36,0x00
000518  417f7f41          DCB      0x41,0x7f,0x7f,0x41
00051c  01030300          DCB      0x01,0x03,0x03,0x00
000520  787e3733          DCB      0x78,0x7e,0x37,0x33
000524  377e7800          DCB      0x37,0x7e,0x78,0x00
000528  417f7f49          DCB      0x41,0x7f,0x7f,0x49
00052c  5d416300          DCB      0x5d,0x41,0x63,0x00
000530  63147f7f          DCB      0x63,0x14,0x7f,0x7f
000534  14630000          DCB      0x14,0x63,0x00,0x00
000538  63634949          DCB      0x63,0x63,0x49,0x49
00053c  6b7f3600          DCB      0x6b,0x7f,0x36,0x00
000540  7f7f3018          DCB      0x7f,0x7f,0x30,0x18
000544  0c7f7f00          DCB      0x0c,0x7f,0x7f,0x00
000548  7f7f301b          DCB      0x7f,0x7f,0x30,0x1b
00054c  0c7f7f00          DCB      0x0c,0x7f,0x7f,0x00
000550  417f7f08          DCB      0x41,0x7f,0x7f,0x08
000554  1c776300          DCB      0x1c,0x77,0x63,0x00
000558  607f1f03          DCB      0x60,0x7f,0x1f,0x03
00055c  7f7f4100          DCB      0x7f,0x7f,0x41,0x00
000560  7f7f0e1c          DCB      0x7f,0x7f,0x0e,0x1c
000564  0e7f7f00          DCB      0x0e,0x7f,0x7f,0x00
000568  7f7f0808          DCB      0x7f,0x7f,0x08,0x08
00056c  7f7f0000          DCB      0x7f,0x7f,0x00,0x00
000570  1c3e6341          DCB      0x1c,0x3e,0x63,0x41
000574  633e1c00          DCB      0x63,0x3e,0x1c,0x00
000578  7f7f0303          DCB      0x7f,0x7f,0x03,0x03
00057c  7f7f0000          DCB      0x7f,0x7f,0x00,0x00
000580  417f7f49          DCB      0x41,0x7f,0x7f,0x49
000584  090f0600          DCB      0x09,0x0f,0x06,0x00
000588  1c3e6341          DCB      0x1c,0x3e,0x63,0x41
00058c  41632200          DCB      0x41,0x63,0x22,0x00
000590  03417f7f          DCB      0x03,0x41,0x7f,0x7f
000594  41030000          DCB      0x41,0x03,0x00,0x00
000598  63673c18          DCB      0x63,0x67,0x3c,0x18
00059c  0c070300          DCB      0x0c,0x07,0x03,0x00
0005a0  1e527f7f          DCB      0x1e,0x52,0x7f,0x7f
0005a4  521e0000          DCB      0x52,0x1e,0x00,0x00
0005a8  63673c18          DCB      0x63,0x67,0x3c,0x18
0005ac  3c676300          DCB      0x3c,0x67,0x63,0x00
0005b0  3f3f2020          DCB      0x3f,0x3f,0x20,0x20
0005b4  3f3f6000          DCB      0x3f,0x3f,0x60,0x00
0005b8  0f1f1858          DCB      0x0f,0x1f,0x18,0x58
0005bc  7f7f4000          DCB      0x7f,0x7f,0x40,0x00
0005c0  7f7f607f          DCB      0x7f,0x7f,0x60,0x7f
0005c4  607f7f00          DCB      0x60,0x7f,0x7f,0x00
0005c8  3f203f3f          DCB      0x3f,0x20,0x3f,0x3f
0005cc  203f6000          DCB      0x20,0x3f,0x60,0x00
0005d0  017f7f48          DCB      0x01,0x7f,0x7f,0x48
0005d4  48783000          DCB      0x48,0x78,0x30,0x00
0005d8  7f7f4848          DCB      0x7f,0x7f,0x48,0x48
0005dc  78007f00          DCB      0x78,0x00,0x7f,0x00
0005e0  7f7f4848          DCB      0x7f,0x7f,0x48,0x48
0005e4  78300000          DCB      0x78,0x30,0x00,0x00
0005e8  36634949          DCB      0x36,0x63,0x49,0x49
0005ec  6b7f3e00          DCB      0x6b,0x7f,0x3e,0x00
0005f0  7f083e63          DCB      0x7f,0x08,0x3e,0x63
0005f4  41633e00          DCB      0x41,0x63,0x3e,0x00
0005f8  667f1909          DCB      0x66,0x7f,0x19,0x09
0005fc  7f7f4100          DCB      0x7f,0x7f,0x41,0x00
000600  20745454          DCB      0x20,0x74,0x54,0x54
000604  3c784000          DCB      0x3c,0x78,0x40,0x00
000608  307c4a4a          DCB      0x30,0x7c,0x4a,0x4a
00060c  7a310000          DCB      0x7a,0x31,0x00,0x00
000610  447c7c54          DCB      0x44,0x7c,0x7c,0x54
000614  54280000          DCB      0x54,0x28,0x00,0x00
000618  447c7c44          DCB      0x44,0x7c,0x7c,0x44
00061c  0c080000          DCB      0x0c,0x08,0x00,0x00
000620  60383434          DCB      0x60,0x38,0x34,0x34
000624  38600000          DCB      0x38,0x60,0x00,0x00
000628  387c5454          DCB      0x38,0x7c,0x54,0x54
00062c  5c180000          DCB      0x5c,0x18,0x00,0x00
000630  44287c7c          DCB      0x44,0x28,0x7c,0x7c
000634  28440000          DCB      0x28,0x44,0x00,0x00
000638  2e445454          DCB      0x2e,0x44,0x54,0x54
00063c  7c280000          DCB      0x7c,0x28,0x00,0x00
000640  7c7c2010          DCB      0x7c,0x7c,0x20,0x10
000644  7c7c0000          DCB      0x7c,0x7c,0x00,0x00
000648  7c7c2111          DCB      0x7c,0x7c,0x21,0x11
00064c  7c7c0000          DCB      0x7c,0x7c,0x00,0x00
000650  447c7c10          DCB      0x44,0x7c,0x7c,0x10
000654  386c4400          DCB      0x38,0x6c,0x44,0x00
000658  40780c04          DCB      0x40,0x78,0x0c,0x04
00065c  7c7c4000          DCB      0x7c,0x7c,0x40,0x00
000660  787c0810          DCB      0x78,0x7c,0x08,0x10
000664  087c7800          DCB      0x08,0x7c,0x78,0x00
000668  7c7c1010          DCB      0x7c,0x7c,0x10,0x10
00066c  7c7c0000          DCB      0x7c,0x7c,0x00,0x00
000670  387c4444          DCB      0x38,0x7c,0x44,0x44
000674  7c380000          DCB      0x7c,0x38,0x00,0x00
000678  7c7c0404          DCB      0x7c,0x7c,0x04,0x04
00067c  7c7c0000          DCB      0x7c,0x7c,0x00,0x00
000680  44787c54          DCB      0x44,0x78,0x7c,0x54
000684  141c0800          DCB      0x14,0x1c,0x08,0x00
000688  387c4444          DCB      0x38,0x7c,0x44,0x44
00068c  6c280000          DCB      0x6c,0x28,0x00,0x00
000690  08447c7c          DCB      0x08,0x44,0x7c,0x7c
000694  44080000          DCB      0x44,0x08,0x00,0x00
000698  4c5c5050          DCB      0x4c,0x5c,0x50,0x50
00069c  7c3c0000          DCB      0x7c,0x3c,0x00,0x00
0006a0  08547c7c          DCB      0x08,0x54,0x7c,0x7c
0006a4  54080000          DCB      0x54,0x08,0x00,0x00
0006a8  446c3810          DCB      0x44,0x6c,0x38,0x10
0006ac  386c4400          DCB      0x38,0x6c,0x44,0x00
0006b0  3c3c203c          DCB      0x3c,0x3c,0x20,0x3c
0006b4  3c600000          DCB      0x3c,0x60,0x00,0x00
0006b8  1c10507c          DCB      0x1c,0x10,0x50,0x7c
0006bc  7c400000          DCB      0x7c,0x40,0x00,0x00
0006c0  7c407c40          DCB      0x7c,0x40,0x7c,0x40
0006c4  7c000000          DCB      0x7c,0x00,0x00,0x00
0006c8  3c203c20          DCB      0x3c,0x20,0x3c,0x20
0006cc  3c600000          DCB      0x3c,0x60,0x00,0x00
0006d0  443c5050          DCB      0x44,0x3c,0x50,0x50
0006d4  70200000          DCB      0x70,0x20,0x00,0x00
0006d8  403c5050          DCB      0x40,0x3c,0x50,0x50
0006dc  20007c00          DCB      0x20,0x00,0x7c,0x00
0006e0  403c5050          DCB      0x40,0x3c,0x50,0x50
0006e4  50200000          DCB      0x50,0x20,0x00,0x00
0006e8  28445454          DCB      0x28,0x44,0x54,0x54
0006ec  38000000          DCB      0x38,0x00,0x00,0x00
0006f0  7c103844          DCB      0x7c,0x10,0x38,0x44
0006f4  44380000          DCB      0x44,0x38,0x00,0x00
0006f8  40281414          DCB      0x40,0x28,0x14,0x14
0006fc  7c7c0000          DCB      0x7c,0x7c,0x00,0x00
                  image_ramp
000700  ff402010          DCB      0xff,0x40,0x20,0x10
000704  08040408          DCB      0x08,0x04,0x04,0x08
000708  10204080          DCB      0x10,0x20,0x40,0x80
00070c  00000000          DCB      0x00,0x00,0x00,0x00
000710  00000000          DCB      0x00,0x00,0x00,0x00
000714  00000000          DCB      0x00,0x00,0x00,0x00
000718  80402010          DCB      0x80,0x40,0x20,0x10
00071c  08000000          DCB      0x08,0x00,0x00,0x00
000720  ff808080          DCB      0xff,0x80,0x80,0x80
000724  80808080          DCB      0x80,0x80,0x80,0x80
000728  80808080          DCB      0x80,0x80,0x80,0x80
00072c  81828488          DCB      0x81,0x82,0x84,0x88
000730  90a0a090          DCB      0x90,0xa0,0xa0,0x90
000734  88848281          DCB      0x88,0x84,0x82,0x81
000738  80808080          DCB      0x80,0x80,0x80,0x80
00073c  80800000          DCB      0x80,0x80,0x00,0x00
                  image_square
000740  ff000000          DCB      0xff,0x00,0x00,0x00
000744  00f80808          DCB      0x00,0xf8,0x08,0x08
000748  0808f800          DCB      0x08,0x08,0xf8,0x00
00074c  00000000          DCB      0x00,0x00,0x00,0x00
000750  00000000          DCB      0x00,0x00,0x00,0x00
000754  00f80808          DCB      0x00,0xf8,0x08,0x08
000758  0808f800          DCB      0x08,0x08,0xf8,0x00
00075c  00000000          DCB      0x00,0x00,0x00,0x00
000760  ffa0a0a0          DCB      0xff,0xa0,0xa0,0xa0
000764  a0bf8080          DCB      0xa0,0xbf,0x80,0x80
000768  8080bfa0          DCB      0x80,0x80,0xbf,0xa0
00076c  a0a0a0a0          DCB      0xa0,0xa0,0xa0,0xa0
000770  a0a0a0a0          DCB      0xa0,0xa0,0xa0,0xa0
000774  a0bf8080          DCB      0xa0,0xbf,0x80,0x80
000778  8080bfa0          DCB      0x80,0x80,0xbf,0xa0
00077c  a0a0a0a0          DCB      0xa0,0xa0,0xa0,0xa0
                  image_sin
000780  ff202010          DCB      0xff,0x20,0x20,0x10
000784  10080808          DCB      0x10,0x08,0x08,0x08
000788  10102020          DCB      0x10,0x10,0x20,0x20
00078c  40800000          DCB      0x40,0x80,0x00,0x00
000790  00000000          DCB      0x00,0x00,0x00,0x00
000794  00000000          DCB      0x00,0x00,0x00,0x00
000798  00000000          DCB      0x00,0x00,0x00,0x00
00079c  00000000          DCB      0x00,0x00,0x00,0x00
0007a0  ff808080          DCB      0xff,0x80,0x80,0x80
0007a4  80808080          DCB      0x80,0x80,0x80,0x80
0007a8  80808080          DCB      0x80,0x80,0x80,0x80
0007ac  80808182          DCB      0x80,0x80,0x81,0x82
0007b0  84848888          DCB      0x84,0x84,0x88,0x88
0007b4  88848482          DCB      0x88,0x84,0x84,0x82
0007b8  82818080          DCB      0x82,0x81,0x80,0x80
0007bc  80800000          DCB      0x80,0x80,0x00,0x00

                          AREA ||.data||, DATA, ALIGN=2

                  signal
000000  00                DCB      0x00
                  U_MENU_Item
000001  000000            DCB      0x00,0x00,0x00
                  U_MENU_Message
                          DCD      0x00000000
                  period_global
000008  00000000          DCB      0x00,0x00,0x00,0x00
                  thd
                          DCD      0x00000000
                  buffer
000010  00                DCB      0x00

;*** Start embedded assembler ***

#line 1 "menu.c"
	AREA ||.rev16_text||, CODE
	THUMB
	EXPORT |__asm___6_menu_c_d1e76eba____REV16|
#line 447 "C:\\Keil_v5\\ARM\\PACK\\ARM\\CMSIS\\5.0.1\\CMSIS\\Include\\cmsis_armcc.h"
|__asm___6_menu_c_d1e76eba____REV16| PROC
#line 448

 rev16 r0, r0
 bx lr
	ENDP
	AREA ||.revsh_text||, CODE
	THUMB
	EXPORT |__asm___6_menu_c_d1e76eba____REVSH|
#line 462
|__asm___6_menu_c_d1e76eba____REVSH| PROC
#line 463

 revsh r0, r0
 bx lr
	ENDP
	AREA ||.rrx_text||, CODE
	THUMB
	EXPORT |__asm___6_menu_c_d1e76eba____RRX|
#line 649
|__asm___6_menu_c_d1e76eba____RRX| PROC
#line 650

 rrx r0, r0
 bx lr
	ENDP

;*** End   embedded assembler ***
