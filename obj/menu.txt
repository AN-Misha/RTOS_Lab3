; generated by Component: ARM Compiler 5.06 update 5 (build 528) Tool: ArmCC [4d3621]
; commandline ArmCC [--list --split_sections --debug -c --asm --interleave -o.\obj\menu.o --asm_dir=.\obj\ --list_dir=.\obj\ --depend=.\obj\menu.d --cpu=Cortex-M3 --apcs=interwork -O0 --diag_suppress=9931 -I"..\CAN TEST" -I.\RTE -I.\RTE\Device -I.\RTE\Device\MDR1986BE92 -I.\rtos -I.\rtos\include -I.\RTE\Device\MDR1986BE92 -I.\RTE\_Target_1 -IC:\Keil_v5\ARM\PACK\ARM\CMSIS\5.0.1\CMSIS\Include -IC:\Keil_v5\ARM\PACK\Keil\MDR1986BExx\1.4\Config -IC:\Keil_v5\ARM\PACK\Keil\MDR1986BExx\1.4\Libraries\CMSIS\CM3\CoreSupport -IC:\Keil_v5\ARM\PACK\Keil\MDR1986BExx\1.4\Libraries\CMSIS\CM3\DeviceSupport\MDR32F9Qx\inc -IC:\Keil_v5\ARM\PACK\Keil\MDR1986BExx\1.4\Libraries\MDR32F9Qx_StdPeriph_Driver\inc -D__MICROLIB -D__UVISION_VERSION=524 -D_RTE_ -DUSE_MDR32F9Q2_Rev1 --omf_browse=.\obj\menu.crf menu.c]
                          THUMB

                          AREA ||i.Task_DSP||, CODE, READONLY, ALIGN=2

                          REQUIRE _printf_pre_padding
                          REQUIRE _printf_percent
                          REQUIRE _printf_widthprec
                          REQUIRE _printf_f
                          REQUIRE _printf_fp_dec
                  Task_DSP PROC
;;;204    // Задача обработчик буфера оцифрованных значений
;;;205    void Task_DSP(void)
000000  b08e              SUB      sp,sp,#0x38
;;;206    {
;;;207        arm_status fft_status;
;;;208        uint16_t *buffer_ADC,front1, front2, counter = 0, tim_period;
000002  f04f0a00          MOV      r10,#0
;;;209        uint32_t i,average,summa,period = 0;
000006  2700              MOVS     r7,#0
;;;210        float thd, summ_U = 0;
000008  2000              MOVS     r0,#0
00000a  900a              STR      r0,[sp,#0x28]
;;;211        State state = freq_meas;
00000c  9009              STR      r0,[sp,#0x24]
;;;212    	while(1)
00000e  e11b              B        |L1.584|
                  |L1.16|
;;;213    	{
;;;214    		// Объявление указателя на буфер обработки данных 
;;;215    		
;;;216            
;;;217            
;;;218    		float U;
;;;219    		/* Реализовано ожидание события с помощью двоичного
;;;220    		семафора. Семафор после создания становится
;;;221    		доступен (так, как будто его кто-то отдал).
;;;222    		Поэтому сразу после запуска планировщика задача
;;;223    		захватит его. Второй раз сделать это ей не удастся,
;;;224    		и она будет ожидать, находясь в блокированном
;;;225    		состоянии, пока семафор не отдаст обработчик
;;;226    		прерывания. Время ожидания задано равным
;;;227    		бесконечности, поэтому нет необходимости проверять
;;;228    		возвращаемое функцией xSemaphoreTake() значение. */
;;;229    		xSemaphoreTake(SemaphoreDMA, portMAX_DELAY);
000010  2300              MOVS     r3,#0
000012  1e5a              SUBS     r2,r3,#1
000014  4619              MOV      r1,r3
000016  488d              LDR      r0,|L1.588|
000018  6800              LDR      r0,[r0,#0]  ; SemaphoreDMA
00001a  f7fffffe          BL       xQueueGenericReceive
;;;230    		//Задача разблокирована, семафор взят
;;;231    		if(ping_pong==PING)
00001e  488c              LDR      r0,|L1.592|
000020  6800              LDR      r0,[r0,#0]  ; ping_pong
000022  b900              CBNZ     r0,|L1.38|
;;;232    		{
;;;233    			//Заполняется DMA буфер пинг
;;;234    				// В указатель buffer_ADC записывается начальный адрес массива буфера понг
;;;235    			buffer_ADC=ADC_Buffer_pong;
000024  4d8b              LDR      r5,|L1.596|
                  |L1.38|
;;;236    		}
;;;237    		if(ping_pong==PONG)
000026  488a              LDR      r0,|L1.592|
000028  6800              LDR      r0,[r0,#0]  ; ping_pong
00002a  2801              CMP      r0,#1
00002c  d100              BNE      |L1.48|
;;;238    		{
;;;239    			//Заполняется DMA буфер понг
;;;240    			// В указатель buffer_ADC записывается начальный адрес массива буфера пинг
;;;241    			buffer_ADC=ADC_Buffer_ping;
00002e  4d8a              LDR      r5,|L1.600|
                  |L1.48|
;;;242    		}
;;;243    		// Обработка буфера оцифрованных значений
;;;244    		if(state == freq_meas)
000030  9809              LDR      r0,[sp,#0x24]
000032  2800              CMP      r0,#0
000034  d17e              BNE      |L1.308|
;;;245            {
;;;246                summa=0;
000036  900c              STR      r0,[sp,#0x30]
;;;247                for(i=0;i<ADC_BUFFER_SIZE;i++)
000038  2400              MOVS     r4,#0
00003a  e005              B        |L1.72|
                  |L1.60|
;;;248                {
;;;249                    summa=buffer_ADC[i]+summa;
00003c  f8351014          LDRH     r1,[r5,r4,LSL #1]
000040  980c              LDR      r0,[sp,#0x30]
000042  4408              ADD      r0,r0,r1
000044  900c              STR      r0,[sp,#0x30]
000046  1c64              ADDS     r4,r4,#1              ;247
                  |L1.72|
000048  2cff              CMP      r4,#0xff              ;247
00004a  d9f7              BLS      |L1.60|
;;;250                }
;;;251                // Получение среднего значения
;;;252                average=summa/ADC_BUFFER_SIZE;
00004c  980c              LDR      r0,[sp,#0x30]
00004e  0a06              LSRS     r6,r0,#8
;;;253                
;;;254                if(buffer_ADC[0] > average)
000050  8828              LDRH     r0,[r5,#0]
000052  42b0              CMP      r0,r6
000054  d919              BLS      |L1.138|
;;;255                {
;;;256                   for(i = 0; i < ADC_BUFFER_SIZE; i++)
000056  2400              MOVS     r4,#0
000058  e007              B        |L1.106|
                  |L1.90|
;;;257                   {
;;;258                      if(buffer_ADC[i] < average)
00005a  f8350014          LDRH     r0,[r5,r4,LSL #1]
00005e  42b0              CMP      r0,r6
000060  d202              BCS      |L1.104|
;;;259                      {
;;;260                          front1 = i;
000062  fa1ff984          UXTH     r9,r4
;;;261                          break;
000066  e002              B        |L1.110|
                  |L1.104|
000068  1c64              ADDS     r4,r4,#1              ;256
                  |L1.106|
00006a  2cff              CMP      r4,#0xff              ;256
00006c  d9f5              BLS      |L1.90|
                  |L1.110|
00006e  bf00              NOP      
;;;262                      }
;;;263                   }
;;;264                   
;;;265                   for(i = front1; i < ADC_BUFFER_SIZE; i++)
000070  464c              MOV      r4,r9
000072  e007              B        |L1.132|
                  |L1.116|
;;;266                   {
;;;267                      if(buffer_ADC[i] > average)
000074  f8350014          LDRH     r0,[r5,r4,LSL #1]
000078  42b0              CMP      r0,r6
00007a  d902              BLS      |L1.130|
;;;268                      {
;;;269                          front2 = i;
00007c  b2a0              UXTH     r0,r4
00007e  900d              STR      r0,[sp,#0x34]
;;;270                          break;
000080  e002              B        |L1.136|
                  |L1.130|
000082  1c64              ADDS     r4,r4,#1              ;265
                  |L1.132|
000084  2cff              CMP      r4,#0xff              ;265
000086  d9f5              BLS      |L1.116|
                  |L1.136|
000088  e019              B        |L1.190|
                  |L1.138|
;;;271                      }
;;;272                   }           
;;;273                }
;;;274                else
;;;275                {
;;;276                   for(i = 0; i < ADC_BUFFER_SIZE; i++)
00008a  2400              MOVS     r4,#0
00008c  e007              B        |L1.158|
                  |L1.142|
;;;277                   {
;;;278                      if(buffer_ADC[i] > average)
00008e  f8350014          LDRH     r0,[r5,r4,LSL #1]
000092  42b0              CMP      r0,r6
000094  d902              BLS      |L1.156|
;;;279                      {
;;;280                          front1 = i;
000096  fa1ff984          UXTH     r9,r4
;;;281                          break;
00009a  e002              B        |L1.162|
                  |L1.156|
00009c  1c64              ADDS     r4,r4,#1              ;276
                  |L1.158|
00009e  2cff              CMP      r4,#0xff              ;276
0000a0  d9f5              BLS      |L1.142|
                  |L1.162|
0000a2  bf00              NOP      
;;;282                      }
;;;283                   }
;;;284                   
;;;285                   for(i = front1; i < ADC_BUFFER_SIZE; i++)
0000a4  464c              MOV      r4,r9
0000a6  e007              B        |L1.184|
                  |L1.168|
;;;286                   {
;;;287                      if(buffer_ADC[i] < average)
0000a8  f8350014          LDRH     r0,[r5,r4,LSL #1]
0000ac  42b0              CMP      r0,r6
0000ae  d202              BCS      |L1.182|
;;;288                      {
;;;289                          front2 = i;
0000b0  b2a0              UXTH     r0,r4
0000b2  900d              STR      r0,[sp,#0x34]
;;;290                          break;
0000b4  e002              B        |L1.188|
                  |L1.182|
0000b6  1c64              ADDS     r4,r4,#1              ;285
                  |L1.184|
0000b8  2cff              CMP      r4,#0xff              ;285
0000ba  d9f5              BLS      |L1.168|
                  |L1.188|
0000bc  bf00              NOP      
                  |L1.190|
;;;291                      }
;;;292                   } 
;;;293                }
;;;294                period += 2*(front2 - front1);
0000be  980d              LDR      r0,[sp,#0x34]
0000c0  eba00009          SUB      r0,r0,r9
0000c4  2102              MOVS     r1,#2
0000c6  fb017700          MLA      r7,r1,r0,r7
;;;295                counter++;
0000ca  f10a0001          ADD      r0,r10,#1
0000ce  fa1ffa80          UXTH     r10,r0
;;;296                if(counter == ADC_MEAN)
0000d2  f1ba0f14          CMP      r10,#0x14
0000d6  d13f              BNE      |L1.344|
;;;297                {
;;;298                    counter = 0;
0000d8  f04f0a00          MOV      r10,#0
;;;299                    period = period / ADC_MEAN;
0000dc  2014              MOVS     r0,#0x14
0000de  fbb7f7f0          UDIV     r7,r7,r0
;;;300                    //period_global = period;
;;;301                    U = ADC_FREQ/period;
0000e2  f2427010          MOV      r0,#0x2710
0000e6  fbb0f0f7          UDIV     r0,r0,r7
0000ea  9007              STR      r0,[sp,#0x1c]
0000ec  f7fffffe          BL       __aeabi_ui2f
0000f0  9008              STR      r0,[sp,#0x20]
;;;302                    sprintf(message , "F = %5.3fHz", U);
0000f2  9808              LDR      r0,[sp,#0x20]
0000f4  f7fffffe          BL       __aeabi_f2d
0000f8  4602              MOV      r2,r0
0000fa  460b              MOV      r3,r1
0000fc  e9cd0106          STRD     r0,r1,[sp,#0x18]
000100  a156              ADR      r1,|L1.604|
000102  4859              LDR      r0,|L1.616|
000104  f7fffffe          BL       __2sprintf
;;;303                    U_MLT_Put_String (message, 4);
000108  2104              MOVS     r1,#4
00010a  4857              LDR      r0,|L1.616|
00010c  f7fffffe          BL       U_MLT_Put_String
;;;304                    DMA_Cmd (DMA_Channel_ADC1, DISABLE);
000110  2100              MOVS     r1,#0
000112  2008              MOVS     r0,#8
000114  f7fffffe          BL       DMA_Cmd
;;;305                    TIMER_Cmd(MDR_TIMER1, DISABLE);
000118  2100              MOVS     r1,#0
00011a  4854              LDR      r0,|L1.620|
00011c  f7fffffe          BL       TIMER_Cmd
;;;306                    tim_period = (1000000 / 32)/(ADC_FREQ/period);
000120  f2427010          MOV      r0,#0x2710
000124  fbb0f0f7          UDIV     r0,r0,r7
000128  f6472112          MOV      r1,#0x7a12
00012c  fbb1fbf0          UDIV     r11,r1,r0
;;;307                    TIM_CntInit.TIMER_Period = tim_period;
000130  484f              LDR      r0,|L1.624|
000132  e000              B        |L1.310|
                  |L1.308|
000134  e011              B        |L1.346|
                  |L1.310|
000136  f8a0b004          STRH     r11,[r0,#4]
;;;308                    period = 0;
00013a  2700              MOVS     r7,#0
;;;309                    //ping_pong = PING;
;;;310                   // DMA_InitStructure.DMA_DestBaseAddr  =(uint32_t) &ADC_Buffer_ping;
;;;311                   // DMA_Init (DMA_Channel_ADC1, &DMA_Channel_InitStructure);
;;;312                    TIMER_CntInit(MDR_TIMER1, &TIM_CntInit);
00013c  4601              MOV      r1,r0
00013e  484b              LDR      r0,|L1.620|
000140  f7fffffe          BL       TIMER_CntInit
;;;313                    DMA_Cmd (DMA_Channel_ADC1, ENABLE);
000144  2101              MOVS     r1,#1
000146  2008              MOVS     r0,#8
000148  f7fffffe          BL       DMA_Cmd
;;;314                    TIMER_Cmd(MDR_TIMER1, ENABLE);
00014c  2101              MOVS     r1,#1
00014e  4847              LDR      r0,|L1.620|
000150  f7fffffe          BL       TIMER_Cmd
;;;315                    state = fft;
000154  2001              MOVS     r0,#1
000156  9009              STR      r0,[sp,#0x24]
                  |L1.344|
000158  e075              B        |L1.582|
                  |L1.346|
;;;316                    
;;;317                }
;;;318            }
;;;319            else if(state == fft)
00015a  9809              LDR      r0,[sp,#0x24]
00015c  2801              CMP      r0,#1
00015e  d172              BNE      |L1.582|
;;;320            {
;;;321                fft_status = arm_rfft_init_q15(&S, FFT_SIZE,0, 1);
000160  2301              MOVS     r3,#1
000162  2200              MOVS     r2,#0
000164  2120              MOVS     r1,#0x20
000166  4843              LDR      r0,|L1.628|
000168  f7fffffe          BL       arm_rfft_init_q15
00016c  4680              MOV      r8,r0
;;;322                if(fft_status == ARM_MATH_SUCCESS)
00016e  f1b80f00          CMP      r8,#0
000172  d168              BNE      |L1.582|
;;;323                {
;;;324                    arm_rfft_q15(&S, (q15_t *)&buffer_ADC[0], &fft_res[0]);
000174  4a40              LDR      r2,|L1.632|
000176  4629              MOV      r1,r5
000178  483e              LDR      r0,|L1.628|
00017a  f7fffffe          BL       arm_rfft_q15
;;;325                    for(i = 0; i < FFT_SIZE*2; i++)
00017e  2400              MOVS     r4,#0
000180  e008              B        |L1.404|
                  |L1.386|
;;;326                    {
;;;327                        fft_res[i]<<=FFT_UPSCALE;
000182  483d              LDR      r0,|L1.632|
000184  f8300014          LDRH     r0,[r0,r4,LSL #1]
000188  0100              LSLS     r0,r0,#4
00018a  b200              SXTH     r0,r0
00018c  493a              LDR      r1,|L1.632|
00018e  f8210014          STRH     r0,[r1,r4,LSL #1]
000192  1c64              ADDS     r4,r4,#1              ;325
                  |L1.404|
000194  2c40              CMP      r4,#0x40              ;325
000196  d3f4              BCC      |L1.386|
;;;328                    }
;;;329                    arm_cmplx_mag_q15(&fft_res[0], (q15_t *)&fft_amp[0], FFT_SIZE);
000198  2220              MOVS     r2,#0x20
00019a  4938              LDR      r1,|L1.636|
00019c  4836              LDR      r0,|L1.632|
00019e  f7fffffe          BL       arm_cmplx_mag_q15
;;;330                    for(i = 2; i < FFT_SIZE/2; i++)
0001a2  2402              MOVS     r4,#2
0001a4  e00c              B        |L1.448|
                  |L1.422|
;;;331                    {
;;;332                        summ_U += fft_amp[i] * fft_amp[i];
0001a6  4935              LDR      r1,|L1.636|
0001a8  f8311014          LDRH     r1,[r1,r4,LSL #1]
0001ac  fb01f001          MUL      r0,r1,r1
0001b0  f7fffffe          BL       __aeabi_i2f
0001b4  9007              STR      r0,[sp,#0x1c]
0001b6  990a              LDR      r1,[sp,#0x28]
0001b8  f7fffffe          BL       __aeabi_fadd
0001bc  900a              STR      r0,[sp,#0x28]
0001be  1c64              ADDS     r4,r4,#1              ;330
                  |L1.448|
0001c0  2c10              CMP      r4,#0x10              ;330
0001c2  d3f0              BCC      |L1.422|
;;;333                    }
;;;334                    thd = (sqrt(summ_U) / fft_amp[1]);
0001c4  492d              LDR      r1,|L1.636|
0001c6  8848              LDRH     r0,[r1,#2]  ; fft_amp
0001c8  f7fffffe          BL       __aeabi_ui2d
0001cc  e9cd0104          STRD     r0,r1,[sp,#0x10]
0001d0  980a              LDR      r0,[sp,#0x28]
0001d2  f7fffffe          BL       __aeabi_f2d
0001d6  e9cd0100          STRD     r0,r1,[sp,#0]
0001da  f7fffffe          BL       sqrt
0001de  e9cd0102          STRD     r0,r1,[sp,#8]
0001e2  e9dd2304          LDRD     r2,r3,[sp,#0x10]
0001e6  f7fffffe          BL       __aeabi_ddiv
0001ea  e9cd0106          STRD     r0,r1,[sp,#0x18]
0001ee  f7fffffe          BL       __aeabi_d2f
0001f2  900b              STR      r0,[sp,#0x2c]
;;;335                    sprintf(message , "THD = %3.3f%%", thd);
0001f4  980b              LDR      r0,[sp,#0x2c]
0001f6  f7fffffe          BL       __aeabi_f2d
0001fa  4602              MOV      r2,r0
0001fc  460b              MOV      r3,r1
0001fe  e9cd0106          STRD     r0,r1,[sp,#0x18]
000202  a11f              ADR      r1,|L1.640|
000204  4818              LDR      r0,|L1.616|
000206  f7fffffe          BL       __2sprintf
;;;336                    U_MLT_Put_String (message, 5);
00020a  2105              MOVS     r1,#5
00020c  4816              LDR      r0,|L1.616|
00020e  f7fffffe          BL       U_MLT_Put_String
;;;337                    state = freq_meas;
000212  2000              MOVS     r0,#0
000214  9009              STR      r0,[sp,#0x24]
;;;338                    
;;;339                    DMA_Cmd (DMA_Channel_ADC1, DISABLE);
000216  2100              MOVS     r1,#0
000218  2008              MOVS     r0,#8
00021a  f7fffffe          BL       DMA_Cmd
;;;340                    TIMER_Cmd(MDR_TIMER1, DISABLE);
00021e  2100              MOVS     r1,#0
000220  4812              LDR      r0,|L1.620|
000222  f7fffffe          BL       TIMER_Cmd
;;;341                    TIM_CntInit.TIMER_Period = 999;
000226  f24030e7          MOV      r0,#0x3e7
00022a  4911              LDR      r1,|L1.624|
00022c  8088              STRH     r0,[r1,#4]
;;;342                    period = 0;
00022e  2700              MOVS     r7,#0
;;;343                    //ping_pong = PING;
;;;344                    //DMA_InitStructure.DMA_DestBaseAddr  =(uint32_t) &ADC_Buffer_ping;
;;;345                    //DMA_Init (DMA_Channel_ADC1, &DMA_Channel_InitStructure);
;;;346                    TIMER_CntInit(MDR_TIMER1, &TIM_CntInit);
000230  480e              LDR      r0,|L1.620|
000232  f7fffffe          BL       TIMER_CntInit
;;;347                    DMA_Cmd (DMA_Channel_ADC1, ENABLE);
000236  2101              MOVS     r1,#1
000238  2008              MOVS     r0,#8
00023a  f7fffffe          BL       DMA_Cmd
;;;348                    TIMER_Cmd(MDR_TIMER1, ENABLE);
00023e  2101              MOVS     r1,#1
000240  480a              LDR      r0,|L1.620|
000242  f7fffffe          BL       TIMER_Cmd
                  |L1.582|
;;;349                    
;;;350                }
;;;351                
;;;352                
;;;353            }
;;;354            
;;;355            
;;;356            
;;;357    		// Преобразование среднего значения АЦП в измеренное напряжение
;;;358    		// U_ADC_U равно 3.3, напряжение питания
;;;359    		// U_ADC_D равно 0x1000 (212=4096) – максимальное значение 12-разрядного АЦП
;;;360    		// U_ADC_U и U_ADC_D определены в файле adc.h
;;;361    		//U = ADC_FREQ/period; // получается результат вещественный в вольтах
;;;362    		// Вывести результат измерения напряжения на ЖКИ
;;;363    		// формирует строку символов с вставкой 5-символьного поля - вещественное значение с 3 цифрами после запятой 
;;;364    		
;;;365    	}
000246  bf00              NOP      
                  |L1.584|
000248  e6e2              B        |L1.16|
;;;366    }	
                          ENDP

00024a  0000              DCW      0x0000
                  |L1.588|
                          DCD      SemaphoreDMA
                  |L1.592|
                          DCD      ping_pong
                  |L1.596|
                          DCD      ADC_Buffer_pong
                  |L1.600|
                          DCD      ADC_Buffer_ping
                  |L1.604|
00025c  46203d20          DCB      "F = %5.3fHz",0
000260  25352e33
000264  66487a00
                  |L1.616|
                          DCD      message
                  |L1.620|
                          DCD      0x40070000
                  |L1.624|
                          DCD      TIM_CntInit
                  |L1.628|
                          DCD      S
                  |L1.632|
                          DCD      fft_res
                  |L1.636|
                          DCD      fft_amp
                  |L1.640|
000280  54484420          DCB      "THD = %3.3f%%",0
000284  3d202533
000288  2e336625
00028c  2500    
00028e  00                DCB      0
00028f  00                DCB      0

                          AREA ||i.Task_output||, CODE, READONLY, ALIGN=2

                  Task_output PROC
;;;188    // Задача для работы с выводом по UART
;;;189    void Task_output(void)
000000  e014              B        |L2.44|
                  |L2.2|
;;;190    {
;;;191    	  static uint8_t buffer;
;;;192      while(1)
;;;193    	{
;;;194    		if (xQueueReceive(stdout_queue, &buffer, portMAX_DELAY) == pdPASS)
000002  2300              MOVS     r3,#0
000004  1e5a              SUBS     r2,r3,#1
000006  490a              LDR      r1,|L2.48|
000008  480a              LDR      r0,|L2.52|
00000a  6800              LDR      r0,[r0,#0]  ; stdout_queue
00000c  f7fffffe          BL       xQueueGenericReceive
000010  2801              CMP      r0,#1
000012  d10b              BNE      |L2.44|
;;;195        {
;;;196    				  /* Ожидание флага освобождения буфера передачи (TXFE) */
;;;197    					while (UART_GetFlagStatus(UART_IO, UART_FLAG_TXFE) != SET);
000014  bf00              NOP      
                  |L2.22|
000016  2180              MOVS     r1,#0x80
000018  4807              LDR      r0,|L2.56|
00001a  f7fffffe          BL       UART_GetFlagStatus
00001e  2801              CMP      r0,#1
000020  d1f9              BNE      |L2.22|
;;;198    					// Отправка одного символа по UART
;;;199    					UART_SendData(UART_IO, buffer);
000022  4803              LDR      r0,|L2.48|
000024  7801              LDRB     r1,[r0,#0]  ; buffer
000026  4804              LDR      r0,|L2.56|
000028  f7fffffe          BL       UART_SendData
                  |L2.44|
00002c  e7e9              B        |L2.2|
;;;200    		}
;;;201    				
;;;202      }
;;;203    }
;;;204    // Задача обработчик буфера оцифрованных значений
                          ENDP

00002e  0000              DCW      0x0000
                  |L2.48|
                          DCD      buffer
                  |L2.52|
                          DCD      stdout_queue
                  |L2.56|
                          DCD      0x40038000

                          AREA ||i.U_MENU_Init||, CODE, READONLY, ALIGN=2

                  U_MENU_Init PROC
;;;59     // Инициализировать меню
;;;60     void U_MENU_Init (void)
000000  b510              PUSH     {r4,lr}
;;;61     {
;;;62       	
;;;63     	// Выбрать начальный пункт меню
;;;64     	U_MENU_Item = 0;
000002  2000              MOVS     r0,#0
000004  4908              LDR      r1,|L3.40|
000006  7008              STRB     r0,[r1,#0]
;;;65     	// Отобразить начальный пункт меню
;;;66     	 // Подготовить строку для выбранного пункта меню
;;;67          U_MENU_Message = U_MENU_Prepare_Item (U_MENU_Item); 			
000008  4608              MOV      r0,r1
00000a  7800              LDRB     r0,[r0,#0]  ; U_MENU_Item
00000c  f7fffffe          BL       U_MENU_Prepare_Item
000010  4906              LDR      r1,|L3.44|
000012  6008              STR      r0,[r1,#0]  ; U_MENU_Message
;;;68     	// Вывести на ЖКИ строку пункта меню
;;;69     	if (U_MENU_Message)
000014  4608              MOV      r0,r1
000016  6800              LDR      r0,[r0,#0]  ; U_MENU_Message
000018  b120              CBZ      r0,|L3.36|
;;;70     	U_MLT_Put_String (U_MENU_Message, 3);
00001a  2103              MOVS     r1,#3
00001c  4803              LDR      r0,|L3.44|
00001e  6800              LDR      r0,[r0,#0]  ; U_MENU_Message
000020  f7fffffe          BL       U_MLT_Put_String
                  |L3.36|
;;;71     }
000024  bd10              POP      {r4,pc}
;;;72     
                          ENDP

000026  0000              DCW      0x0000
                  |L3.40|
                          DCD      U_MENU_Item
                  |L3.44|
                          DCD      U_MENU_Message

                          AREA ||i.U_MENU_Output||, CODE, READONLY, ALIGN=2

                          REQUIRE _scanf_string
                  U_MENU_Output PROC
;;;165    //Задача по выводу на ЖКИ информации полученной с терминала по UART
;;;166    void U_MENU_Output (void)
000000  b086              SUB      sp,sp,#0x18
;;;167    { 
;;;168    	 /* Буфер для полученного сообщения по UART */
;;;169        char Message_UART[16 + 1]; 
;;;170    	while(1)
000002  e00a              B        |L4.26|
                  |L4.4|
;;;171    	{	
;;;172    	 /* Ожидание ввода сообщения по UART */
;;;173       scanf("%16s", Message_UART);
000004  a901              ADD      r1,sp,#4
000006  a005              ADR      r0,|L4.28|
000008  f7fffffe          BL       __0scanf
;;;174    	 // Передача полученного ссобщения на дисплей ЖКИ в 4-ю строку
;;;175    	  U_MLT_Put_String (Message_UART, 4); 
00000c  2104              MOVS     r1,#4
00000e  a801              ADD      r0,sp,#4
000010  f7fffffe          BL       U_MLT_Put_String
;;;176    	 // Передача в стандартный поток вывода, что сообщение успешно передано на ЖКИ
;;;177    	 printf("Transmit Message To LCD - Success\r\n");
000014  a003              ADR      r0,|L4.36|
000016  f7fffffe          BL       __2printf
                  |L4.26|
00001a  e7f3              B        |L4.4|
;;;178    	}
;;;179    }
;;;180    // Задача - приветствие
                          ENDP

                  |L4.28|
00001c  25313673          DCB      "%16s",0
000020  00      
000021  00                DCB      0
000022  00                DCB      0
000023  00                DCB      0
                  |L4.36|
000024  5472616e          DCB      "Transmit Message To LCD - Success\r\n",0
000028  736d6974
00002c  204d6573
000030  73616765
000034  20546f20
000038  4c434420
00003c  2d205375
000040  63636573
000044  730d0a00

                          AREA ||i.U_MENU_Prepare_Item||, CODE, READONLY, ALIGN=2

                  U_MENU_Prepare_Item PROC
;;;114    // Подготовить строку для выбранного пункта меню
;;;115    char* U_MENU_Prepare_Item (uint8_t item) 
000000  4601              MOV      r1,r0
;;;116    {
;;;117    	switch (item)
000002  b131              CBZ      r1,|L5.18|
000004  2901              CMP      r1,#1
000006  d006              BEQ      |L5.22|
000008  2902              CMP      r1,#2
00000a  d006              BEQ      |L5.26|
00000c  2903              CMP      r1,#3
00000e  d108              BNE      |L5.34|
000010  e005              B        |L5.30|
                  |L5.18|
;;;118    	{
;;;119    		// Пункт 0;
;;;120    		case 0:
;;;121    			
;;;122    			return "\xCF\xF3\xED\xEA\xF2 0";  // Пункт 0
000012  a005              ADR      r0,|L5.40|
                  |L5.20|
;;;123    		
;;;124    		// Пункт 1;
;;;125    		case 1:
;;;126    			
;;;127    			return "\xCF\xF3\xED\xEA\xF2 1";  // Пункт 1
;;;128    
;;;129    		// Пункт 2;
;;;130    		case 2:
;;;131    			
;;;132    			return "\xCF\xF3\xED\xEA\xF2 2";  // Пункт 2
;;;133    
;;;134    		// Пункт 3;
;;;135    		case 3:
;;;136    		
;;;137    			return "\xCF\xF3\xED\xEA\xF2 3";  // Пункт 3
;;;138    		
;;;139    		default:
;;;140    			
;;;141    			return 0;
;;;142    	}
;;;143    }
000014  4770              BX       lr
                  |L5.22|
000016  a006              ADR      r0,|L5.48|
000018  e7fc              B        |L5.20|
                  |L5.26|
00001a  a007              ADR      r0,|L5.56|
00001c  e7fa              B        |L5.20|
                  |L5.30|
00001e  a008              ADR      r0,|L5.64|
000020  e7f8              B        |L5.20|
                  |L5.34|
000022  2000              MOVS     r0,#0                 ;141
000024  e7f6              B        |L5.20|
;;;144    
                          ENDP

000026  0000              DCW      0x0000
                  |L5.40|
000028  cff3edea          DCB      207,243,237,234,242," 0",0
00002c  f2203000
                  |L5.48|
000030  cff3edea          DCB      207,243,237,234,242," 1",0
000034  f2203100
                  |L5.56|
000038  cff3edea          DCB      207,243,237,234,242," 2",0
00003c  f2203200
                  |L5.64|
000040  cff3edea          DCB      207,243,237,234,242," 3",0
000044  f2203300

                          AREA ||i.U_MENU_Running_String_Task_Function||, CODE, READONLY, ALIGN=2

                  U_MENU_Running_String_Task_Function PROC
;;;145    // Задача по выводу бегущей строки на ЖКИ
;;;146    void U_MENU_Running_String_Task_Function (void)
000000  b086              SUB      sp,sp,#0x18
;;;147    {
;;;148    	uint32_t k = 0;
000002  2400              MOVS     r4,#0
;;;149    	
;;;150    	// Строка, выводимая на индикатор 
;;;151    //	const char s[] =  "\xD0\xE0\xE1\xEE\xF2\xE0 \xF1 \xEA\xED\xEE\xEF\xEA\xE0\xEC\xE8   ";  // "Работа с кнопками"
;;;152    	const char s[]="Work with buttons";
000004  2214              MOVS     r2,#0x14
000006  a108              ADR      r1,|L6.40|
000008  a801              ADD      r0,sp,#4
00000a  f7fffffe          BL       __aeabi_memcpy4
;;;153    	while(1)
00000e  e009              B        |L6.36|
                  |L6.16|
;;;154    	{
;;;155    		// Пауза в тиках системного таймера. Здесь 1 тик = 1 мс
;;;156        vTaskDelay(1000);
000010  f44f707a          MOV      r0,#0x3e8
000014  f7fffffe          BL       vTaskDelay
;;;157    		
;;;158    		// Вывести строку c прокруткой
;;;159    		// s - выводимая строка
;;;160    		// 6 - номер строки на дисплее
;;;161    		// k++ - смещение строки на количество символов
;;;162    		U_MLT_Scroll_String (s, 6, k++);
000018  4622              MOV      r2,r4
00001a  1c64              ADDS     r4,r4,#1
00001c  2106              MOVS     r1,#6
00001e  a801              ADD      r0,sp,#4
000020  f7fffffe          BL       U_MLT_Scroll_String
                  |L6.36|
000024  e7f4              B        |L6.16|
;;;163    	}
;;;164    }
;;;165    //Задача по выводу на ЖКИ информации полученной с терминала по UART
                          ENDP

000026  0000              DCW      0x0000
                  |L6.40|
000028  576f726b          DCB      "Work with buttons",0
00002c  20776974
000030  68206275
000034  74746f6e
000038  7300    
00003a  00                DCB      0
00003b  00                DCB      0

                          AREA ||i.U_MENU_Task_Function||, CODE, READONLY, ALIGN=2

                  U_MENU_Task_Function PROC
;;;73     // Задача по работе с меню
;;;74     void U_MENU_Task_Function (void)
000000  f7fffffe          BL       xTaskGetTickCount
;;;75     {
;;;76     	/*Переменная, которая будет хранить значение счётчика квантов*/
;;;77     	portTickType xLastTime;
;;;78     	uint8_t flag_button;
;;;79     	//Инициализация переменной, хранящей значение счётчика квантов
;;;80     	xLastTime=xTaskGetTickCount();
000004  4604              MOV      r4,r0
;;;81     	flag_button=OFF;
000006  2500              MOVS     r5,#0
;;;82     	while(1)
000008  e036              B        |L7.120|
                  |L7.10|
;;;83     	{
;;;84     		// Пауза 20мс, чтобы по-напрасну не грузить процессор
;;;85         vTaskDelay (20);  
00000a  2014              MOVS     r0,#0x14
00000c  f7fffffe          BL       vTaskDelay
;;;86         // Проверка на нажатие кнопки
;;;87     	if ((U_BTN_Read_Button()==ON) && (flag_button==OFF)&& ((xTaskGetTickCount()-xLastTime)>=DrebezgTime))
000010  f7fffffe          BL       U_BTN_Read_Button
000014  2801              CMP      r0,#1
000016  d109              BNE      |L7.44|
000018  b945              CBNZ     r5,|L7.44|
00001a  f7fffffe          BL       xTaskGetTickCount
00001e  1b00              SUBS     r0,r0,r4
000020  2832              CMP      r0,#0x32
000022  d303              BCC      |L7.44|
;;;88     	{
;;;89     	  
;;;90     	  // Если нажата кнопка установить флаг нажатой кнопки
;;;91     	  flag_button=ON;
000024  2501              MOVS     r5,#1
;;;92     	  xLastTime=xTaskGetTickCount(); // Получение текущего значения счётчика квантов	
000026  f7fffffe          BL       xTaskGetTickCount
00002a  4604              MOV      r4,r0
                  |L7.44|
;;;93     	}	
;;;94     	// Проверка на отпускание кнопки с учетом времени антидребезга
;;;95     	if ((flag_button==ON)&&(U_BTN_Read_Button()==OFF)&& ((xTaskGetTickCount()-xLastTime)>=DrebezgTime))
00002c  2d01              CMP      r5,#1
00002e  d123              BNE      |L7.120|
000030  f7fffffe          BL       U_BTN_Read_Button
000034  bb00              CBNZ     r0,|L7.120|
000036  f7fffffe          BL       xTaskGetTickCount
00003a  1b00              SUBS     r0,r0,r4
00003c  2832              CMP      r0,#0x32
00003e  d31b              BCC      |L7.120|
;;;96     	{
;;;97     		// Перейти к следующему пункту меню, а если прошли все, то к начальному
;;;98     	  if (++ U_MENU_Item == U_MENU_ITEM_COUNT)
000040  480e              LDR      r0,|L7.124|
000042  7800              LDRB     r0,[r0,#0]  ; U_MENU_Item
000044  1c40              ADDS     r0,r0,#1
000046  b2c0              UXTB     r0,r0
000048  490c              LDR      r1,|L7.124|
00004a  7008              STRB     r0,[r1,#0]
00004c  2804              CMP      r0,#4
00004e  d101              BNE      |L7.84|
;;;99     		 U_MENU_Item = 0;
000050  2000              MOVS     r0,#0
000052  7008              STRB     r0,[r1,#0]
                  |L7.84|
;;;100    	  // Подготовить строку для выбранного пункта меню
;;;101    	  U_MENU_Message = U_MENU_Prepare_Item (U_MENU_Item); 			
000054  4809              LDR      r0,|L7.124|
000056  7800              LDRB     r0,[r0,#0]  ; U_MENU_Item
000058  f7fffffe          BL       U_MENU_Prepare_Item
00005c  4908              LDR      r1,|L7.128|
00005e  6008              STR      r0,[r1,#0]  ; U_MENU_Message
;;;102    	  // Вывести на ЖКИ строку пункта меню
;;;103    	  if (U_MENU_Message)
000060  4608              MOV      r0,r1
000062  6800              LDR      r0,[r0,#0]  ; U_MENU_Message
000064  b120              CBZ      r0,|L7.112|
;;;104    	  U_MLT_Put_String (U_MENU_Message, 3); 
000066  2103              MOVS     r1,#3
000068  4805              LDR      r0,|L7.128|
00006a  6800              LDR      r0,[r0,#0]  ; U_MENU_Message
00006c  f7fffffe          BL       U_MLT_Put_String
                  |L7.112|
;;;105    		// Если кнопка отжата установить флаг отжатой кнопки
;;;106    		flag_button=OFF;
000070  2500              MOVS     r5,#0
;;;107    		xLastTime=xTaskGetTickCount(); // Получение текущего значения счётчика квантов	
000072  f7fffffe          BL       xTaskGetTickCount
000076  4604              MOV      r4,r0
                  |L7.120|
000078  e7c7              B        |L7.10|
;;;108    	}
;;;109        
;;;110    		
;;;111    	}
;;;112    }
;;;113    
                          ENDP

00007a  0000              DCW      0x0000
                  |L7.124|
                          DCD      U_MENU_Item
                  |L7.128|
                          DCD      U_MENU_Message

                          AREA ||i.U_Privet||, CODE, READONLY, ALIGN=2

                  U_Privet PROC
;;;180    // Задача - приветствие
;;;181    void U_Privet(void)
000000  b510              PUSH     {r4,lr}
;;;182    {
;;;183    	// Отправка сообщения приветствия
;;;184    	printf("Work with Semaphors\r\n");
000002  a003              ADR      r0,|L8.16|
000004  f7fffffe          BL       __2printf
;;;185    	// Удаление задачи
;;;186    	vTaskDelete( NULL );
000008  2000              MOVS     r0,#0
00000a  f7fffffe          BL       vTaskDelete
;;;187    }
00000e  bd10              POP      {r4,pc}
;;;188    // Задача для работы с выводом по UART
                          ENDP

                  |L8.16|
000010  576f726b          DCB      "Work with Semaphors\r\n",0
000014  20776974
000018  68205365
00001c  6d617068
000020  6f72730d
000024  0a00    
000026  00                DCB      0
000027  00                DCB      0

                          AREA ||.bss||, DATA, NOINIT, ALIGN=2

                  fft_res
                          %        128
                  S
                          %        24
                  fft_amp
                          %        64
                  message
                          %        64

                          AREA ||.constdata||, DATA, READONLY, ALIGN=0

                  MLT_Font
000000  00000000          DCB      0x00,0x00,0x00,0x00
000004  00000000          DCB      0x00,0x00,0x00,0x00
000008  000000df          DCB      0x00,0x00,0x00,0xdf
00000c  df000000          DCB      0xdf,0x00,0x00,0x00
000010  00070700          DCB      0x00,0x07,0x07,0x00
000014  07070000          DCB      0x07,0x07,0x00,0x00
000018  2424ff24          DCB      0x24,0x24,0xff,0x24
00001c  ff242400          DCB      0xff,0x24,0x24,0x00
000020  00000000          DCB      0x00,0x00,0x00,0x00
000024  00000000          DCB      0x00,0x00,0x00,0x00
000028  00633318          DCB      0x00,0x63,0x33,0x18
00002c  0c666300          DCB      0x0c,0x66,0x63,0x00
000030  60f69f89          DCB      0x60,0xf6,0x9f,0x89
000034  9f76d800          DCB      0x9f,0x76,0xd8,0x00
000038  00000007          DCB      0x00,0x00,0x00,0x07
00003c  07000000          DCB      0x07,0x00,0x00,0x00
000040  003c7ec3          DCB      0x00,0x3c,0x7e,0xc3
000044  81810000          DCB      0x81,0x81,0x00,0x00
000048  008181c3          DCB      0x00,0x81,0x81,0xc3
00004c  7e3c0000          DCB      0x7e,0x3c,0x00,0x00
000050  082a1c7f          DCB      0x08,0x2a,0x1c,0x7f
000054  1c2a0800          DCB      0x1c,0x2a,0x08,0x00
000058  0018187e          DCB      0x00,0x18,0x18,0x7e
00005c  7e181800          DCB      0x7e,0x18,0x18,0x00
000060  000080e0          DCB      0x00,0x00,0x80,0xe0
000064  60000000          DCB      0x60,0x00,0x00,0x00
000068  00181818          DCB      0x00,0x18,0x18,0x18
00006c  18181800          DCB      0x18,0x18,0x18,0x00
000070  00000060          DCB      0x00,0x00,0x00,0x60
000074  60000000          DCB      0x60,0x00,0x00,0x00
000078  0000c0f0          DCB      0x00,0x00,0xc0,0xf0
00007c  3c0f0300          DCB      0x3c,0x0f,0x03,0x00
000080  3e7f7159          DCB      0x3e,0x7f,0x71,0x59
000084  4d7f3e00          DCB      0x4d,0x7f,0x3e,0x00
000088  40427f7f          DCB      0x40,0x42,0x7f,0x7f
00008c  40400000          DCB      0x40,0x40,0x00,0x00
000090  62735949          DCB      0x62,0x73,0x59,0x49
000094  6f660000          DCB      0x6f,0x66,0x00,0x00
000098  22634949          DCB      0x22,0x63,0x49,0x49
00009c  7f360000          DCB      0x7f,0x36,0x00,0x00
0000a0  181c1653          DCB      0x18,0x1c,0x16,0x53
0000a4  7f7f5000          DCB      0x7f,0x7f,0x50,0x00
0000a8  27674545          DCB      0x27,0x67,0x45,0x45
0000ac  7d390000          DCB      0x7d,0x39,0x00,0x00
0000b0  3c7e4b49          DCB      0x3c,0x7e,0x4b,0x49
0000b4  79300000          DCB      0x79,0x30,0x00,0x00
0000b8  03037179          DCB      0x03,0x03,0x71,0x79
0000bc  0f070000          DCB      0x0f,0x07,0x00,0x00
0000c0  367f4949          DCB      0x36,0x7f,0x49,0x49
0000c4  7f360000          DCB      0x7f,0x36,0x00,0x00
0000c8  064f4969          DCB      0x06,0x4f,0x49,0x69
0000cc  3f1e0000          DCB      0x3f,0x1e,0x00,0x00
0000d0  00000066          DCB      0x00,0x00,0x00,0x66
0000d4  66000000          DCB      0x66,0x00,0x00,0x00
0000d8  00008066          DCB      0x00,0x00,0x80,0x66
0000dc  66000000          DCB      0x66,0x00,0x00,0x00
0000e0  00000814          DCB      0x00,0x00,0x08,0x14
0000e4  22410000          DCB      0x22,0x41,0x00,0x00
0000e8  00282828          DCB      0x00,0x28,0x28,0x28
0000ec  28282800          DCB      0x28,0x28,0x28,0x00
0000f0  00004122          DCB      0x00,0x00,0x41,0x22
0000f4  14080000          DCB      0x14,0x08,0x00,0x00
0000f8  00020369          DCB      0x00,0x02,0x03,0x69
0000fc  6d070200          DCB      0x6d,0x07,0x02,0x00
000100  00000000          DCB      0x00,0x00,0x00,0x00
000104  00000000          DCB      0x00,0x00,0x00,0x00
000108  7c7e1313          DCB      0x7c,0x7e,0x13,0x13
00010c  7e7c0000          DCB      0x7e,0x7c,0x00,0x00
000110  417f7f49          DCB      0x41,0x7f,0x7f,0x49
000114  497f3600          DCB      0x49,0x7f,0x36,0x00
000118  1c3e6341          DCB      0x1c,0x3e,0x63,0x41
00011c  41632200          DCB      0x41,0x63,0x22,0x00
000120  417f7f41          DCB      0x41,0x7f,0x7f,0x41
000124  633e1c00          DCB      0x63,0x3e,0x1c,0x00
000128  417f7f49          DCB      0x41,0x7f,0x7f,0x49
00012c  5d416300          DCB      0x5d,0x41,0x63,0x00
000130  417f7f49          DCB      0x41,0x7f,0x7f,0x49
000134  1d010300          DCB      0x1d,0x01,0x03,0x00
000138  1c3e6341          DCB      0x1c,0x3e,0x63,0x41
00013c  51737200          DCB      0x51,0x73,0x72,0x00
000140  7f7f0808          DCB      0x7f,0x7f,0x08,0x08
000144  7f7f0000          DCB      0x7f,0x7f,0x00,0x00
000148  00417f7f          DCB      0x00,0x41,0x7f,0x7f
00014c  41000000          DCB      0x41,0x00,0x00,0x00
000150  30704041          DCB      0x30,0x70,0x40,0x41
000154  7f3f0100          DCB      0x7f,0x3f,0x01,0x00
000158  417f7f08          DCB      0x41,0x7f,0x7f,0x08
00015c  1c776300          DCB      0x1c,0x77,0x63,0x00
000160  417f7f41          DCB      0x41,0x7f,0x7f,0x41
000164  40607000          DCB      0x40,0x60,0x70,0x00
000168  7f7f0e1c          DCB      0x7f,0x7f,0x0e,0x1c
00016c  0e7f7f00          DCB      0x0e,0x7f,0x7f,0x00
000170  7f7f060c          DCB      0x7f,0x7f,0x06,0x0c
000174  187f7f00          DCB      0x18,0x7f,0x7f,0x00
000178  1c3e6341          DCB      0x1c,0x3e,0x63,0x41
00017c  633e1c00          DCB      0x63,0x3e,0x1c,0x00
000180  417f7f49          DCB      0x41,0x7f,0x7f,0x49
000184  090f0600          DCB      0x09,0x0f,0x06,0x00
000188  1e3f2171          DCB      0x1e,0x3f,0x21,0x71
00018c  7f5e0000          DCB      0x7f,0x5e,0x00,0x00
000190  417f7f09          DCB      0x41,0x7f,0x7f,0x09
000194  197f6600          DCB      0x19,0x7f,0x66,0x00
000198  266f4d59          DCB      0x26,0x6f,0x4d,0x59
00019c  73320000          DCB      0x73,0x32,0x00,0x00
0001a0  03417f7f          DCB      0x03,0x41,0x7f,0x7f
0001a4  41030000          DCB      0x41,0x03,0x00,0x00
0001a8  3f7f6060          DCB      0x3f,0x7f,0x60,0x60
0001ac  7f3f0000          DCB      0x7f,0x3f,0x00,0x00
0001b0  1f3f6060          DCB      0x1f,0x3f,0x60,0x60
0001b4  3f1f0000          DCB      0x3f,0x1f,0x00,0x00
0001b8  7f7f3018          DCB      0x7f,0x7f,0x30,0x18
0001bc  307f7f00          DCB      0x30,0x7f,0x7f,0x00
0001c0  63673c18          DCB      0x63,0x67,0x3c,0x18
0001c4  3c676300          DCB      0x3c,0x67,0x63,0x00
0001c8  074f7878          DCB      0x07,0x4f,0x78,0x78
0001cc  4f070000          DCB      0x4f,0x07,0x00,0x00
0001d0  47637159          DCB      0x47,0x63,0x71,0x59
0001d4  4d677300          DCB      0x4d,0x67,0x73,0x00
0001d8  00000000          DCB      0x00,0x00,0x00,0x00
0001dc  00000000          DCB      0x00,0x00,0x00,0x00
0001e0  00000000          DCB      0x00,0x00,0x00,0x00
0001e4  00000000          DCB      0x00,0x00,0x00,0x00
0001e8  00000000          DCB      0x00,0x00,0x00,0x00
0001ec  00000000          DCB      0x00,0x00,0x00,0x00
0001f0  00000000          DCB      0x00,0x00,0x00,0x00
0001f4  00000000          DCB      0x00,0x00,0x00,0x00
0001f8  00000000          DCB      0x00,0x00,0x00,0x00
0001fc  00000000          DCB      0x00,0x00,0x00,0x00
000200  00000000          DCB      0x00,0x00,0x00,0x00
000204  00000000          DCB      0x00,0x00,0x00,0x00
000208  20745454          DCB      0x20,0x74,0x54,0x54
00020c  3c784000          DCB      0x3c,0x78,0x40,0x00
000210  417f3f48          DCB      0x41,0x7f,0x3f,0x48
000214  48783000          DCB      0x48,0x78,0x30,0x00
000218  387c4444          DCB      0x38,0x7c,0x44,0x44
00021c  6c280000          DCB      0x6c,0x28,0x00,0x00
000220  30784849          DCB      0x30,0x78,0x48,0x49
000224  3f7f4000          DCB      0x3f,0x7f,0x40,0x00
000228  387c5454          DCB      0x38,0x7c,0x54,0x54
00022c  5c180000          DCB      0x5c,0x18,0x00,0x00
000230  487e7f49          DCB      0x48,0x7e,0x7f,0x49
000234  03020000          DCB      0x03,0x02,0x00,0x00
000238  4c5e5252          DCB      0x4c,0x5e,0x52,0x52
00023c  7c3e0200          DCB      0x7c,0x3e,0x02,0x00
000240  417f7f08          DCB      0x41,0x7f,0x7f,0x08
000244  047c7800          DCB      0x04,0x7c,0x78,0x00
000248  00447d7d          DCB      0x00,0x44,0x7d,0x7d
00024c  40000000          DCB      0x40,0x00,0x00,0x00
000250  30704040          DCB      0x30,0x70,0x40,0x40
000254  7d3d0000          DCB      0x7d,0x3d,0x00,0x00
000258  417f7f10          DCB      0x41,0x7f,0x7f,0x10
00025c  386c4400          DCB      0x38,0x6c,0x44,0x00
000260  00417f7f          DCB      0x00,0x41,0x7f,0x7f
000264  40000000          DCB      0x40,0x00,0x00,0x00
000268  7c7c1838          DCB      0x7c,0x7c,0x18,0x38
00026c  1c7c7800          DCB      0x1c,0x7c,0x78,0x00
000270  7c7c0404          DCB      0x7c,0x7c,0x04,0x04
000274  7c780000          DCB      0x7c,0x78,0x00,0x00
000278  387c4444          DCB      0x38,0x7c,0x44,0x44
00027c  7c380000          DCB      0x7c,0x38,0x00,0x00
000280  44787c54          DCB      0x44,0x78,0x7c,0x54
000284  141c0800          DCB      0x14,0x1c,0x08,0x00
000288  081c1454          DCB      0x08,0x1c,0x14,0x54
00028c  787c4000          DCB      0x78,0x7c,0x40,0x00
000290  447c784c          DCB      0x44,0x7c,0x78,0x4c
000294  041c1800          DCB      0x04,0x1c,0x18,0x00
000298  485c5454          DCB      0x48,0x5c,0x54,0x54
00029c  74240000          DCB      0x74,0x24,0x00,0x00
0002a0  00043e7f          DCB      0x00,0x04,0x3e,0x7f
0002a4  44240000          DCB      0x44,0x24,0x00,0x00
0002a8  3c7c4040          DCB      0x3c,0x7c,0x40,0x40
0002ac  3c7c4000          DCB      0x3c,0x7c,0x40,0x00
0002b0  1c3c6060          DCB      0x1c,0x3c,0x60,0x60
0002b4  3c1c0000          DCB      0x3c,0x1c,0x00,0x00
0002b8  3c7c7038          DCB      0x3c,0x7c,0x70,0x38
0002bc  707c3c00          DCB      0x70,0x7c,0x3c,0x00
0002c0  446c3810          DCB      0x44,0x6c,0x38,0x10
0002c4  386c4400          DCB      0x38,0x6c,0x44,0x00
0002c8  4c5c5050          DCB      0x4c,0x5c,0x50,0x50
0002cc  7c3c0000          DCB      0x7c,0x3c,0x00,0x00
0002d0  4c64745c          DCB      0x4c,0x64,0x74,0x5c
0002d4  4c640000          DCB      0x4c,0x64,0x00,0x00
0002d8  00000000          DCB      0x00,0x00,0x00,0x00
0002dc  00000000          DCB      0x00,0x00,0x00,0x00
0002e0  00000000          DCB      0x00,0x00,0x00,0x00
0002e4  00000000          DCB      0x00,0x00,0x00,0x00
0002e8  00000000          DCB      0x00,0x00,0x00,0x00
0002ec  00000000          DCB      0x00,0x00,0x00,0x00
0002f0  00000000          DCB      0x00,0x00,0x00,0x00
0002f4  00000000          DCB      0x00,0x00,0x00,0x00
0002f8  00000000          DCB      0x00,0x00,0x00,0x00
0002fc  00000000          DCB      0x00,0x00,0x00,0x00
000300  00000000          DCB      0x00,0x00,0x00,0x00
000304  00000000          DCB      0x00,0x00,0x00,0x00
000308  00000000          DCB      0x00,0x00,0x00,0x00
00030c  00000000          DCB      0x00,0x00,0x00,0x00
000310  00000000          DCB      0x00,0x00,0x00,0x00
000314  00000000          DCB      0x00,0x00,0x00,0x00
000318  00000000          DCB      0x00,0x00,0x00,0x00
00031c  00000000          DCB      0x00,0x00,0x00,0x00
000320  00000000          DCB      0x00,0x00,0x00,0x00
000324  00000000          DCB      0x00,0x00,0x00,0x00
000328  00000000          DCB      0x00,0x00,0x00,0x00
00032c  00000000          DCB      0x00,0x00,0x00,0x00
000330  00000000          DCB      0x00,0x00,0x00,0x00
000334  00000000          DCB      0x00,0x00,0x00,0x00
000338  00000000          DCB      0x00,0x00,0x00,0x00
00033c  00000000          DCB      0x00,0x00,0x00,0x00
000340  00000000          DCB      0x00,0x00,0x00,0x00
000344  00000000          DCB      0x00,0x00,0x00,0x00
000348  00000000          DCB      0x00,0x00,0x00,0x00
00034c  00000000          DCB      0x00,0x00,0x00,0x00
000350  00000000          DCB      0x00,0x00,0x00,0x00
000354  00000000          DCB      0x00,0x00,0x00,0x00
000358  00000000          DCB      0x00,0x00,0x00,0x00
00035c  00000000          DCB      0x00,0x00,0x00,0x00
000360  00000000          DCB      0x00,0x00,0x00,0x00
000364  00000000          DCB      0x00,0x00,0x00,0x00
000368  00000000          DCB      0x00,0x00,0x00,0x00
00036c  00000000          DCB      0x00,0x00,0x00,0x00
000370  00000000          DCB      0x00,0x00,0x00,0x00
000374  00000000          DCB      0x00,0x00,0x00,0x00
000378  00000000          DCB      0x00,0x00,0x00,0x00
00037c  00000000          DCB      0x00,0x00,0x00,0x00
000380  00000000          DCB      0x00,0x00,0x00,0x00
000384  00000000          DCB      0x00,0x00,0x00,0x00
000388  00000000          DCB      0x00,0x00,0x00,0x00
00038c  00000000          DCB      0x00,0x00,0x00,0x00
000390  00000000          DCB      0x00,0x00,0x00,0x00
000394  00000000          DCB      0x00,0x00,0x00,0x00
000398  00000000          DCB      0x00,0x00,0x00,0x00
00039c  00000000          DCB      0x00,0x00,0x00,0x00
0003a0  00000000          DCB      0x00,0x00,0x00,0x00
0003a4  00000000          DCB      0x00,0x00,0x00,0x00
0003a8  00000000          DCB      0x00,0x00,0x00,0x00
0003ac  00000000          DCB      0x00,0x00,0x00,0x00
0003b0  00000000          DCB      0x00,0x00,0x00,0x00
0003b4  00000000          DCB      0x00,0x00,0x00,0x00
0003b8  00000000          DCB      0x00,0x00,0x00,0x00
0003bc  00000000          DCB      0x00,0x00,0x00,0x00
0003c0  00000000          DCB      0x00,0x00,0x00,0x00
0003c4  00000000          DCB      0x00,0x00,0x00,0x00
0003c8  00000000          DCB      0x00,0x00,0x00,0x00
0003cc  00000000          DCB      0x00,0x00,0x00,0x00
0003d0  00000000          DCB      0x00,0x00,0x00,0x00
0003d4  00000000          DCB      0x00,0x00,0x00,0x00
0003d8  00000000          DCB      0x00,0x00,0x00,0x00
0003dc  00000000          DCB      0x00,0x00,0x00,0x00
0003e0  00000000          DCB      0x00,0x00,0x00,0x00
0003e4  00000000          DCB      0x00,0x00,0x00,0x00
0003e8  00000000          DCB      0x00,0x00,0x00,0x00
0003ec  00000000          DCB      0x00,0x00,0x00,0x00
0003f0  00000000          DCB      0x00,0x00,0x00,0x00
0003f4  00000000          DCB      0x00,0x00,0x00,0x00
0003f8  00000000          DCB      0x00,0x00,0x00,0x00
0003fc  00000000          DCB      0x00,0x00,0x00,0x00
000400  00000000          DCB      0x00,0x00,0x00,0x00
000404  00000000          DCB      0x00,0x00,0x00,0x00
000408  00000000          DCB      0x00,0x00,0x00,0x00
00040c  00000000          DCB      0x00,0x00,0x00,0x00
000410  00000000          DCB      0x00,0x00,0x00,0x00
000414  00000000          DCB      0x00,0x00,0x00,0x00
000418  00000000          DCB      0x00,0x00,0x00,0x00
00041c  00000000          DCB      0x00,0x00,0x00,0x00
000420  00000000          DCB      0x00,0x00,0x00,0x00
000424  00000000          DCB      0x00,0x00,0x00,0x00
000428  00000000          DCB      0x00,0x00,0x00,0x00
00042c  00000000          DCB      0x00,0x00,0x00,0x00
000430  00000000          DCB      0x00,0x00,0x00,0x00
000434  00000000          DCB      0x00,0x00,0x00,0x00
000438  00000000          DCB      0x00,0x00,0x00,0x00
00043c  00000000          DCB      0x00,0x00,0x00,0x00
000440  00000000          DCB      0x00,0x00,0x00,0x00
000444  00000000          DCB      0x00,0x00,0x00,0x00
000448  00000000          DCB      0x00,0x00,0x00,0x00
00044c  00000000          DCB      0x00,0x00,0x00,0x00
000450  00000000          DCB      0x00,0x00,0x00,0x00
000454  00000000          DCB      0x00,0x00,0x00,0x00
000458  00000000          DCB      0x00,0x00,0x00,0x00
00045c  00000000          DCB      0x00,0x00,0x00,0x00
000460  00000000          DCB      0x00,0x00,0x00,0x00
000464  00000000          DCB      0x00,0x00,0x00,0x00
000468  00000000          DCB      0x00,0x00,0x00,0x00
00046c  00000000          DCB      0x00,0x00,0x00,0x00
000470  00000000          DCB      0x00,0x00,0x00,0x00
000474  00000000          DCB      0x00,0x00,0x00,0x00
000478  00000000          DCB      0x00,0x00,0x00,0x00
00047c  00000000          DCB      0x00,0x00,0x00,0x00
000480  00000609          DCB      0x00,0x00,0x06,0x09
000484  09060000          DCB      0x09,0x06,0x00,0x00
000488  00000000          DCB      0x00,0x00,0x00,0x00
00048c  00000000          DCB      0x00,0x00,0x00,0x00
000490  00000000          DCB      0x00,0x00,0x00,0x00
000494  00000000          DCB      0x00,0x00,0x00,0x00
000498  00000000          DCB      0x00,0x00,0x00,0x00
00049c  00000000          DCB      0x00,0x00,0x00,0x00
0004a0  00000000          DCB      0x00,0x00,0x00,0x00
0004a4  00000000          DCB      0x00,0x00,0x00,0x00
0004a8  00000000          DCB      0x00,0x00,0x00,0x00
0004ac  00000000          DCB      0x00,0x00,0x00,0x00
0004b0  00000000          DCB      0x00,0x00,0x00,0x00
0004b4  00000000          DCB      0x00,0x00,0x00,0x00
0004b8  00000000          DCB      0x00,0x00,0x00,0x00
0004bc  00000000          DCB      0x00,0x00,0x00,0x00
0004c0  00000000          DCB      0x00,0x00,0x00,0x00
0004c4  00000000          DCB      0x00,0x00,0x00,0x00
0004c8  00000000          DCB      0x00,0x00,0x00,0x00
0004cc  00000000          DCB      0x00,0x00,0x00,0x00
0004d0  00000000          DCB      0x00,0x00,0x00,0x00
0004d4  00000000          DCB      0x00,0x00,0x00,0x00
0004d8  00000000          DCB      0x00,0x00,0x00,0x00
0004dc  00000000          DCB      0x00,0x00,0x00,0x00
0004e0  00000000          DCB      0x00,0x00,0x00,0x00
0004e4  00000000          DCB      0x00,0x00,0x00,0x00
0004e8  00000000          DCB      0x00,0x00,0x00,0x00
0004ec  00000000          DCB      0x00,0x00,0x00,0x00
0004f0  00000000          DCB      0x00,0x00,0x00,0x00
0004f4  00000000          DCB      0x00,0x00,0x00,0x00
0004f8  00000000          DCB      0x00,0x00,0x00,0x00
0004fc  00000000          DCB      0x00,0x00,0x00,0x00
000500  7c7e1313          DCB      0x7c,0x7e,0x13,0x13
000504  7e7c0000          DCB      0x7e,0x7c,0x00,0x00
000508  417f7f49          DCB      0x41,0x7f,0x7f,0x49
00050c  49793300          DCB      0x49,0x79,0x33,0x00
000510  417f7f49          DCB      0x41,0x7f,0x7f,0x49
000514  497f3600          DCB      0x49,0x7f,0x36,0x00
000518  417f7f41          DCB      0x41,0x7f,0x7f,0x41
00051c  01030300          DCB      0x01,0x03,0x03,0x00
000520  787e3733          DCB      0x78,0x7e,0x37,0x33
000524  377e7800          DCB      0x37,0x7e,0x78,0x00
000528  417f7f49          DCB      0x41,0x7f,0x7f,0x49
00052c  5d416300          DCB      0x5d,0x41,0x63,0x00
000530  63147f7f          DCB      0x63,0x14,0x7f,0x7f
000534  14630000          DCB      0x14,0x63,0x00,0x00
000538  63634949          DCB      0x63,0x63,0x49,0x49
00053c  6b7f3600          DCB      0x6b,0x7f,0x36,0x00
000540  7f7f3018          DCB      0x7f,0x7f,0x30,0x18
000544  0c7f7f00          DCB      0x0c,0x7f,0x7f,0x00
000548  7f7f301b          DCB      0x7f,0x7f,0x30,0x1b
00054c  0c7f7f00          DCB      0x0c,0x7f,0x7f,0x00
000550  417f7f08          DCB      0x41,0x7f,0x7f,0x08
000554  1c776300          DCB      0x1c,0x77,0x63,0x00
000558  607f1f03          DCB      0x60,0x7f,0x1f,0x03
00055c  7f7f4100          DCB      0x7f,0x7f,0x41,0x00
000560  7f7f0e1c          DCB      0x7f,0x7f,0x0e,0x1c
000564  0e7f7f00          DCB      0x0e,0x7f,0x7f,0x00
000568  7f7f0808          DCB      0x7f,0x7f,0x08,0x08
00056c  7f7f0000          DCB      0x7f,0x7f,0x00,0x00
000570  1c3e6341          DCB      0x1c,0x3e,0x63,0x41
000574  633e1c00          DCB      0x63,0x3e,0x1c,0x00
000578  7f7f0303          DCB      0x7f,0x7f,0x03,0x03
00057c  7f7f0000          DCB      0x7f,0x7f,0x00,0x00
000580  417f7f49          DCB      0x41,0x7f,0x7f,0x49
000584  090f0600          DCB      0x09,0x0f,0x06,0x00
000588  1c3e6341          DCB      0x1c,0x3e,0x63,0x41
00058c  41632200          DCB      0x41,0x63,0x22,0x00
000590  03417f7f          DCB      0x03,0x41,0x7f,0x7f
000594  41030000          DCB      0x41,0x03,0x00,0x00
000598  63673c18          DCB      0x63,0x67,0x3c,0x18
00059c  0c070300          DCB      0x0c,0x07,0x03,0x00
0005a0  1e527f7f          DCB      0x1e,0x52,0x7f,0x7f
0005a4  521e0000          DCB      0x52,0x1e,0x00,0x00
0005a8  63673c18          DCB      0x63,0x67,0x3c,0x18
0005ac  3c676300          DCB      0x3c,0x67,0x63,0x00
0005b0  3f3f2020          DCB      0x3f,0x3f,0x20,0x20
0005b4  3f3f6000          DCB      0x3f,0x3f,0x60,0x00
0005b8  0f1f1858          DCB      0x0f,0x1f,0x18,0x58
0005bc  7f7f4000          DCB      0x7f,0x7f,0x40,0x00
0005c0  7f7f607f          DCB      0x7f,0x7f,0x60,0x7f
0005c4  607f7f00          DCB      0x60,0x7f,0x7f,0x00
0005c8  3f203f3f          DCB      0x3f,0x20,0x3f,0x3f
0005cc  203f6000          DCB      0x20,0x3f,0x60,0x00
0005d0  017f7f48          DCB      0x01,0x7f,0x7f,0x48
0005d4  48783000          DCB      0x48,0x78,0x30,0x00
0005d8  7f7f4848          DCB      0x7f,0x7f,0x48,0x48
0005dc  78007f00          DCB      0x78,0x00,0x7f,0x00
0005e0  7f7f4848          DCB      0x7f,0x7f,0x48,0x48
0005e4  78300000          DCB      0x78,0x30,0x00,0x00
0005e8  36634949          DCB      0x36,0x63,0x49,0x49
0005ec  6b7f3e00          DCB      0x6b,0x7f,0x3e,0x00
0005f0  7f083e63          DCB      0x7f,0x08,0x3e,0x63
0005f4  41633e00          DCB      0x41,0x63,0x3e,0x00
0005f8  667f1909          DCB      0x66,0x7f,0x19,0x09
0005fc  7f7f4100          DCB      0x7f,0x7f,0x41,0x00
000600  20745454          DCB      0x20,0x74,0x54,0x54
000604  3c784000          DCB      0x3c,0x78,0x40,0x00
000608  307c4a4a          DCB      0x30,0x7c,0x4a,0x4a
00060c  7a310000          DCB      0x7a,0x31,0x00,0x00
000610  447c7c54          DCB      0x44,0x7c,0x7c,0x54
000614  54280000          DCB      0x54,0x28,0x00,0x00
000618  447c7c44          DCB      0x44,0x7c,0x7c,0x44
00061c  0c080000          DCB      0x0c,0x08,0x00,0x00
000620  60383434          DCB      0x60,0x38,0x34,0x34
000624  38600000          DCB      0x38,0x60,0x00,0x00
000628  387c5454          DCB      0x38,0x7c,0x54,0x54
00062c  5c180000          DCB      0x5c,0x18,0x00,0x00
000630  44287c7c          DCB      0x44,0x28,0x7c,0x7c
000634  28440000          DCB      0x28,0x44,0x00,0x00
000638  2e445454          DCB      0x2e,0x44,0x54,0x54
00063c  7c280000          DCB      0x7c,0x28,0x00,0x00
000640  7c7c2010          DCB      0x7c,0x7c,0x20,0x10
000644  7c7c0000          DCB      0x7c,0x7c,0x00,0x00
000648  7c7c2111          DCB      0x7c,0x7c,0x21,0x11
00064c  7c7c0000          DCB      0x7c,0x7c,0x00,0x00
000650  447c7c10          DCB      0x44,0x7c,0x7c,0x10
000654  386c4400          DCB      0x38,0x6c,0x44,0x00
000658  40780c04          DCB      0x40,0x78,0x0c,0x04
00065c  7c7c4000          DCB      0x7c,0x7c,0x40,0x00
000660  787c0810          DCB      0x78,0x7c,0x08,0x10
000664  087c7800          DCB      0x08,0x7c,0x78,0x00
000668  7c7c1010          DCB      0x7c,0x7c,0x10,0x10
00066c  7c7c0000          DCB      0x7c,0x7c,0x00,0x00
000670  387c4444          DCB      0x38,0x7c,0x44,0x44
000674  7c380000          DCB      0x7c,0x38,0x00,0x00
000678  7c7c0404          DCB      0x7c,0x7c,0x04,0x04
00067c  7c7c0000          DCB      0x7c,0x7c,0x00,0x00
000680  44787c54          DCB      0x44,0x78,0x7c,0x54
000684  141c0800          DCB      0x14,0x1c,0x08,0x00
000688  387c4444          DCB      0x38,0x7c,0x44,0x44
00068c  6c280000          DCB      0x6c,0x28,0x00,0x00
000690  08447c7c          DCB      0x08,0x44,0x7c,0x7c
000694  44080000          DCB      0x44,0x08,0x00,0x00
000698  4c5c5050          DCB      0x4c,0x5c,0x50,0x50
00069c  7c3c0000          DCB      0x7c,0x3c,0x00,0x00
0006a0  08547c7c          DCB      0x08,0x54,0x7c,0x7c
0006a4  54080000          DCB      0x54,0x08,0x00,0x00
0006a8  446c3810          DCB      0x44,0x6c,0x38,0x10
0006ac  386c4400          DCB      0x38,0x6c,0x44,0x00
0006b0  3c3c203c          DCB      0x3c,0x3c,0x20,0x3c
0006b4  3c600000          DCB      0x3c,0x60,0x00,0x00
0006b8  1c10507c          DCB      0x1c,0x10,0x50,0x7c
0006bc  7c400000          DCB      0x7c,0x40,0x00,0x00
0006c0  7c407c40          DCB      0x7c,0x40,0x7c,0x40
0006c4  7c000000          DCB      0x7c,0x00,0x00,0x00
0006c8  3c203c20          DCB      0x3c,0x20,0x3c,0x20
0006cc  3c600000          DCB      0x3c,0x60,0x00,0x00
0006d0  443c5050          DCB      0x44,0x3c,0x50,0x50
0006d4  70200000          DCB      0x70,0x20,0x00,0x00
0006d8  403c5050          DCB      0x40,0x3c,0x50,0x50
0006dc  20007c00          DCB      0x20,0x00,0x7c,0x00
0006e0  403c5050          DCB      0x40,0x3c,0x50,0x50
0006e4  50200000          DCB      0x50,0x20,0x00,0x00
0006e8  28445454          DCB      0x28,0x44,0x54,0x54
0006ec  38000000          DCB      0x38,0x00,0x00,0x00
0006f0  7c103844          DCB      0x7c,0x10,0x38,0x44
0006f4  44380000          DCB      0x44,0x38,0x00,0x00
0006f8  40281414          DCB      0x40,0x28,0x14,0x14
0006fc  7c7c0000          DCB      0x7c,0x7c,0x00,0x00

                          AREA ||.data||, DATA, ALIGN=2

                  U_MENU_Item
000000  00000000          DCB      0x00,0x00,0x00,0x00
                  U_MENU_Message
                          DCD      0x00000000
                  period_global
000008  0000              DCB      0x00,0x00
                  buffer
00000a  00                DCB      0x00

;*** Start embedded assembler ***

#line 1 "menu.c"
	AREA ||.rev16_text||, CODE
	THUMB
	EXPORT |__asm___6_menu_c_d1e76eba____REV16|
#line 447 "C:\\Keil_v5\\ARM\\PACK\\ARM\\CMSIS\\5.0.1\\CMSIS\\Include\\cmsis_armcc.h"
|__asm___6_menu_c_d1e76eba____REV16| PROC
#line 448

 rev16 r0, r0
 bx lr
	ENDP
	AREA ||.revsh_text||, CODE
	THUMB
	EXPORT |__asm___6_menu_c_d1e76eba____REVSH|
#line 462
|__asm___6_menu_c_d1e76eba____REVSH| PROC
#line 463

 revsh r0, r0
 bx lr
	ENDP
	AREA ||.rrx_text||, CODE
	THUMB
	EXPORT |__asm___6_menu_c_d1e76eba____RRX|
#line 649
|__asm___6_menu_c_d1e76eba____RRX| PROC
#line 650

 rrx r0, r0
 bx lr
	ENDP

;*** End   embedded assembler ***
