; generated by Component: ARM Compiler 5.06 update 6 (build 750) Tool: ArmCC [4d3637]
; commandline ArmCC [--list --split_sections --debug -c --asm --interleave -o.\obj\mdr32f9qx_comp.o --asm_dir=.\obj\ --list_dir=.\obj\ --depend=.\obj\mdr32f9qx_comp.d --cpu=Cortex-M3 --apcs=interwork -O0 --diag_suppress=9931 -I"..\CAN TEST" -I.\RTE -I.\RTE\Device -I.\RTE\Device\MDR1986BE92 -I.\rtos -I.\rtos\include -I.\RTE\Device\MDR1986BE92 -I.\RTE\_Target_1 -IC:\Users\AN-Mi\AppData\Local\Arm\Packs\ARM\CMSIS\5.5.1\CMSIS\Core\Include -IC:\Users\AN-Mi\AppData\Local\Arm\Packs\ARM\CMSIS\5.5.1\CMSIS\DSP\Include -IC:\Users\AN-Mi\AppData\Local\Arm\Packs\Keil\MDR1986BExx\1.51\Config -IC:\Users\AN-Mi\AppData\Local\Arm\Packs\Keil\MDR1986BExx\1.51\Libraries\CMSIS\CM3\CoreSupport -IC:\Users\AN-Mi\AppData\Local\Arm\Packs\Keil\MDR1986BExx\1.51\Libraries\CMSIS\CM3\DeviceSupport\MDR32F9Qx\inc -IC:\Users\AN-Mi\AppData\Local\Arm\Packs\Keil\MDR1986BExx\1.51\Libraries\MDR32F9Qx_StdPeriph_Driver\inc -D__MICROLIB -D__UVISION_VERSION=527 -D_RTE_ -DUSE_MDR32F9Q2_Rev1 --omf_browse=.\obj\mdr32f9qx_comp.crf C:\Users\AN-Mi\AppData\Local\Arm\Packs\Keil\MDR1986BExx\1.51\Libraries\MDR32F9Qx_StdPeriph_Driver\src\MDR32F9Qx_comp.c]
                          THUMB

                          AREA ||i.COMP_CVRefCmd||, CODE, READONLY, ALIGN=2

                  COMP_CVRefCmd PROC
;;;240      */
;;;241    void COMP_CVRefCmd(FunctionalState NewState)
000000  4601              MOV      r1,r0
;;;242    {
;;;243      uint32_t tmpreg_CFG;
;;;244    
;;;245      /* Check the parameters */
;;;246      assert_param(IS_FUNCTIONAL_STATE(NewState));
;;;247    
;;;248      tmpreg_CFG = MDR_COMP->CFG;
000002  4a05              LDR      r2,|L1.24|
000004  6810              LDR      r0,[r2,#0]
;;;249    
;;;250      /* Form new value */
;;;251      if (NewState != DISABLE)
000006  b111              CBZ      r1,|L1.14|
;;;252      {
;;;253        /* Enable COMP reference by setting the COMP_CFG_CVREN bit in the COMP_CFG register */
;;;254        tmpreg_CFG |= COMP_CFG_CVREN;
000008  f0400008          ORR      r0,r0,#8
00000c  e001              B        |L1.18|
                  |L1.14|
;;;255      }
;;;256      else
;;;257      {
;;;258        /* Disable COMP reference by resetting the COMP_CFG_CVREN bit in the COMP_CFG register */
;;;259        tmpreg_CFG &= ~COMP_CFG_CVREN;
00000e  f0200008          BIC      r0,r0,#8
                  |L1.18|
;;;260      }
;;;261    
;;;262      /* Configure COMP_CFG register with new value */
;;;263      MDR_COMP->CFG = tmpreg_CFG;
000012  4a01              LDR      r2,|L1.24|
000014  6010              STR      r0,[r2,#0]
;;;264    }
000016  4770              BX       lr
;;;265    
                          ENDP

                  |L1.24|
                          DCD      0x40098000

                          AREA ||i.COMP_CVRefInit||, CODE, READONLY, ALIGN=2

                  COMP_CVRefInit PROC
;;;204      */
;;;205    void COMP_CVRefInit(const COMP_CVRefInitTypeDef* COMP_CVRefInitStruct)
000000  4a06              LDR      r2,|L2.28|
;;;206    {
;;;207      uint32_t tmpreg_CFG;
;;;208    
;;;209      /* Check the parameters */
;;;210      assert_param(IS_COMP_CVREF_SOURCE_CONFIG(COMP_CVRefInitStruct->COMP_CVRefSource));
;;;211      assert_param(IS_COMP_CVREF_RANGE_CONFIG(COMP_CVRefInitStruct->COMP_CVRefRange));
;;;212      assert_param(IS_COMP_CVREF_SCALE_CONFIG(COMP_CVRefInitStruct->COMP_CVRefScale));
;;;213    
;;;214      tmpreg_CFG = MDR_COMP->CFG;
000002  6811              LDR      r1,[r2,#0]
;;;215      tmpreg_CFG &= ~(COMP_CFG_CVRSS | COMP_CFG_CVRR | COMP_CFG_CVR_Msk);
000004  f02101f6          BIC      r1,r1,#0xf6
;;;216      tmpreg_CFG += COMP_CVRefInitStruct->COMP_CVRefSource
000008  e9d02300          LDRD     r2,r3,[r0,#0]
00000c  441a              ADD      r2,r2,r3
00000e  6883              LDR      r3,[r0,#8]
000010  441a              ADD      r2,r2,r3
000012  4411              ADD      r1,r1,r2
;;;217                  + COMP_CVRefInitStruct->COMP_CVRefRange
;;;218                  + COMP_CVRefInitStruct->COMP_CVRefScale;
;;;219      MDR_COMP->CFG = tmpreg_CFG;
000014  4a01              LDR      r2,|L2.28|
000016  6011              STR      r1,[r2,#0]
;;;220    }
000018  4770              BX       lr
;;;221    
                          ENDP

00001a  0000              DCW      0x0000
                  |L2.28|
                          DCD      0x40098000

                          AREA ||i.COMP_CVRefRangeConfig||, CODE, READONLY, ALIGN=2

                  COMP_CVRefRangeConfig PROC
;;;294      */
;;;295    void COMP_CVRefRangeConfig(uint32_t Range)
000000  4601              MOV      r1,r0
;;;296    {
;;;297      uint32_t tmpreg_CFG;
;;;298    
;;;299      /* Check the parameters */
;;;300      assert_param(IS_COMP_CVREF_RANGE_CONFIG(Range));
;;;301    
;;;302      tmpreg_CFG = MDR_COMP->CFG;
000002  4a03              LDR      r2,|L3.16|
000004  6810              LDR      r0,[r2,#0]
;;;303      tmpreg_CFG &= ~COMP_CFG_CVRR;
000006  f0200002          BIC      r0,r0,#2
;;;304      tmpreg_CFG += Range;
00000a  4408              ADD      r0,r0,r1
;;;305      MDR_COMP->CFG = tmpreg_CFG;
00000c  6010              STR      r0,[r2,#0]
;;;306    }
00000e  4770              BX       lr
;;;307    
                          ENDP

                  |L3.16|
                          DCD      0x40098000

                          AREA ||i.COMP_CVRefScaleConfig||, CODE, READONLY, ALIGN=2

                  COMP_CVRefScaleConfig PROC
;;;346      */
;;;347    void COMP_CVRefScaleConfig(uint32_t Scale)
000000  4601              MOV      r1,r0
;;;348    {
;;;349      uint32_t tmpreg_CFG;
;;;350    
;;;351      /* Check the parameters */
;;;352      assert_param(IS_COMP_CVREF_SCALE_CONFIG(Scale));
;;;353    
;;;354      tmpreg_CFG = MDR_COMP->CFG;
000002  4a03              LDR      r2,|L4.16|
000004  6810              LDR      r0,[r2,#0]
;;;355      tmpreg_CFG &= ~COMP_CFG_CVR_Msk;
000006  f02000f0          BIC      r0,r0,#0xf0
;;;356      tmpreg_CFG += Scale;
00000a  4408              ADD      r0,r0,r1
;;;357      MDR_COMP->CFG = tmpreg_CFG;
00000c  6010              STR      r0,[r2,#0]
;;;358    }
00000e  4770              BX       lr
;;;359    
                          ENDP

                  |L4.16|
                          DCD      0x40098000

                          AREA ||i.COMP_CVRefSourceConfig||, CODE, READONLY, ALIGN=2

                  COMP_CVRefSourceConfig PROC
;;;273      */
;;;274    void COMP_CVRefSourceConfig(uint32_t Source)
000000  4601              MOV      r1,r0
;;;275    {
;;;276      uint32_t tmpreg_CFG;
;;;277    
;;;278      /* Check the parameters */
;;;279      assert_param(IS_COMP_CVREF_SOURCE_CONFIG(Source));
;;;280    
;;;281      tmpreg_CFG = MDR_COMP->CFG;
000002  4a03              LDR      r2,|L5.16|
000004  6810              LDR      r0,[r2,#0]
;;;282      tmpreg_CFG &= ~COMP_CFG_CVRSS;
000006  f0200004          BIC      r0,r0,#4
;;;283      tmpreg_CFG += Source;
00000a  4408              ADD      r0,r0,r1
;;;284      MDR_COMP->CFG = tmpreg_CFG;
00000c  6010              STR      r0,[r2,#0]
;;;285    }
00000e  4770              BX       lr
;;;286    
                          ENDP

                  |L5.16|
                          DCD      0x40098000

                          AREA ||i.COMP_CVRefStructInit||, CODE, READONLY, ALIGN=1

                  COMP_CVRefStructInit PROC
;;;227      */
;;;228    void COMP_CVRefStructInit(COMP_CVRefInitTypeDef* COMP_CVRefInitStruct)
000000  2100              MOVS     r1,#0
;;;229    {
;;;230      COMP_CVRefInitStruct->COMP_CVRefSource = COMP_CVREF_SOURCE_AVdd;
000002  6001              STR      r1,[r0,#0]
;;;231      COMP_CVRefInitStruct->COMP_CVRefRange  = COMP_CVREF_RANGE_Up;
000004  6041              STR      r1,[r0,#4]
;;;232      COMP_CVRefInitStruct->COMP_CVRefScale  = COMP_CVREF_SCALE_0_div_24;
000006  6081              STR      r1,[r0,#8]
;;;233    }
000008  4770              BX       lr
;;;234    
                          ENDP


                          AREA ||i.COMP_Cmd||, CODE, READONLY, ALIGN=2

                  COMP_Cmd PROC
;;;79       */
;;;80     void COMP_Cmd(FunctionalState NewState)
000000  4601              MOV      r1,r0
;;;81     {
;;;82       uint32_t tmpreg_CFG;
;;;83     
;;;84       /* Check the parameters */
;;;85       assert_param(IS_FUNCTIONAL_STATE(NewState));
;;;86     
;;;87       tmpreg_CFG = MDR_COMP->CFG;
000002  4a05              LDR      r2,|L7.24|
000004  6810              LDR      r0,[r2,#0]
;;;88     
;;;89       /* Form new value */
;;;90       if (NewState != DISABLE)
000006  b111              CBZ      r1,|L7.14|
;;;91       {
;;;92         /* Enable COMP by setting the COMP_CFG_ON bit in the COMP_CFG register */
;;;93         tmpreg_CFG |= COMP_CFG_ON;
000008  f0400001          ORR      r0,r0,#1
00000c  e001              B        |L7.18|
                  |L7.14|
;;;94       }
;;;95       else
;;;96       {
;;;97         /* Disable COMP by resetting the COMP_CFG_ON bit in the COMP_CFG register */
;;;98         tmpreg_CFG &= ~COMP_CFG_ON;
00000e  f0200001          BIC      r0,r0,#1
                  |L7.18|
;;;99       }
;;;100    
;;;101      /* Configure COMP_CFG register with new value */
;;;102      MDR_COMP->CFG = tmpreg_CFG;
000012  4a01              LDR      r2,|L7.24|
000014  6010              STR      r0,[r2,#0]
;;;103    }
000016  4770              BX       lr
;;;104    
                          ENDP

                  |L7.24|
                          DCD      0x40098000

                          AREA ||i.COMP_DeInit||, CODE, READONLY, ALIGN=2

                  COMP_DeInit PROC
;;;29       */
;;;30     void COMP_DeInit(void)
000000  2000              MOVS     r0,#0
;;;31     {
;;;32       MDR_COMP->CFG = 0;
000002  4902              LDR      r1,|L8.12|
000004  6008              STR      r0,[r1,#0]
;;;33       MDR_COMP->RESULT_LATCH;
000006  4608              MOV      r0,r1
000008  6880              LDR      r0,[r0,#8]
;;;34     }
00000a  4770              BX       lr
;;;35     
                          ENDP

                  |L8.12|
                          DCD      0x40098000

                          AREA ||i.COMP_GetCfgFlagStatus||, CODE, READONLY, ALIGN=2

                  COMP_GetCfgFlagStatus PROC
;;;112      */
;;;113    FlagStatus COMP_GetCfgFlagStatus(uint32_t Flag)
000000  4601              MOV      r1,r0
;;;114    {
;;;115      FlagStatus bitstatus;
;;;116    
;;;117      /* Check the parameters */
;;;118      assert_param(IS_COMP_CFG_FLAG(Flag));
;;;119    
;;;120      if ((MDR_COMP->CFG & Flag) == 0)
000002  4a04              LDR      r2,|L9.20|
000004  6812              LDR      r2,[r2,#0]
000006  400a              ANDS     r2,r2,r1
000008  b90a              CBNZ     r2,|L9.14|
;;;121      {
;;;122        bitstatus = RESET;
00000a  2000              MOVS     r0,#0
00000c  e000              B        |L9.16|
                  |L9.14|
;;;123      }
;;;124      else
;;;125      {
;;;126        bitstatus = SET;
00000e  2001              MOVS     r0,#1
                  |L9.16|
;;;127      }
;;;128    
;;;129      return bitstatus;
;;;130    }
000010  4770              BX       lr
;;;131    
                          ENDP

000012  0000              DCW      0x0000
                  |L9.20|
                          DCD      0x40098000

                          AREA ||i.COMP_GetFlagStatus||, CODE, READONLY, ALIGN=1

                  COMP_GetFlagStatus PROC
;;;388      */
;;;389    FlagStatus COMP_GetFlagStatus(uint32_t Flag)
000000  b500              PUSH     {lr}
;;;390    {
000002  4602              MOV      r2,r0
;;;391      FlagStatus bitstatus;
;;;392    
;;;393      /* Check the parameters */
;;;394      assert_param(IS_COMP_STATUS_FLAG(Flag));
;;;395    
;;;396      if ((COMP_GetStatus() & Flag) == 0)
000004  f7fffffe          BL       COMP_GetStatus
000008  4010              ANDS     r0,r0,r2
00000a  b908              CBNZ     r0,|L10.16|
;;;397      {
;;;398        bitstatus = RESET;
00000c  2100              MOVS     r1,#0
00000e  e000              B        |L10.18|
                  |L10.16|
;;;399      }
;;;400      else
;;;401      {
;;;402        bitstatus = SET;
000010  2101              MOVS     r1,#1
                  |L10.18|
;;;403      }
;;;404    
;;;405      return bitstatus;
000012  4608              MOV      r0,r1
;;;406    }
000014  bd00              POP      {pc}
;;;407    
                          ENDP


                          AREA ||i.COMP_GetResultLatch||, CODE, READONLY, ALIGN=2

                  COMP_GetResultLatch PROC
;;;364      */
;;;365    uint32_t COMP_GetResultLatch(void)
000000  4801              LDR      r0,|L11.8|
;;;366    {
;;;367      return MDR_COMP->RESULT_LATCH;
000002  6880              LDR      r0,[r0,#8]
;;;368    }
000004  4770              BX       lr
;;;369    
                          ENDP

000006  0000              DCW      0x0000
                  |L11.8|
                          DCD      0x40098000

                          AREA ||i.COMP_GetStatus||, CODE, READONLY, ALIGN=2

                  COMP_GetStatus PROC
;;;374      */
;;;375    uint32_t COMP_GetStatus(void)
000000  4801              LDR      r0,|L12.8|
;;;376    {
;;;377      return MDR_COMP->RESULT;
000002  6840              LDR      r0,[r0,#4]
;;;378    }
000004  4770              BX       lr
;;;379    
                          ENDP

000006  0000              DCW      0x0000
                  |L12.8|
                          DCD      0x40098000

                          AREA ||i.COMP_ITConfig||, CODE, READONLY, ALIGN=2

                  COMP_ITConfig PROC
;;;413      */
;;;414    void COMP_ITConfig(FunctionalState NewState)
000000  4601              MOV      r1,r0
;;;415    {
;;;416      uint32_t tmpreg_CFG;
;;;417    
;;;418      /* Check the parameters */
;;;419      assert_param(IS_FUNCTIONAL_STATE(NewState));
;;;420    
;;;421      tmpreg_CFG = MDR_COMP->CFG;
000002  4a05              LDR      r2,|L13.24|
000004  6810              LDR      r0,[r2,#0]
;;;422    
;;;423      /* Form new value */
;;;424      if (NewState != DISABLE)
000006  b111              CBZ      r1,|L13.14|
;;;425      {
;;;426        /* Enable the COMP Interrupt requests by setting bits in the CFG registers */
;;;427        tmpreg_CFG |= COMP_CFG_CMPIE;
000008  f4405000          ORR      r0,r0,#0x2000
00000c  e001              B        |L13.18|
                  |L13.14|
;;;428      }
;;;429      else
;;;430      {
;;;431        /* Disable the COMP Interrupt requests by clearing bits in the CFG registers */
;;;432        tmpreg_CFG &= ~COMP_CFG_CMPIE;
00000e  f4205000          BIC      r0,r0,#0x2000
                  |L13.18|
;;;433      }
;;;434    
;;;435      /* Configure CFG registers with new value */
;;;436      MDR_COMP->CFG = tmpreg_CFG;
000012  4a01              LDR      r2,|L13.24|
000014  6010              STR      r0,[r2,#0]
;;;437    }
000016  4770              BX       lr
;;;438    
                          ENDP

                  |L13.24|
                          DCD      0x40098000

                          AREA ||i.COMP_Init||, CODE, READONLY, ALIGN=2

                  COMP_Init PROC
;;;43       */
;;;44     void COMP_Init(const COMP_InitTypeDef* COMP_InitStruct)
000000  4a06              LDR      r2,|L14.28|
;;;45     {
;;;46       uint32_t tmpreg_CFG;
;;;47     
;;;48       /* Check the parameters */
;;;49       assert_param(IS_COMP_PLUS_INPUT_CONFIG(COMP_InitStruct->COMP_PlusInputSource));
;;;50       assert_param(IS_COMP_MINUS_INPUT_CONFIG(COMP_InitStruct->COMP_MinusInputSource));
;;;51       assert_param(IS_COMP_OUT_INV_CONFIG(COMP_InitStruct->COMP_OutInversion));
;;;52     
;;;53       tmpreg_CFG = MDR_COMP->CFG;
000002  6811              LDR      r1,[r2,#0]
;;;54       tmpreg_CFG &= ~(COMP_CFG_CREF | COMP_CFG_CCH_Msk | COMP_CFG_INV);
000004  f4216170          BIC      r1,r1,#0xf00
;;;55       tmpreg_CFG += COMP_InitStruct->COMP_PlusInputSource
000008  e9d02300          LDRD     r2,r3,[r0,#0]
00000c  441a              ADD      r2,r2,r3
00000e  6883              LDR      r3,[r0,#8]
000010  441a              ADD      r2,r2,r3
000012  4411              ADD      r1,r1,r2
;;;56                   + COMP_InitStruct->COMP_MinusInputSource
;;;57                   + COMP_InitStruct->COMP_OutInversion;
;;;58       MDR_COMP->CFG = tmpreg_CFG;
000014  4a01              LDR      r2,|L14.28|
000016  6011              STR      r1,[r2,#0]
;;;59     }
000018  4770              BX       lr
;;;60     
                          ENDP

00001a  0000              DCW      0x0000
                  |L14.28|
                          DCD      0x40098000

                          AREA ||i.COMP_MInpSourceConfig||, CODE, READONLY, ALIGN=2

                  COMP_MInpSourceConfig PROC
;;;162      */
;;;163    void COMP_MInpSourceConfig(uint32_t Source)
000000  4601              MOV      r1,r0
;;;164    {
;;;165      uint32_t tmpreg_CFG;
;;;166    
;;;167      /* Check the parameters */
;;;168      assert_param(IS_COMP_MINUS_INPUT_CONFIG(Source));
;;;169    
;;;170      tmpreg_CFG = MDR_COMP->CFG;
000002  4a03              LDR      r2,|L15.16|
000004  6810              LDR      r0,[r2,#0]
;;;171      tmpreg_CFG &= ~COMP_CFG_CCH_Msk;
000006  f42060c0          BIC      r0,r0,#0x600
;;;172      tmpreg_CFG += Source;
00000a  4408              ADD      r0,r0,r1
;;;173      MDR_COMP->CFG = tmpreg_CFG;
00000c  6010              STR      r0,[r2,#0]
;;;174    }
00000e  4770              BX       lr
;;;175    
                          ENDP

                  |L15.16|
                          DCD      0x40098000

                          AREA ||i.COMP_OutInversionConfig||, CODE, READONLY, ALIGN=2

                  COMP_OutInversionConfig PROC
;;;183      */
;;;184    void COMP_OutInversionConfig(uint32_t Inversion)
000000  4601              MOV      r1,r0
;;;185    {
;;;186      uint32_t tmpreg_CFG;
;;;187    
;;;188      /* Check the parameters */
;;;189      assert_param(IS_COMP_OUT_INV_CONFIG(Inversion));
;;;190    
;;;191      tmpreg_CFG = MDR_COMP->CFG;
000002  4a03              LDR      r2,|L16.16|
000004  6810              LDR      r0,[r2,#0]
;;;192      tmpreg_CFG &= ~COMP_CFG_INV;
000006  f4206000          BIC      r0,r0,#0x800
;;;193      tmpreg_CFG += Inversion;
00000a  4408              ADD      r0,r0,r1
;;;194      MDR_COMP->CFG = tmpreg_CFG;
00000c  6010              STR      r0,[r2,#0]
;;;195    }
00000e  4770              BX       lr
;;;196    
                          ENDP

                  |L16.16|
                          DCD      0x40098000

                          AREA ||i.COMP_PInpSourceConfig||, CODE, READONLY, ALIGN=2

                  COMP_PInpSourceConfig PROC
;;;139      */
;;;140    void COMP_PInpSourceConfig(uint32_t Source)
000000  4601              MOV      r1,r0
;;;141    {
;;;142      uint32_t tmpreg_CFG;
;;;143    
;;;144      /* Check the parameters */
;;;145      assert_param(IS_COMP_PLUS_INPUT_CONFIG(Source));
;;;146    
;;;147      tmpreg_CFG = MDR_COMP->CFG;
000002  4a03              LDR      r2,|L17.16|
000004  6810              LDR      r0,[r2,#0]
;;;148      tmpreg_CFG &= ~COMP_CFG_CREF;
000006  f4207080          BIC      r0,r0,#0x100
;;;149      tmpreg_CFG += Source;
00000a  4408              ADD      r0,r0,r1
;;;150      MDR_COMP->CFG = tmpreg_CFG;
00000c  6010              STR      r0,[r2,#0]
;;;151    }
00000e  4770              BX       lr
;;;152    
                          ENDP

                  |L17.16|
                          DCD      0x40098000

                          AREA ||i.COMP_StructInit||, CODE, READONLY, ALIGN=1

                  COMP_StructInit PROC
;;;66       */
;;;67     void COMP_StructInit(COMP_InitTypeDef* COMP_InitStruct)
000000  2100              MOVS     r1,#0
;;;68     {
;;;69       COMP_InitStruct->COMP_PlusInputSource  = COMP_PlusInput_IN1;
000002  6001              STR      r1,[r0,#0]
;;;70       COMP_InitStruct->COMP_MinusInputSource = COMP_MinusInput_IN2;
000004  6041              STR      r1,[r0,#4]
;;;71       COMP_InitStruct->COMP_OutInversion     = COMP_OUT_INV_Disable;
000006  6081              STR      r1,[r0,#8]
;;;72     }
000008  4770              BX       lr
;;;73     
                          ENDP


;*** Start embedded assembler ***

#line 1 "C:\\Users\\AN-Mi\\AppData\\Local\\Arm\\Packs\\Keil\\MDR1986BExx\\1.51\\Libraries\\MDR32F9Qx_StdPeriph_Driver\\src\\MDR32F9Qx_comp.c"
	AREA ||.rev16_text||, CODE
	THUMB
	EXPORT |__asm___16_MDR32F9Qx_comp_c_66e338f6____REV16|
#line 467 "C:\\Users\\AN-Mi\\AppData\\Local\\Arm\\Packs\\ARM\\CMSIS\\5.5.1\\CMSIS\\Core\\Include\\cmsis_armcc.h"
|__asm___16_MDR32F9Qx_comp_c_66e338f6____REV16| PROC
#line 468

 rev16 r0, r0
 bx lr
	ENDP
	AREA ||.revsh_text||, CODE
	THUMB
	EXPORT |__asm___16_MDR32F9Qx_comp_c_66e338f6____REVSH|
#line 482
|__asm___16_MDR32F9Qx_comp_c_66e338f6____REVSH| PROC
#line 483

 revsh r0, r0
 bx lr
	ENDP
	AREA ||.rrx_text||, CODE
	THUMB
	EXPORT |__asm___16_MDR32F9Qx_comp_c_66e338f6____RRX|
#line 669
|__asm___16_MDR32F9Qx_comp_c_66e338f6____RRX| PROC
#line 670

 rrx r0, r0
 bx lr
	ENDP

;*** End   embedded assembler ***
