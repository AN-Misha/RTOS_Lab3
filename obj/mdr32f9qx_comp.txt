; generated by Component: ARM Compiler 5.06 update 5 (build 528) Tool: ArmCC [4d3621]
; commandline ArmCC [--list --split_sections --debug -c --asm --interleave -o.\obj\mdr32f9qx_comp.o --asm_dir=.\obj\ --list_dir=.\obj\ --depend=.\obj\mdr32f9qx_comp.d --cpu=Cortex-M3 --apcs=interwork -O0 --diag_suppress=9931 -I"..\CAN TEST" -I.\RTE -I.\RTE\Device -I.\RTE\Device\MDR1986BE92 -I.\rtos -I.\rtos\include -I.\RTE\Device\MDR1986BE92 -I.\RTE\_Target_1 -IC:\Keil_v5\ARM\PACK\ARM\CMSIS\5.0.1\CMSIS\Include -IC:\Keil_v5\ARM\PACK\Keil\MDR1986BExx\1.4\Config -IC:\Keil_v5\ARM\PACK\Keil\MDR1986BExx\1.4\Libraries\CMSIS\CM3\CoreSupport -IC:\Keil_v5\ARM\PACK\Keil\MDR1986BExx\1.4\Libraries\CMSIS\CM3\DeviceSupport\MDR32F9Qx\inc -IC:\Keil_v5\ARM\PACK\Keil\MDR1986BExx\1.4\Libraries\MDR32F9Qx_StdPeriph_Driver\inc -D__MICROLIB -D__UVISION_VERSION=524 -D_RTE_ -DUSE_MDR32F9Q2_Rev1 --omf_browse=.\obj\mdr32f9qx_comp.crf C:\Keil_v5\ARM\PACK\Keil\MDR1986BExx\1.4\Libraries\MDR32F9Qx_StdPeriph_Driver\src\MDR32F9Qx_comp.c]
                          THUMB

                          AREA ||i.COMP_CVRefCmd||, CODE, READONLY, ALIGN=2

                  COMP_CVRefCmd PROC
;;;259      */
;;;260    void COMP_CVRefCmd(FunctionalState NewState)
000000  4601              MOV      r1,r0
;;;261    {
;;;262      uint32_t tmpreg_CFG;
;;;263    
;;;264      /* Check the parameters */
;;;265      assert_param(IS_FUNCTIONAL_STATE(NewState));
;;;266    
;;;267      tmpreg_CFG = MDR_COMP->CFG;
000002  4a05              LDR      r2,|L1.24|
000004  6810              LDR      r0,[r2,#0]
;;;268    
;;;269      /* Form new value */
;;;270      if (NewState != DISABLE)
000006  b111              CBZ      r1,|L1.14|
;;;271      {
;;;272        /* Enable COMP reference by setting the COMP_CFG_CVREN bit in the COMP_CFG register */
;;;273        tmpreg_CFG |= COMP_CFG_CVREN;
000008  f0400008          ORR      r0,r0,#8
00000c  e001              B        |L1.18|
                  |L1.14|
;;;274      }
;;;275      else
;;;276      {
;;;277        /* Disable COMP reference by resetting the COMP_CFG_CVREN bit in the COMP_CFG register */
;;;278        tmpreg_CFG &= ~COMP_CFG_CVREN;
00000e  f0200008          BIC      r0,r0,#8
                  |L1.18|
;;;279      }
;;;280    
;;;281      /* Configure COMP_CFG register with new value */
;;;282      MDR_COMP->CFG = tmpreg_CFG;
000012  4a01              LDR      r2,|L1.24|
000014  6010              STR      r0,[r2,#0]
;;;283    }
000016  4770              BX       lr
;;;284    
                          ENDP

                  |L1.24|
                          DCD      0x40098000

                          AREA ||i.COMP_CVRefInit||, CODE, READONLY, ALIGN=2

                  COMP_CVRefInit PROC
;;;223      */
;;;224    void COMP_CVRefInit(const COMP_CVRefInitTypeDef* COMP_CVRefInitStruct)
000000  4a06              LDR      r2,|L2.28|
;;;225    {
;;;226      uint32_t tmpreg_CFG;
;;;227    
;;;228      /* Check the parameters */
;;;229      assert_param(IS_COMP_CVREF_SOURCE_CONFIG(COMP_CVRefInitStruct->COMP_CVRefSource));
;;;230      assert_param(IS_COMP_CVREF_RANGE_CONFIG(COMP_CVRefInitStruct->COMP_CVRefRange));
;;;231      assert_param(IS_COMP_CVREF_SCALE_CONFIG(COMP_CVRefInitStruct->COMP_CVRefScale));
;;;232    
;;;233      tmpreg_CFG = MDR_COMP->CFG;
000002  6811              LDR      r1,[r2,#0]
;;;234      tmpreg_CFG &= ~(COMP_CFG_CVRSS | COMP_CFG_CVRR | COMP_CFG_CVR_Msk);
000004  f02101f6          BIC      r1,r1,#0xf6
;;;235      tmpreg_CFG += COMP_CVRefInitStruct->COMP_CVRefSource
000008  e9d02300          LDRD     r2,r3,[r0,#0]
00000c  441a              ADD      r2,r2,r3
00000e  6883              LDR      r3,[r0,#8]
000010  441a              ADD      r2,r2,r3
000012  4411              ADD      r1,r1,r2
;;;236                  + COMP_CVRefInitStruct->COMP_CVRefRange
;;;237                  + COMP_CVRefInitStruct->COMP_CVRefScale;
;;;238      MDR_COMP->CFG = tmpreg_CFG;
000014  4a01              LDR      r2,|L2.28|
000016  6011              STR      r1,[r2,#0]
;;;239    }
000018  4770              BX       lr
;;;240    
                          ENDP

00001a  0000              DCW      0x0000
                  |L2.28|
                          DCD      0x40098000

                          AREA ||i.COMP_CVRefRangeConfig||, CODE, READONLY, ALIGN=2

                  COMP_CVRefRangeConfig PROC
;;;313      */
;;;314    void COMP_CVRefRangeConfig(uint32_t Range)
000000  4601              MOV      r1,r0
;;;315    {
;;;316      uint32_t tmpreg_CFG;
;;;317    
;;;318      /* Check the parameters */
;;;319      assert_param(IS_COMP_CVREF_RANGE_CONFIG(Range));
;;;320    
;;;321      tmpreg_CFG = MDR_COMP->CFG;
000002  4a03              LDR      r2,|L3.16|
000004  6810              LDR      r0,[r2,#0]
;;;322      tmpreg_CFG &= ~COMP_CFG_CVRR;
000006  f0200002          BIC      r0,r0,#2
;;;323      tmpreg_CFG += Range;
00000a  4408              ADD      r0,r0,r1
;;;324      MDR_COMP->CFG = tmpreg_CFG;
00000c  6010              STR      r0,[r2,#0]
;;;325    }
00000e  4770              BX       lr
;;;326    
                          ENDP

                  |L3.16|
                          DCD      0x40098000

                          AREA ||i.COMP_CVRefScaleConfig||, CODE, READONLY, ALIGN=2

                  COMP_CVRefScaleConfig PROC
;;;365      */
;;;366    void COMP_CVRefScaleConfig(uint32_t Scale)
000000  4601              MOV      r1,r0
;;;367    {
;;;368      uint32_t tmpreg_CFG;
;;;369    
;;;370      /* Check the parameters */
;;;371      assert_param(IS_COMP_CVREF_SCALE_CONFIG(Scale));
;;;372    
;;;373      tmpreg_CFG = MDR_COMP->CFG;
000002  4a03              LDR      r2,|L4.16|
000004  6810              LDR      r0,[r2,#0]
;;;374      tmpreg_CFG &= ~COMP_CFG_CVR_Msk;
000006  f02000f0          BIC      r0,r0,#0xf0
;;;375      tmpreg_CFG += Scale;
00000a  4408              ADD      r0,r0,r1
;;;376      MDR_COMP->CFG = tmpreg_CFG;
00000c  6010              STR      r0,[r2,#0]
;;;377    }
00000e  4770              BX       lr
;;;378    
                          ENDP

                  |L4.16|
                          DCD      0x40098000

                          AREA ||i.COMP_CVRefSourceConfig||, CODE, READONLY, ALIGN=2

                  COMP_CVRefSourceConfig PROC
;;;292      */
;;;293    void COMP_CVRefSourceConfig(uint32_t Source)
000000  4601              MOV      r1,r0
;;;294    {
;;;295      uint32_t tmpreg_CFG;
;;;296    
;;;297      /* Check the parameters */
;;;298      assert_param(IS_COMP_CVREF_SOURCE_CONFIG(Source));
;;;299    
;;;300      tmpreg_CFG = MDR_COMP->CFG;
000002  4a03              LDR      r2,|L5.16|
000004  6810              LDR      r0,[r2,#0]
;;;301      tmpreg_CFG &= ~COMP_CFG_CVRSS;
000006  f0200004          BIC      r0,r0,#4
;;;302      tmpreg_CFG += Source;
00000a  4408              ADD      r0,r0,r1
;;;303      MDR_COMP->CFG = tmpreg_CFG;
00000c  6010              STR      r0,[r2,#0]
;;;304    }
00000e  4770              BX       lr
;;;305    
                          ENDP

                  |L5.16|
                          DCD      0x40098000

                          AREA ||i.COMP_CVRefStructInit||, CODE, READONLY, ALIGN=1

                  COMP_CVRefStructInit PROC
;;;246      */
;;;247    void COMP_CVRefStructInit(COMP_CVRefInitTypeDef* COMP_CVRefInitStruct)
000000  2100              MOVS     r1,#0
;;;248    {
;;;249      COMP_CVRefInitStruct->COMP_CVRefSource = COMP_CVREF_SOURCE_AVdd;
000002  6001              STR      r1,[r0,#0]
;;;250      COMP_CVRefInitStruct->COMP_CVRefRange  = COMP_CVREF_RANGE_Up;
000004  6041              STR      r1,[r0,#4]
;;;251      COMP_CVRefInitStruct->COMP_CVRefScale  = COMP_CVREF_SCALE_0_div_24;
000006  6081              STR      r1,[r0,#8]
;;;252    }
000008  4770              BX       lr
;;;253    
                          ENDP


                          AREA ||i.COMP_Cmd||, CODE, READONLY, ALIGN=2

                  COMP_Cmd PROC
;;;98       */
;;;99     void COMP_Cmd(FunctionalState NewState)
000000  4601              MOV      r1,r0
;;;100    {
;;;101      uint32_t tmpreg_CFG;
;;;102    
;;;103      /* Check the parameters */
;;;104      assert_param(IS_FUNCTIONAL_STATE(NewState));
;;;105    
;;;106      tmpreg_CFG = MDR_COMP->CFG;
000002  4a05              LDR      r2,|L7.24|
000004  6810              LDR      r0,[r2,#0]
;;;107    
;;;108      /* Form new value */
;;;109      if (NewState != DISABLE)
000006  b111              CBZ      r1,|L7.14|
;;;110      {
;;;111        /* Enable COMP by setting the COMP_CFG_ON bit in the COMP_CFG register */
;;;112        tmpreg_CFG |= COMP_CFG_ON;
000008  f0400001          ORR      r0,r0,#1
00000c  e001              B        |L7.18|
                  |L7.14|
;;;113      }
;;;114      else
;;;115      {
;;;116        /* Disable COMP by resetting the COMP_CFG_ON bit in the COMP_CFG register */
;;;117        tmpreg_CFG &= ~COMP_CFG_ON;
00000e  f0200001          BIC      r0,r0,#1
                  |L7.18|
;;;118      }
;;;119    
;;;120      /* Configure COMP_CFG register with new value */
;;;121      MDR_COMP->CFG = tmpreg_CFG;
000012  4a01              LDR      r2,|L7.24|
000014  6010              STR      r0,[r2,#0]
;;;122    }
000016  4770              BX       lr
;;;123    
                          ENDP

                  |L7.24|
                          DCD      0x40098000

                          AREA ||i.COMP_DeInit||, CODE, READONLY, ALIGN=2

                  COMP_DeInit PROC
;;;48       */
;;;49     void COMP_DeInit(void)
000000  2000              MOVS     r0,#0
;;;50     {
;;;51       MDR_COMP->CFG = 0;
000002  4902              LDR      r1,|L8.12|
000004  6008              STR      r0,[r1,#0]
;;;52       MDR_COMP->RESULT_LATCH;
000006  4608              MOV      r0,r1
000008  6880              LDR      r0,[r0,#8]
;;;53     }
00000a  4770              BX       lr
;;;54     
                          ENDP

                  |L8.12|
                          DCD      0x40098000

                          AREA ||i.COMP_GetCfgFlagStatus||, CODE, READONLY, ALIGN=2

                  COMP_GetCfgFlagStatus PROC
;;;131      */
;;;132    FlagStatus COMP_GetCfgFlagStatus(uint32_t Flag)
000000  4601              MOV      r1,r0
;;;133    {
;;;134      FlagStatus bitstatus;
;;;135    
;;;136      /* Check the parameters */
;;;137      assert_param(IS_COMP_CFG_FLAG(Flag));
;;;138    
;;;139      if ((MDR_COMP->CFG & Flag) == 0)
000002  4a04              LDR      r2,|L9.20|
000004  6812              LDR      r2,[r2,#0]
000006  400a              ANDS     r2,r2,r1
000008  b90a              CBNZ     r2,|L9.14|
;;;140      {
;;;141        bitstatus = RESET;
00000a  2000              MOVS     r0,#0
00000c  e000              B        |L9.16|
                  |L9.14|
;;;142      }
;;;143      else
;;;144      {
;;;145        bitstatus = SET;
00000e  2001              MOVS     r0,#1
                  |L9.16|
;;;146      }
;;;147    
;;;148      return bitstatus;
;;;149    }
000010  4770              BX       lr
;;;150    
                          ENDP

000012  0000              DCW      0x0000
                  |L9.20|
                          DCD      0x40098000

                          AREA ||i.COMP_GetFlagStatus||, CODE, READONLY, ALIGN=1

                  COMP_GetFlagStatus PROC
;;;407      */
;;;408    FlagStatus COMP_GetFlagStatus(uint32_t Flag)
000000  b500              PUSH     {lr}
;;;409    {
000002  4602              MOV      r2,r0
;;;410      FlagStatus bitstatus;
;;;411    
;;;412      /* Check the parameters */
;;;413      assert_param(IS_COMP_STATUS_FLAG(Flag));
;;;414    
;;;415      if ((COMP_GetStatus() & Flag) == 0)
000004  f7fffffe          BL       COMP_GetStatus
000008  4010              ANDS     r0,r0,r2
00000a  b908              CBNZ     r0,|L10.16|
;;;416      {
;;;417        bitstatus = RESET;
00000c  2100              MOVS     r1,#0
00000e  e000              B        |L10.18|
                  |L10.16|
;;;418      }
;;;419      else
;;;420      {
;;;421        bitstatus = SET;
000010  2101              MOVS     r1,#1
                  |L10.18|
;;;422      }
;;;423    
;;;424      return bitstatus;
000012  4608              MOV      r0,r1
;;;425    }
000014  bd00              POP      {pc}
;;;426    
                          ENDP


                          AREA ||i.COMP_GetResultLatch||, CODE, READONLY, ALIGN=2

                  COMP_GetResultLatch PROC
;;;383      */
;;;384    uint32_t COMP_GetResultLatch(void)
000000  4801              LDR      r0,|L11.8|
;;;385    {
;;;386      return MDR_COMP->RESULT_LATCH;
000002  6880              LDR      r0,[r0,#8]
;;;387    }
000004  4770              BX       lr
;;;388    
                          ENDP

000006  0000              DCW      0x0000
                  |L11.8|
                          DCD      0x40098000

                          AREA ||i.COMP_GetStatus||, CODE, READONLY, ALIGN=2

                  COMP_GetStatus PROC
;;;393      */
;;;394    uint32_t COMP_GetStatus(void)
000000  4801              LDR      r0,|L12.8|
;;;395    {
;;;396      return MDR_COMP->RESULT;
000002  6840              LDR      r0,[r0,#4]
;;;397    }
000004  4770              BX       lr
;;;398    
                          ENDP

000006  0000              DCW      0x0000
                  |L12.8|
                          DCD      0x40098000

                          AREA ||i.COMP_ITConfig||, CODE, READONLY, ALIGN=2

                  COMP_ITConfig PROC
;;;432      */
;;;433    void COMP_ITConfig(FunctionalState NewState)
000000  4601              MOV      r1,r0
;;;434    {
;;;435      uint32_t tmpreg_CFG;
;;;436    
;;;437      /* Check the parameters */
;;;438      assert_param(IS_FUNCTIONAL_STATE(NewState));
;;;439    
;;;440      tmpreg_CFG = MDR_COMP->CFG;
000002  4a05              LDR      r2,|L13.24|
000004  6810              LDR      r0,[r2,#0]
;;;441    
;;;442      /* Form new value */
;;;443      if (NewState != DISABLE)
000006  b111              CBZ      r1,|L13.14|
;;;444      {
;;;445        /* Enable the COMP Interrupt requests by setting bits in the CFG registers */
;;;446        tmpreg_CFG |= COMP_CFG_CMPIE;
000008  f4405000          ORR      r0,r0,#0x2000
00000c  e001              B        |L13.18|
                  |L13.14|
;;;447      }
;;;448      else
;;;449      {
;;;450        /* Disable the COMP Interrupt requests by clearing bits in the CFG registers */
;;;451        tmpreg_CFG &= ~COMP_CFG_CMPIE;
00000e  f4205000          BIC      r0,r0,#0x2000
                  |L13.18|
;;;452      }
;;;453    
;;;454      /* Configure CFG registers with new value */
;;;455      MDR_COMP->CFG = tmpreg_CFG;
000012  4a01              LDR      r2,|L13.24|
000014  6010              STR      r0,[r2,#0]
;;;456    }
000016  4770              BX       lr
;;;457    
                          ENDP

                  |L13.24|
                          DCD      0x40098000

                          AREA ||i.COMP_Init||, CODE, READONLY, ALIGN=2

                  COMP_Init PROC
;;;62       */
;;;63     void COMP_Init(const COMP_InitTypeDef* COMP_InitStruct)
000000  4a06              LDR      r2,|L14.28|
;;;64     {
;;;65       uint32_t tmpreg_CFG;
;;;66     
;;;67       /* Check the parameters */
;;;68       assert_param(IS_COMP_PLUS_INPUT_CONFIG(COMP_InitStruct->COMP_PlusInputSource));
;;;69       assert_param(IS_COMP_MINUS_INPUT_CONFIG(COMP_InitStruct->COMP_MinusInputSource));
;;;70       assert_param(IS_COMP_OUT_INV_CONFIG(COMP_InitStruct->COMP_OutInversion));
;;;71     
;;;72       tmpreg_CFG = MDR_COMP->CFG;
000002  6811              LDR      r1,[r2,#0]
;;;73       tmpreg_CFG &= ~(COMP_CFG_CREF | COMP_CFG_CCH_Msk | COMP_CFG_INV);
000004  f4216170          BIC      r1,r1,#0xf00
;;;74       tmpreg_CFG += COMP_InitStruct->COMP_PlusInputSource
000008  e9d02300          LDRD     r2,r3,[r0,#0]
00000c  441a              ADD      r2,r2,r3
00000e  6883              LDR      r3,[r0,#8]
000010  441a              ADD      r2,r2,r3
000012  4411              ADD      r1,r1,r2
;;;75                   + COMP_InitStruct->COMP_MinusInputSource
;;;76                   + COMP_InitStruct->COMP_OutInversion;
;;;77       MDR_COMP->CFG = tmpreg_CFG;
000014  4a01              LDR      r2,|L14.28|
000016  6011              STR      r1,[r2,#0]
;;;78     }
000018  4770              BX       lr
;;;79     
                          ENDP

00001a  0000              DCW      0x0000
                  |L14.28|
                          DCD      0x40098000

                          AREA ||i.COMP_MInpSourceConfig||, CODE, READONLY, ALIGN=2

                  COMP_MInpSourceConfig PROC
;;;181      */
;;;182    void COMP_MInpSourceConfig(uint32_t Source)
000000  4601              MOV      r1,r0
;;;183    {
;;;184      uint32_t tmpreg_CFG;
;;;185    
;;;186      /* Check the parameters */
;;;187      assert_param(IS_COMP_MINUS_INPUT_CONFIG(Source));
;;;188    
;;;189      tmpreg_CFG = MDR_COMP->CFG;
000002  4a03              LDR      r2,|L15.16|
000004  6810              LDR      r0,[r2,#0]
;;;190      tmpreg_CFG &= ~COMP_CFG_CCH_Msk;
000006  f42060c0          BIC      r0,r0,#0x600
;;;191      tmpreg_CFG += Source;
00000a  4408              ADD      r0,r0,r1
;;;192      MDR_COMP->CFG = tmpreg_CFG;
00000c  6010              STR      r0,[r2,#0]
;;;193    }
00000e  4770              BX       lr
;;;194    
                          ENDP

                  |L15.16|
                          DCD      0x40098000

                          AREA ||i.COMP_OutInversionConfig||, CODE, READONLY, ALIGN=2

                  COMP_OutInversionConfig PROC
;;;202      */
;;;203    void COMP_OutInversionConfig(uint32_t Inversion)
000000  4601              MOV      r1,r0
;;;204    {
;;;205      uint32_t tmpreg_CFG;
;;;206    
;;;207      /* Check the parameters */
;;;208      assert_param(IS_COMP_OUT_INV_CONFIG(Inversion));
;;;209    
;;;210      tmpreg_CFG = MDR_COMP->CFG;
000002  4a03              LDR      r2,|L16.16|
000004  6810              LDR      r0,[r2,#0]
;;;211      tmpreg_CFG &= ~COMP_CFG_INV;
000006  f4206000          BIC      r0,r0,#0x800
;;;212      tmpreg_CFG += Inversion;
00000a  4408              ADD      r0,r0,r1
;;;213      MDR_COMP->CFG = tmpreg_CFG;
00000c  6010              STR      r0,[r2,#0]
;;;214    }
00000e  4770              BX       lr
;;;215    
                          ENDP

                  |L16.16|
                          DCD      0x40098000

                          AREA ||i.COMP_PInpSourceConfig||, CODE, READONLY, ALIGN=2

                  COMP_PInpSourceConfig PROC
;;;158      */
;;;159    void COMP_PInpSourceConfig(uint32_t Source)
000000  4601              MOV      r1,r0
;;;160    {
;;;161      uint32_t tmpreg_CFG;
;;;162    
;;;163      /* Check the parameters */
;;;164      assert_param(IS_COMP_PLUS_INPUT_CONFIG(Source));
;;;165    
;;;166      tmpreg_CFG = MDR_COMP->CFG;
000002  4a03              LDR      r2,|L17.16|
000004  6810              LDR      r0,[r2,#0]
;;;167      tmpreg_CFG &= ~COMP_CFG_CREF;
000006  f4207080          BIC      r0,r0,#0x100
;;;168      tmpreg_CFG += Source;
00000a  4408              ADD      r0,r0,r1
;;;169      MDR_COMP->CFG = tmpreg_CFG;
00000c  6010              STR      r0,[r2,#0]
;;;170    }
00000e  4770              BX       lr
;;;171    
                          ENDP

                  |L17.16|
                          DCD      0x40098000

                          AREA ||i.COMP_StructInit||, CODE, READONLY, ALIGN=1

                  COMP_StructInit PROC
;;;85       */
;;;86     void COMP_StructInit(COMP_InitTypeDef* COMP_InitStruct)
000000  2100              MOVS     r1,#0
;;;87     {
;;;88       COMP_InitStruct->COMP_PlusInputSource  = COMP_PlusInput_IN1;
000002  6001              STR      r1,[r0,#0]
;;;89       COMP_InitStruct->COMP_MinusInputSource = COMP_MinusInput_IN2;
000004  6041              STR      r1,[r0,#4]
;;;90       COMP_InitStruct->COMP_OutInversion     = COMP_OUT_INV_Disable;
000006  6081              STR      r1,[r0,#8]
;;;91     }
000008  4770              BX       lr
;;;92     
                          ENDP


;*** Start embedded assembler ***

#line 1 "C:\\Keil_v5\\ARM\\PACK\\Keil\\MDR1986BExx\\1.4\\Libraries\\MDR32F9Qx_StdPeriph_Driver\\src\\MDR32F9Qx_comp.c"
	AREA ||.rev16_text||, CODE
	THUMB
	EXPORT |__asm___16_MDR32F9Qx_comp_c_66e338f6____REV16|
#line 447 "C:\\Keil_v5\\ARM\\PACK\\ARM\\CMSIS\\5.0.1\\CMSIS\\Include\\cmsis_armcc.h"
|__asm___16_MDR32F9Qx_comp_c_66e338f6____REV16| PROC
#line 448

 rev16 r0, r0
 bx lr
	ENDP
	AREA ||.revsh_text||, CODE
	THUMB
	EXPORT |__asm___16_MDR32F9Qx_comp_c_66e338f6____REVSH|
#line 462
|__asm___16_MDR32F9Qx_comp_c_66e338f6____REVSH| PROC
#line 463

 revsh r0, r0
 bx lr
	ENDP
	AREA ||.rrx_text||, CODE
	THUMB
	EXPORT |__asm___16_MDR32F9Qx_comp_c_66e338f6____RRX|
#line 649
|__asm___16_MDR32F9Qx_comp_c_66e338f6____RRX| PROC
#line 650

 rrx r0, r0
 bx lr
	ENDP

;*** End   embedded assembler ***
