; generated by Component: ARM Compiler 5.06 update 5 (build 528) Tool: ArmCC [4d3621]
; commandline ArmCC [--list --split_sections --debug -c --asm --interleave -o.\obj\mdr32f9qx_i2c.o --asm_dir=.\obj\ --list_dir=.\obj\ --depend=.\obj\mdr32f9qx_i2c.d --cpu=Cortex-M3 --apcs=interwork -O0 --diag_suppress=9931 -I"..\CAN TEST" -I.\RTE -I.\RTE\Device -I.\RTE\Device\MDR1986BE92 -I.\rtos -I.\rtos\include -I.\RTE\Device\MDR1986BE92 -I.\RTE\_Target_1 -IC:\Keil_v5\ARM\PACK\ARM\CMSIS\5.0.1\CMSIS\Include -IC:\Keil_v5\ARM\PACK\Keil\MDR1986BExx\1.4\Config -IC:\Keil_v5\ARM\PACK\Keil\MDR1986BExx\1.4\Libraries\CMSIS\CM3\CoreSupport -IC:\Keil_v5\ARM\PACK\Keil\MDR1986BExx\1.4\Libraries\CMSIS\CM3\DeviceSupport\MDR32F9Qx\inc -IC:\Keil_v5\ARM\PACK\Keil\MDR1986BExx\1.4\Libraries\MDR32F9Qx_StdPeriph_Driver\inc -D__MICROLIB -D__UVISION_VERSION=524 -D_RTE_ -DUSE_MDR32F9Q2_Rev1 --omf_browse=.\obj\mdr32f9qx_i2c.crf C:\Keil_v5\ARM\PACK\Keil\MDR1986BExx\1.4\Libraries\MDR32F9Qx_StdPeriph_Driver\src\MDR32F9Qx_i2c.c]
                          THUMB

                          AREA ||i.I2C_CheckEvent||, CODE, READONLY, ALIGN=1

                  I2C_CheckEvent PROC
;;;321      */
;;;322    ErrorStatus I2C_CheckEvent(uint32_t Event)
000000  b530              PUSH     {r4,r5,lr}
;;;323    {
000002  4604              MOV      r4,r0
;;;324      ErrorStatus errstatus;
;;;325    
;;;326      assert_param(IS_I2C_FLAGS(Event));
;;;327    
;;;328      if ((I2C_GetLastEvent() & Event) == Event)
000004  f7fffffe          BL       I2C_GetLastEvent
000008  4020              ANDS     r0,r0,r4
00000a  42a0              CMP      r0,r4
00000c  d101              BNE      |L1.18|
;;;329      {
;;;330        errstatus = SUCCESS;
00000e  2501              MOVS     r5,#1
000010  e000              B        |L1.20|
                  |L1.18|
;;;331      }
;;;332      else
;;;333      {
;;;334        errstatus = ERROR;
000012  2500              MOVS     r5,#0
                  |L1.20|
;;;335      }
;;;336    
;;;337      return errstatus;
000014  4628              MOV      r0,r5
;;;338    }
000016  bd30              POP      {r4,r5,pc}
;;;339    
                          ENDP


                          AREA ||i.I2C_ClearITPendingBit||, CODE, READONLY, ALIGN=2

                  I2C_ClearITPendingBit PROC
;;;210      */
;;;211    void I2C_ClearITPendingBit(void)
000000  4802              LDR      r0,|L2.12|
;;;212    {
;;;213      MDR_I2C_TypeDef *I2Cx;
;;;214    
;;;215      I2Cx = MDR_I2C;
;;;216    
;;;217      I2Cx->CMD |= I2C_CMD_CLRINT;
000002  6981              LDR      r1,[r0,#0x18]
000004  f0410101          ORR      r1,r1,#1
000008  6181              STR      r1,[r0,#0x18]
;;;218    }
00000a  4770              BX       lr
;;;219    
                          ENDP

                  |L2.12|
                          DCD      0x40050000

                          AREA ||i.I2C_Cmd||, CODE, READONLY, ALIGN=2

                  I2C_Cmd PROC
;;;119      */
;;;120    void I2C_Cmd(FunctionalState NewState)
000000  4601              MOV      r1,r0
;;;121    {
;;;122      MDR_I2C_TypeDef *I2Cx;
;;;123      uint32_t tmpreg_CTR;
;;;124    
;;;125      /* Check the parameters */
;;;126      assert_param(IS_FUNCTIONAL_STATE(NewState));
;;;127    
;;;128      I2Cx = MDR_I2C;
000002  4a05              LDR      r2,|L3.24|
;;;129    
;;;130      tmpreg_CTR = I2Cx->CTR;
000004  6890              LDR      r0,[r2,#8]
;;;131    
;;;132      /* Form new value */
;;;133      if (NewState != DISABLE)
000006  b111              CBZ      r1,|L3.14|
;;;134      {
;;;135        /* Enable I2C by setting the EN_I2C bit in the CTR register */
;;;136        tmpreg_CTR |= I2C_CTR_EN_I2C;
000008  f0400080          ORR      r0,r0,#0x80
00000c  e001              B        |L3.18|
                  |L3.14|
;;;137      }
;;;138      else
;;;139      {
;;;140        /* Disable I2C by resetting the EN_I2C bit in the CTR register */
;;;141        tmpreg_CTR &= ~I2C_CTR_EN_I2C;
00000e  f0200080          BIC      r0,r0,#0x80
                  |L3.18|
;;;142      }
;;;143    
;;;144      /* Configure CTR register with new value */
;;;145      I2Cx->CTR = tmpreg_CTR;
000012  6090              STR      r0,[r2,#8]
;;;146    }
000014  4770              BX       lr
;;;147    
                          ENDP

000016  0000              DCW      0x0000
                  |L3.24|
                          DCD      0x40050000

                          AREA ||i.I2C_DeInit||, CODE, READONLY, ALIGN=2

                  I2C_DeInit PROC
;;;48       */
;;;49     void I2C_DeInit(void)
000000  4804              LDR      r0,|L4.20|
;;;50     {
;;;51       MDR_I2C_TypeDef *I2Cx;
;;;52     
;;;53       I2Cx = MDR_I2C;
;;;54     
;;;55       I2Cx->CTR = 0;
000002  2100              MOVS     r1,#0
000004  6081              STR      r1,[r0,#8]
;;;56       I2Cx->STA = 0;
000006  6101              STR      r1,[r0,#0x10]
;;;57       I2Cx->CMD = I2C_CMD_CLRINT;
000008  2101              MOVS     r1,#1
00000a  6181              STR      r1,[r0,#0x18]
;;;58       I2Cx->PRL = 0;
00000c  2100              MOVS     r1,#0
00000e  6001              STR      r1,[r0,#0]
;;;59       I2Cx->PRH = 0;
000010  6041              STR      r1,[r0,#4]
;;;60     }
000012  4770              BX       lr
;;;61     
                          ENDP

                  |L4.20|
                          DCD      0x40050000

                          AREA ||i.I2C_GetFlagStatus||, CODE, READONLY, ALIGN=1

                  I2C_GetFlagStatus PROC
;;;386      */
;;;387    FlagStatus I2C_GetFlagStatus(uint32_t Flag)
000000  b530              PUSH     {r4,r5,lr}
;;;388    {
000002  4605              MOV      r5,r0
;;;389      FlagStatus bitstatus;
;;;390    
;;;391      assert_param(IS_I2C_FLAG(Flag));
;;;392    
;;;393      if ((I2C_GetLastEvent() & Flag) != 0)
000004  f7fffffe          BL       I2C_GetLastEvent
000008  4028              ANDS     r0,r0,r5
00000a  b108              CBZ      r0,|L5.16|
;;;394      {
;;;395        bitstatus = SET;
00000c  2401              MOVS     r4,#1
00000e  e000              B        |L5.18|
                  |L5.16|
;;;396      }
;;;397      else
;;;398      {
;;;399        bitstatus = RESET;
000010  2400              MOVS     r4,#0
                  |L5.18|
;;;400      }
;;;401    
;;;402      return bitstatus;
000012  4620              MOV      r0,r4
;;;403    }
000014  bd30              POP      {r4,r5,pc}
;;;404    
                          ENDP


                          AREA ||i.I2C_GetITStatus||, CODE, READONLY, ALIGN=2

                  I2C_GetITStatus PROC
;;;186      */
;;;187    ITStatus I2C_GetITStatus(void)
000000  4904              LDR      r1,|L6.20|
;;;188    {
;;;189      MDR_I2C_TypeDef *I2Cx;
;;;190      ITStatus bitstatus;
;;;191    
;;;192      I2Cx = MDR_I2C;
;;;193    
;;;194      if ((I2Cx->STA & I2C_STA_INT) == I2C_STA_INT)
000002  690a              LDR      r2,[r1,#0x10]
000004  f0020201          AND      r2,r2,#1
000008  b10a              CBZ      r2,|L6.14|
;;;195      {
;;;196        bitstatus = SET;
00000a  2001              MOVS     r0,#1
00000c  e000              B        |L6.16|
                  |L6.14|
;;;197      }
;;;198      else
;;;199      {
;;;200        bitstatus = RESET;
00000e  2000              MOVS     r0,#0
                  |L6.16|
;;;201      }
;;;202    
;;;203      return bitstatus;
;;;204    }
000010  4770              BX       lr
;;;205    
                          ENDP

000012  0000              DCW      0x0000
                  |L6.20|
                          DCD      0x40050000

                          AREA ||i.I2C_GetLastEvent||, CODE, READONLY, ALIGN=2

                  I2C_GetLastEvent PROC
;;;347      */
;;;348    uint32_t I2C_GetLastEvent(void)
000000  4904              LDR      r1,|L7.20|
;;;349    {
;;;350      MDR_I2C_TypeDef *I2Cx;
;;;351      uint32_t event;
;;;352    
;;;353      I2Cx = MDR_I2C;
;;;354    
;;;355      event = I2Cx->CMD | (I2Cx->STA << 8);
000002  698a              LDR      r2,[r1,#0x18]
000004  690b              LDR      r3,[r1,#0x10]
000006  ea422003          ORR      r0,r2,r3,LSL #8
;;;356      event |= ~event << 16;
00000a  43c2              MVNS     r2,r0
00000c  ea404002          ORR      r0,r0,r2,LSL #16
;;;357    
;;;358      return event;
;;;359    }
000010  4770              BX       lr
;;;360    
                          ENDP

000012  0000              DCW      0x0000
                  |L7.20|
                          DCD      0x40050000

                          AREA ||i.I2C_GetReceivedData||, CODE, READONLY, ALIGN=2

                  I2C_GetReceivedData PROC
;;;297      */
;;;298    uint8_t I2C_GetReceivedData(void)
000000  4901              LDR      r1,|L8.8|
;;;299    {
;;;300      MDR_I2C_TypeDef *I2Cx;
;;;301    
;;;302      I2Cx = MDR_I2C;
;;;303    
;;;304      return I2Cx->RXD;
000002  68c8              LDR      r0,[r1,#0xc]
000004  b2c0              UXTB     r0,r0
;;;305    }
000006  4770              BX       lr
;;;306    
                          ENDP

                  |L8.8|
                          DCD      0x40050000

                          AREA ||i.I2C_ITConfig||, CODE, READONLY, ALIGN=2

                  I2C_ITConfig PROC
;;;153      */
;;;154    void I2C_ITConfig(FunctionalState NewState)
000000  4601              MOV      r1,r0
;;;155    {
;;;156      MDR_I2C_TypeDef *I2Cx;
;;;157      uint32_t tmpreg_CTR;
;;;158    
;;;159      /* Check the parameters */
;;;160      assert_param(IS_FUNCTIONAL_STATE(NewState));
;;;161    
;;;162      I2Cx = MDR_I2C;
000002  4a05              LDR      r2,|L9.24|
;;;163    
;;;164      tmpreg_CTR = I2Cx->CTR;
000004  6890              LDR      r0,[r2,#8]
;;;165    
;;;166      /* Form new value */
;;;167      if (NewState != DISABLE)
000006  b111              CBZ      r1,|L9.14|
;;;168      {
;;;169        /* Enable the I2C interrupts by setting the EN_INT bit in the CTR register */
;;;170        tmpreg_CTR |= I2C_CTR_EN_INT;
000008  f0400040          ORR      r0,r0,#0x40
00000c  e001              B        |L9.18|
                  |L9.14|
;;;171      }
;;;172      else
;;;173      {
;;;174        /* Disable the I2C interrupts by resetting the EN_INT bit in the CTR register */
;;;175        tmpreg_CTR &= ~I2C_CTR_EN_INT;
00000e  f0200040          BIC      r0,r0,#0x40
                  |L9.18|
;;;176      }
;;;177    
;;;178      /* Configure CTR register with new value */
;;;179      I2Cx->CTR = tmpreg_CTR;
000012  6090              STR      r0,[r2,#8]
;;;180    }
000014  4770              BX       lr
;;;181    
                          ENDP

000016  0000              DCW      0x0000
                  |L9.24|
                          DCD      0x40050000

                          AREA ||i.I2C_Init||, CODE, READONLY, ALIGN=2

                  I2C_Init PROC
;;;68       */
;;;69     void I2C_Init(const I2C_InitTypeDef* I2C_InitStruct)
000000  b510              PUSH     {r4,lr}
;;;70     {
000002  4601              MOV      r1,r0
;;;71       MDR_I2C_TypeDef *I2Cx;
;;;72       uint32_t tmpreg_CTR;
;;;73       uint32_t tmpreg_PR;
;;;74     
;;;75       /* Check the parameters */
;;;76       assert_param(IS_I2C_SPEED(I2C_InitStruct->I2C_Speed));
;;;77       assert_param(IS_I2C_CLKDIV(I2C_InitStruct->I2C_ClkDiv));
;;;78     
;;;79       I2Cx = MDR_I2C;
000004  4808              LDR      r0,|L10.40|
;;;80     
;;;81       /* Form new values */
;;;82       tmpreg_CTR = I2Cx->CTR;
000006  6882              LDR      r2,[r0,#8]
;;;83     
;;;84       if ((I2C_InitStruct->I2C_Speed & I2C_SPEED_Msk) != I2C_SPEED_UP_TO_400KHz)
000008  790c              LDRB     r4,[r1,#4]
00000a  f0040420          AND      r4,r4,#0x20
00000e  b114              CBZ      r4,|L10.22|
;;;85       {
;;;86         tmpreg_CTR |= I2C_CTR_S_I2C;
000010  f0420220          ORR      r2,r2,#0x20
000014  e001              B        |L10.26|
                  |L10.22|
;;;87       }
;;;88       else
;;;89       {
;;;90         tmpreg_CTR &= ~I2C_CTR_S_I2C;
000016  f0220220          BIC      r2,r2,#0x20
                  |L10.26|
;;;91       }
;;;92     
;;;93       /* Configure I2C registers with new values */
;;;94       I2Cx->CTR = tmpreg_CTR;
00001a  6082              STR      r2,[r0,#8]
;;;95     
;;;96       tmpreg_PR = I2C_InitStruct->I2C_ClkDiv;
00001c  680b              LDR      r3,[r1,#0]
;;;97       I2Cx->PRL = tmpreg_PR;
00001e  6003              STR      r3,[r0,#0]
;;;98       I2Cx->PRH = tmpreg_PR >> 8;
000020  0a1c              LSRS     r4,r3,#8
000022  6044              STR      r4,[r0,#4]
;;;99     }
000024  bd10              POP      {r4,pc}
;;;100    
                          ENDP

000026  0000              DCW      0x0000
                  |L10.40|
                          DCD      0x40050000

                          AREA ||i.I2C_Send7bitAddress||, CODE, READONLY, ALIGN=2

                  I2C_Send7bitAddress PROC
;;;231      */
;;;232    void I2C_Send7bitAddress(uint8_t Address, uint32_t Direction)
000000  4a03              LDR      r2,|L11.16|
;;;233    {
;;;234      MDR_I2C_TypeDef *I2Cx;
;;;235    
;;;236      assert_param(IS_I2C_DIRECTION(Direction));
;;;237    
;;;238      I2Cx = MDR_I2C;
;;;239    
;;;240      I2Cx->TXD = (Address & ~I2C_Direction_Msk) | Direction;
000002  f0200301          BIC      r3,r0,#1
000006  430b              ORRS     r3,r3,r1
000008  6153              STR      r3,[r2,#0x14]
;;;241      I2Cx->CMD = I2C_CMD_START | I2C_CMD_WR;
00000a  2390              MOVS     r3,#0x90
00000c  6193              STR      r3,[r2,#0x18]
;;;242    }
00000e  4770              BX       lr
;;;243    
                          ENDP

                  |L11.16|
                          DCD      0x40050000

                          AREA ||i.I2C_SendByte||, CODE, READONLY, ALIGN=2

                  I2C_SendByte PROC
;;;248      */
;;;249    void I2C_SendByte(uint8_t ByteToSend)
000000  4601              MOV      r1,r0
;;;250    {
;;;251      MDR_I2C_TypeDef *I2Cx;
;;;252    
;;;253      I2Cx = MDR_I2C;
000002  4802              LDR      r0,|L12.12|
;;;254    
;;;255      I2Cx->TXD = ByteToSend;
000004  6141              STR      r1,[r0,#0x14]
;;;256      I2Cx->CMD = I2C_CMD_WR;
000006  2210              MOVS     r2,#0x10
000008  6182              STR      r2,[r0,#0x18]
;;;257    }
00000a  4770              BX       lr
;;;258    
                          ENDP

                  |L12.12|
                          DCD      0x40050000

                          AREA ||i.I2C_SendSTOP||, CODE, READONLY, ALIGN=2

                  I2C_SendSTOP PROC
;;;263      */
;;;264    void I2C_SendSTOP(void)
000000  4801              LDR      r0,|L13.8|
;;;265    {
;;;266      MDR_I2C_TypeDef *I2Cx;
;;;267    
;;;268      I2Cx = MDR_I2C;
;;;269    
;;;270      I2Cx->CMD = I2C_CMD_STOP;
000002  2140              MOVS     r1,#0x40
000004  6181              STR      r1,[r0,#0x18]
;;;271    }
000006  4770              BX       lr
;;;272    
                          ENDP

                  |L13.8|
                          DCD      0x40050000

                          AREA ||i.I2C_StartReceiveData||, CODE, READONLY, ALIGN=2

                  I2C_StartReceiveData PROC
;;;281      */
;;;282    void I2C_StartReceiveData(uint32_t Acknowlage)
000000  4902              LDR      r1,|L14.12|
;;;283    {
;;;284      MDR_I2C_TypeDef *I2Cx;
;;;285    
;;;286      assert_param(IS_I2C_SEND_ACKNOWLAGE(Acknowlage));
;;;287    
;;;288      I2Cx = MDR_I2C;
;;;289    
;;;290      I2Cx->CMD = I2C_CMD_RD | Acknowlage;
000002  f0400220          ORR      r2,r0,#0x20
000006  618a              STR      r2,[r1,#0x18]
;;;291    }
000008  4770              BX       lr
;;;292    
                          ENDP

00000a  0000              DCW      0x0000
                  |L14.12|
                          DCD      0x40050000

                          AREA ||i.I2C_StructInit||, CODE, READONLY, ALIGN=1

                  I2C_StructInit PROC
;;;106      */
;;;107    void I2C_StructInit(I2C_InitTypeDef* I2C_InitStruct)
000000  2100              MOVS     r1,#0
;;;108    {
;;;109      /* Reset I2C initialization structure parameters values */
;;;110      I2C_InitStruct->I2C_Speed  = I2C_SPEED_UP_TO_400KHz;
000002  6041              STR      r1,[r0,#4]
;;;111      I2C_InitStruct->I2C_ClkDiv = 1;
000004  2101              MOVS     r1,#1
000006  6001              STR      r1,[r0,#0]
;;;112    }
000008  4770              BX       lr
;;;113    
                          ENDP


;*** Start embedded assembler ***

#line 1 "C:\\Keil_v5\\ARM\\PACK\\Keil\\MDR1986BExx\\1.4\\Libraries\\MDR32F9Qx_StdPeriph_Driver\\src\\MDR32F9Qx_i2c.c"
	AREA ||.rev16_text||, CODE
	THUMB
	EXPORT |__asm___15_MDR32F9Qx_i2c_c_7174d409____REV16|
#line 447 "C:\\Keil_v5\\ARM\\PACK\\ARM\\CMSIS\\5.0.1\\CMSIS\\Include\\cmsis_armcc.h"
|__asm___15_MDR32F9Qx_i2c_c_7174d409____REV16| PROC
#line 448

 rev16 r0, r0
 bx lr
	ENDP
	AREA ||.revsh_text||, CODE
	THUMB
	EXPORT |__asm___15_MDR32F9Qx_i2c_c_7174d409____REVSH|
#line 462
|__asm___15_MDR32F9Qx_i2c_c_7174d409____REVSH| PROC
#line 463

 revsh r0, r0
 bx lr
	ENDP
	AREA ||.rrx_text||, CODE
	THUMB
	EXPORT |__asm___15_MDR32F9Qx_i2c_c_7174d409____RRX|
#line 649
|__asm___15_MDR32F9Qx_i2c_c_7174d409____RRX| PROC
#line 650

 rrx r0, r0
 bx lr
	ENDP

;*** End   embedded assembler ***
